###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.1.169/W32 for ARM         02/Jul/2019  17:59:15
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  G:\AIcar\@@\xiugai\lib\LPLD\HW\HW_FLASH.c
#    Command line =  
#        -f C:\Users\admin\AppData\Local\Temp\EW4EF7.tmp
#        (G:\AIcar\@@\xiugai\lib\LPLD\HW\HW_FLASH.c -D LPLD_K60 -lCN
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\List"
#        -lB
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\List"
#        -o "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        G:\AIcar\arm\inc\c\DLib_Config_Normal.h -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\app\" -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\CPU\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\common\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\HW\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\DEV\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Ports\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Source\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\option\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\common\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\driver\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\descriptor\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\class\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\Jay\"
#        -On -I G:\AIcar\arm\CMSIS\Core\Include\ -I
#        G:\AIcar\arm\CMSIS\DSP\Include\ -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\List\HW_FLASH.lst
#    Object file  =  
#        G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\Obj\HW_FLASH.o
#
###############################################################################

G:\AIcar\@@\xiugai\lib\LPLD\HW\HW_FLASH.c
      1          /**
      2           * @file HW_FLASH.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief FTFL底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"
     23          #include "HW_FLASH.h"
     24          
     25          /*
     26           * LPLD_Flash_Init
     27           * Flash模块初始化
     28           * 
     29           * 参数:
     30           *    无
     31           *
     32           * 输出:
     33           *    无
     34           */

   \                                 In section .text, align 2, keep-with-next
     35          void LPLD_Flash_Init(void)
     36          {
     37            //检查Flash访问错误
     38            if (FTFL->FSTAT & FTFL_FSTAT_ACCERR_MASK)
   \                     LPLD_Flash_Init: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable2  ;; 0x40020000
   \        0x2   0x7801             LDRB     R1,[R0, #+0]
   \        0x4   0x0689             LSLS     R1,R1,#+26
   \        0x6   0xD504             BPL.N    ??LPLD_Flash_Init_0
     39            {
     40              FTFL->FSTAT |= FTFL_FSTAT_ACCERR_MASK;       //清除错误标志
   \        0x8   0x7801             LDRB     R1,[R0, #+0]
   \        0xA   0xF051 0x0120      ORRS     R1,R1,#0x20
   \        0xE   0x7001             STRB     R1,[R0, #+0]
   \       0x10   0xE00E             B.N      ??LPLD_Flash_Init_1
     41            }
     42            //检查保护错误
     43            else if (FTFL->FSTAT & FTFL_FSTAT_FPVIOL_MASK)
   \                     ??LPLD_Flash_Init_0: (+1)
   \       0x12   0x7801             LDRB     R1,[R0, #+0]
   \       0x14   0x06C9             LSLS     R1,R1,#+27
   \       0x16   0xD504             BPL.N    ??LPLD_Flash_Init_2
     44            {
     45              FTFL->FSTAT |= FTFL_FSTAT_FPVIOL_MASK;
   \       0x18   0x7801             LDRB     R1,[R0, #+0]
   \       0x1A   0xF051 0x0110      ORRS     R1,R1,#0x10
   \       0x1E   0x7001             STRB     R1,[R0, #+0]
   \       0x20   0xE006             B.N      ??LPLD_Flash_Init_1
     46            }
     47            //检查读冲突错误
     48            else if (FTFL->FSTAT & FTFL_FSTAT_RDCOLERR_MASK)
   \                     ??LPLD_Flash_Init_2: (+1)
   \       0x22   0x7801             LDRB     R1,[R0, #+0]
   \       0x24   0x0649             LSLS     R1,R1,#+25
   \       0x26   0xD503             BPL.N    ??LPLD_Flash_Init_1
     49            {
     50              FTFL->FSTAT |= FTFL_FSTAT_RDCOLERR_MASK;
   \       0x28   0x7801             LDRB     R1,[R0, #+0]
   \       0x2A   0xF051 0x0140      ORRS     R1,R1,#0x40
   \       0x2E   0x7001             STRB     R1,[R0, #+0]
     51            }
     52            
     53            //禁用Flash模块的数据缓存
     54            FMC->PFB0CR &= ~FMC_PFB0CR_B0DCE_MASK;
   \                     ??LPLD_Flash_Init_1: (+1)
   \       0x30   0x....             LDR.N    R0,??DataTable2_1  ;; 0x4001f004
   \       0x32   0x6801             LDR      R1,[R0, #+0]
   \       0x34   0xF031 0x0110      BICS     R1,R1,#0x10
   \       0x38   0x6001             STR      R1,[R0, #+0]
     55            FMC->PFB1CR &= ~FMC_PFB1CR_B1DCE_MASK;
   \       0x3A   0x....             LDR.N    R0,??DataTable2_2  ;; 0x4001f008
   \       0x3C   0x6801             LDR      R1,[R0, #+0]
   \       0x3E   0xF031 0x0110      BICS     R1,R1,#0x10
   \       0x42   0x6001             STR      R1,[R0, #+0]
     56          } 
   \       0x44   0x4770             BX       LR               ;; return
     57          
     58          
     59          /*
     60           * LPLD_Flash_SectorErase
     61           * 擦除Flash扇区
     62           * 
     63           * 参数:
     64           *    FlashPtr--扇区地址指针，即扇区号乘以2048
     65           *
     66           * 输出:
     67           *    错误代码
     68           */

   \                                 In section .text, align 2, keep-with-next
     69          uint8 LPLD_Flash_SectorErase(uint32 FlashPtr)
     70          {
   \                     LPLD_Flash_SectorErase: (+1)
   \        0x0   0xB410             PUSH     {R4}
   \        0x2   0x0001             MOVS     R1,R0
     71            uint8 Return = FLASH_OK;
   \        0x4   0x2000             MOVS     R0,#+0
     72            
     73            //等待CCIF置1
     74            while (!(FTFL->FSTAT & FTFL_FSTAT_CCIF_MASK)){};
   \                     ??LPLD_Flash_SectorErase_0: (+1)
   \        0x6   0x....             LDR.N    R2,??DataTable2  ;; 0x40020000
   \        0x8   0x7813             LDRB     R3,[R2, #+0]
   \        0xA   0x061B             LSLS     R3,R3,#+24
   \        0xC   0xD5FB             BPL.N    ??LPLD_Flash_SectorErase_0
     75            //写入命令道FCCOB寄存器
     76            FTFL->FCCOB0 = FLASH_CMD_ERSSCR;
   \        0xE   0x2309             MOVS     R3,#+9
   \       0x10   0x....             LDR.N    R4,??DataTable2_3  ;; 0x40020007
   \       0x12   0x7023             STRB     R3,[R4, #+0]
     77            FTFL->FCCOB1 = (uint8) (FlashPtr >> 16);
   \       0x14   0x000B             MOVS     R3,R1
   \       0x16   0x0C1B             LSRS     R3,R3,#+16
   \       0x18   0x....             LDR.N    R4,??DataTable2_4  ;; 0x40020006
   \       0x1A   0x7023             STRB     R3,[R4, #+0]
     78            FTFL->FCCOB2 = (uint8)((FlashPtr >> 8 ) & 0xFF);
   \       0x1C   0x000B             MOVS     R3,R1
   \       0x1E   0x0A1B             LSRS     R3,R3,#+8
   \       0x20   0x....             LDR.N    R4,??DataTable2_5  ;; 0x40020005
   \       0x22   0x7023             STRB     R3,[R4, #+0]
     79            FTFL->FCCOB3 = (uint8)( FlashPtr & 0xFF);
   \       0x24   0x....             LDR.N    R3,??DataTable2_6  ;; 0x40020004
   \       0x26   0x7019             STRB     R1,[R3, #+0]
     80            
     81            //执行命令
     82            FTFL->FSTAT |= FTFL_FSTAT_CCIF_MASK;    
   \       0x28   0x7813             LDRB     R3,[R2, #+0]
   \       0x2A   0xF053 0x0380      ORRS     R3,R3,#0x80
   \       0x2E   0x7013             STRB     R3,[R2, #+0]
     83            //等待命令完成
     84            while (!(FTFL->FSTAT & FTFL_FSTAT_CCIF_MASK)) {};
   \                     ??LPLD_Flash_SectorErase_1: (+1)
   \       0x30   0x7813             LDRB     R3,[R2, #+0]
   \       0x32   0x061B             LSLS     R3,R3,#+24
   \       0x34   0xD5FC             BPL.N    ??LPLD_Flash_SectorErase_1
     85            
     86            //检查Flash访问错误
     87            if (FTFL->FSTAT & FTFL_FSTAT_ACCERR_MASK)
   \       0x36   0x7813             LDRB     R3,[R2, #+0]
   \       0x38   0x069B             LSLS     R3,R3,#+26
   \       0x3A   0xD506             BPL.N    ??LPLD_Flash_SectorErase_2
     88            {
     89              FTFL->FSTAT |= FTFL_FSTAT_ACCERR_MASK;       //清除错误标志
   \       0x3C   0x7813             LDRB     R3,[R2, #+0]
   \       0x3E   0xF053 0x0320      ORRS     R3,R3,#0x20
   \       0x42   0x7013             STRB     R3,[R2, #+0]
     90              Return |= FLASH_FACCERR;                    //更新返回值
   \       0x44   0xF050 0x0001      ORRS     R0,R0,#0x1
   \       0x48   0xE018             B.N      ??LPLD_Flash_SectorErase_3
     91            }
     92            //检查Flash保护标志
     93            else if (FTFL->FSTAT & FTFL_FSTAT_FPVIOL_MASK)
   \                     ??LPLD_Flash_SectorErase_2: (+1)
   \       0x4A   0x7813             LDRB     R3,[R2, #+0]
   \       0x4C   0x06DB             LSLS     R3,R3,#+27
   \       0x4E   0xD506             BPL.N    ??LPLD_Flash_SectorErase_4
     94            {
     95              FTFL->FSTAT |= FTFL_FSTAT_FPVIOL_MASK;
   \       0x50   0x7813             LDRB     R3,[R2, #+0]
   \       0x52   0xF053 0x0310      ORRS     R3,R3,#0x10
   \       0x56   0x7013             STRB     R3,[R2, #+0]
     96              Return |= FLASH_FPVIOL;
   \       0x58   0xF050 0x0002      ORRS     R0,R0,#0x2
   \       0x5C   0xE00E             B.N      ??LPLD_Flash_SectorErase_3
     97            }
     98            //检查Flash读冲突错误
     99            else if (FTFL->FSTAT & FTFL_FSTAT_RDCOLERR_MASK)
   \                     ??LPLD_Flash_SectorErase_4: (+1)
   \       0x5E   0x7813             LDRB     R3,[R2, #+0]
   \       0x60   0x065B             LSLS     R3,R3,#+25
   \       0x62   0xD506             BPL.N    ??LPLD_Flash_SectorErase_5
    100            {
    101              FTFL->FSTAT |= FTFL_FSTAT_RDCOLERR_MASK;
   \       0x64   0x7813             LDRB     R3,[R2, #+0]
   \       0x66   0xF053 0x0340      ORRS     R3,R3,#0x40
   \       0x6A   0x7013             STRB     R3,[R2, #+0]
    102              Return |= FLASH_RDCOLERR;
   \       0x6C   0xF050 0x0008      ORRS     R0,R0,#0x8
   \       0x70   0xE004             B.N      ??LPLD_Flash_SectorErase_3
    103            }
    104            //检查MGSTAT0非可纠正错误
    105            else if (FTFL->FSTAT & FTFL_FSTAT_MGSTAT0_MASK)
   \                     ??LPLD_Flash_SectorErase_5: (+1)
   \       0x72   0x7812             LDRB     R2,[R2, #+0]
   \       0x74   0x07D2             LSLS     R2,R2,#+31
   \       0x76   0xD501             BPL.N    ??LPLD_Flash_SectorErase_3
    106            {
    107              Return |= FLASH_MGSTAT0;
   \       0x78   0xF050 0x0004      ORRS     R0,R0,#0x4
    108            } 
    109            
    110            return  Return;
   \                     ??LPLD_Flash_SectorErase_3: (+1)
   \       0x7C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x7E   0xBC10             POP      {R4}
   \       0x80   0x4770             BX       LR               ;; return
    111          }
    112          
    113          /*
    114           * LPLD_Flash_ByteProgram
    115           * 编程Flash
    116           * 
    117           * 参数:
    118           *    FlashStartAdd--Flash编程起始地址
    119           *    *DataSrcPtr--数据源指针
    120           *    NumberOfBytes--数据字节长度
    121           *
    122           * 输出:
    123           *    错误代码
    124           */

   \                                 In section .text, align 2, keep-with-next
    125          uint8 LPLD_Flash_ByteProgram(uint32 FlashStartAdd, uint32 *DataSrcPtr, uint32 NumberOfBytes)
    126          {
   \                     LPLD_Flash_ByteProgram: (+1)
   \        0x0   0xB4F0             PUSH     {R4-R7}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000B             MOVS     R3,R1
    127            uint8 Return = FLASH_OK;
   \        0x6   0x2500             MOVS     R5,#+0
    128            
    129            uint32 size_buffer;
    130            
    131            if (NumberOfBytes == 0)
   \        0x8   0x2A00             CMP      R2,#+0
   \        0xA   0xD101             BNE.N    ??LPLD_Flash_ByteProgram_0
    132            {
    133              return FLASH_CONTENTERR;
   \        0xC   0x2011             MOVS     R0,#+17
   \        0xE   0xE055             B.N      ??LPLD_Flash_ByteProgram_1
    134            }
    135            else
    136            {
    137              size_buffer = (NumberOfBytes - 1)/4 + 1;
   \                     ??LPLD_Flash_ByteProgram_0: (+1)
   \       0x10   0x1E51             SUBS     R1,R2,#+1
   \       0x12   0x0889             LSRS     R1,R1,#+2
   \       0x14   0x1C49             ADDS     R1,R1,#+1
    138            }
    139            //等待直到CCIF设置
    140            while (!(FTFL->FSTAT & FTFL_FSTAT_CCIF_MASK)){};
   \                     ??LPLD_Flash_ByteProgram_2: (+1)
   \       0x16   0x....             LDR.N    R0,??DataTable2  ;; 0x40020000
   \       0x18   0x7806             LDRB     R6,[R0, #+0]
   \       0x1A   0x0636             LSLS     R6,R6,#+24
   \       0x1C   0xD5FB             BPL.N    ??LPLD_Flash_ByteProgram_2
    141          
    142            while ((size_buffer) && (Return == FLASH_OK))
   \                     ??LPLD_Flash_ByteProgram_3: (+1)
   \       0x1E   0x2900             CMP      R1,#+0
   \       0x20   0xD04A             BEQ.N    ??LPLD_Flash_ByteProgram_4
   \       0x22   0x002E             MOVS     R6,R5
   \       0x24   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \       0x26   0x2E00             CMP      R6,#+0
   \       0x28   0xD146             BNE.N    ??LPLD_Flash_ByteProgram_4
    143            {
    144              //写FLASH命令到FCCOB
    145              FTFL->FCCOB0 = FLASH_CMD_PGM4;
   \       0x2A   0x2606             MOVS     R6,#+6
   \       0x2C   0x....             LDR.N    R7,??DataTable2_3  ;; 0x40020007
   \       0x2E   0x703E             STRB     R6,[R7, #+0]
    146              FTFL->FCCOB1 = (uint8)(FlashStartAdd >> 16);
   \       0x30   0x0026             MOVS     R6,R4
   \       0x32   0x0C36             LSRS     R6,R6,#+16
   \       0x34   0x....             LDR.N    R7,??DataTable2_4  ;; 0x40020006
   \       0x36   0x703E             STRB     R6,[R7, #+0]
    147              FTFL->FCCOB2 = (uint8)((FlashStartAdd >> 8) & 0xFF);
   \       0x38   0x0026             MOVS     R6,R4
   \       0x3A   0x0A36             LSRS     R6,R6,#+8
   \       0x3C   0x....             LDR.N    R7,??DataTable2_5  ;; 0x40020005
   \       0x3E   0x703E             STRB     R6,[R7, #+0]
    148              FTFL->FCCOB3 = (uint8)(FlashStartAdd & 0xFF);
   \       0x40   0x....             LDR.N    R6,??DataTable2_6  ;; 0x40020004
   \       0x42   0x7034             STRB     R4,[R6, #+0]
    149              //如果K60设置成为小端格式，进行如下操作
    150              FTFL->FCCOB4 = (uint8)(*((uint8*)DataSrcPtr+3));
   \       0x44   0x78DE             LDRB     R6,[R3, #+3]
   \       0x46   0x....             LDR.N    R7,??DataTable2_7  ;; 0x4002000b
   \       0x48   0x703E             STRB     R6,[R7, #+0]
    151              FTFL->FCCOB5 = (uint8)(*((uint8*)DataSrcPtr+2));
   \       0x4A   0x789E             LDRB     R6,[R3, #+2]
   \       0x4C   0x....             LDR.N    R7,??DataTable2_8  ;; 0x4002000a
   \       0x4E   0x703E             STRB     R6,[R7, #+0]
    152              FTFL->FCCOB6 = (uint8)(*((uint8*)DataSrcPtr+1));
   \       0x50   0x785E             LDRB     R6,[R3, #+1]
   \       0x52   0x....             LDR.N    R7,??DataTable2_9  ;; 0x40020009
   \       0x54   0x703E             STRB     R6,[R7, #+0]
    153              FTFL->FCCOB7 = (uint8)(*((uint8*)DataSrcPtr+0));
   \       0x56   0x781E             LDRB     R6,[R3, #+0]
   \       0x58   0x....             LDR.N    R7,??DataTable2_10  ;; 0x40020008
   \       0x5A   0x703E             STRB     R6,[R7, #+0]
    154              //如果K60设置成为大端格式，进行如下操作
    155              //FTFL_FCCOB4 = (uint8)(*((uint_8*)DataSrcPtr+0));
    156              //FTFL_FCCOB5 = (uint8)(*((uint_8*)DataSrcPtr+1));
    157              //FTFL_FCCOB6 = (uint8)(*((uint_8*)DataSrcPtr+2));
    158              //FTFL_FCCOB7 = (uint8)(*((uint_8*)DataSrcPtr+3));
    159              //设置FLASH加载命令
    160              FTFL->FSTAT |= FTFL_FSTAT_CCIF_MASK;    
   \       0x5C   0x7806             LDRB     R6,[R0, #+0]
   \       0x5E   0xF056 0x0680      ORRS     R6,R6,#0x80
   \       0x62   0x7006             STRB     R6,[R0, #+0]
    161              //等待命令完成
    162              while (!(FTFL->FSTAT & FTFL_FSTAT_CCIF_MASK)) {};
   \                     ??LPLD_Flash_ByteProgram_5: (+1)
   \       0x64   0x7806             LDRB     R6,[R0, #+0]
   \       0x66   0x0636             LSLS     R6,R6,#+24
   \       0x68   0xD5FC             BPL.N    ??LPLD_Flash_ByteProgram_5
    163              
    164              //检测FLASH访问错误
    165              if (FTFL->FSTAT & FTFL_FSTAT_ACCERR_MASK)
   \       0x6A   0x7806             LDRB     R6,[R0, #+0]
   \       0x6C   0x06B6             LSLS     R6,R6,#+26
   \       0x6E   0xD506             BPL.N    ??LPLD_Flash_ByteProgram_6
    166              {
    167                  
    168                  FTFL->FSTAT |= FTFL_FSTAT_ACCERR_MASK;
   \       0x70   0x7806             LDRB     R6,[R0, #+0]
   \       0x72   0xF056 0x0620      ORRS     R6,R6,#0x20
   \       0x76   0x7006             STRB     R6,[R0, #+0]
    169              
    170                  Return |= FLASH_FACCERR;
   \       0x78   0xF055 0x0501      ORRS     R5,R5,#0x1
   \       0x7C   0xE018             B.N      ??LPLD_Flash_ByteProgram_7
    171              }
    172              //检测FLASH保护错误
    173              else if (FTFL->FSTAT & FTFL_FSTAT_FPVIOL_MASK)
   \                     ??LPLD_Flash_ByteProgram_6: (+1)
   \       0x7E   0x7806             LDRB     R6,[R0, #+0]
   \       0x80   0x06F6             LSLS     R6,R6,#+27
   \       0x82   0xD506             BPL.N    ??LPLD_Flash_ByteProgram_8
    174              {
    175                  FTFL->FSTAT |= FTFL_FSTAT_FPVIOL_MASK;
   \       0x84   0x7806             LDRB     R6,[R0, #+0]
   \       0x86   0xF056 0x0610      ORRS     R6,R6,#0x10
   \       0x8A   0x7006             STRB     R6,[R0, #+0]
    176              
    177                  Return |= FLASH_FPVIOL;
   \       0x8C   0xF055 0x0502      ORRS     R5,R5,#0x2
   \       0x90   0xE00E             B.N      ??LPLD_Flash_ByteProgram_7
    178              }
    179              
    180              else if (FTFL->FSTAT & FTFL_FSTAT_RDCOLERR_MASK)
   \                     ??LPLD_Flash_ByteProgram_8: (+1)
   \       0x92   0x7806             LDRB     R6,[R0, #+0]
   \       0x94   0x0676             LSLS     R6,R6,#+25
   \       0x96   0xD506             BPL.N    ??LPLD_Flash_ByteProgram_9
    181              {
    182                  FTFL->FSTAT |= FTFL_FSTAT_RDCOLERR_MASK;
   \       0x98   0x7806             LDRB     R6,[R0, #+0]
   \       0x9A   0xF056 0x0640      ORRS     R6,R6,#0x40
   \       0x9E   0x7006             STRB     R6,[R0, #+0]
    183              
    184                  Return |= FLASH_RDCOLERR;
   \       0xA0   0xF055 0x0508      ORRS     R5,R5,#0x8
   \       0xA4   0xE004             B.N      ??LPLD_Flash_ByteProgram_7
    185              }
    186              else if (FTFL->FSTAT & FTFL_FSTAT_MGSTAT0_MASK)
   \                     ??LPLD_Flash_ByteProgram_9: (+1)
   \       0xA6   0x7806             LDRB     R6,[R0, #+0]
   \       0xA8   0x07F6             LSLS     R6,R6,#+31
   \       0xAA   0xD501             BPL.N    ??LPLD_Flash_ByteProgram_7
    187              {
    188                  Return |= FLASH_MGSTAT0;
   \       0xAC   0xF055 0x0504      ORRS     R5,R5,#0x4
    189              } 
    190              size_buffer --;
   \                     ??LPLD_Flash_ByteProgram_7: (+1)
   \       0xB0   0x1E49             SUBS     R1,R1,#+1
    191              (uint32*)DataSrcPtr++;
   \       0xB2   0x1D1B             ADDS     R3,R3,#+4
    192              FlashStartAdd +=4;
   \       0xB4   0x1D24             ADDS     R4,R4,#+4
   \       0xB6   0xE7B2             B.N      ??LPLD_Flash_ByteProgram_3
    193            } 
    194            return  Return;
   \                     ??LPLD_Flash_ByteProgram_4: (+1)
   \       0xB8   0x0028             MOVS     R0,R5
   \       0xBA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??LPLD_Flash_ByteProgram_1: (+1)
   \       0xBC   0xBCF0             POP      {R4-R7}
   \       0xBE   0x4770             BX       LR               ;; return
    195          } 

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x4002'0000        DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0x4001'F004        DC32     0x4001f004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \        0x0   0x4001'F008        DC32     0x4001f008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \        0x0   0x4002'0007        DC32     0x40020007

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \        0x0   0x4002'0006        DC32     0x40020006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \        0x0   0x4002'0005        DC32     0x40020005

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \        0x0   0x4002'0004        DC32     0x40020004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \        0x0   0x4002'000B        DC32     0x4002000b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \        0x0   0x4002'000A        DC32     0x4002000a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \        0x0   0x4002'0009        DC32     0x40020009

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \        0x0   0x4002'0008        DC32     0x40020008

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   LPLD_Flash_ByteProgram
       0   LPLD_Flash_Init
       4   LPLD_Flash_SectorErase


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
     192  LPLD_Flash_ByteProgram
      70  LPLD_Flash_Init
     130  LPLD_Flash_SectorErase

 
 436 bytes in section .text
 
 436 bytes of CODE memory

Errors: none
Warnings: 1
