###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.1.169/W32 for ARM         02/Jul/2019  17:59:23
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  G:\AIcar\@@\xiugai\lib\common\uif.c
#    Command line =  
#        -f C:\Users\admin\AppData\Local\Temp\EW6EC7.tmp
#        (G:\AIcar\@@\xiugai\lib\common\uif.c -D LPLD_K60 -lCN
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\List"
#        -lB
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\List"
#        -o "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        G:\AIcar\arm\inc\c\DLib_Config_Normal.h -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\app\" -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\CPU\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\common\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\HW\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\DEV\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Ports\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Source\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\option\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\common\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\driver\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\descriptor\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\class\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\Jay\"
#        -On -I G:\AIcar\arm\CMSIS\Core\Include\ -I
#        G:\AIcar\arm\CMSIS\DSP\Include\ -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\List\uif.lst
#    Object file  =  
#        G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\Obj\uif.o
#
###############################################################################

G:\AIcar\@@\xiugai\lib\common\uif.c
      1          /**
      2           * @file uif.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief 提供简单的交互接口
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * The commands, set/show parameters, and prompt are configured 
     10           * at the project level
     11           *
     12           * 版权所有:北京拉普兰德电子技术有限公司
     13           * http://www.lpld.cn
     14           * mail:support@lpld.cn
     15           *
     16           * @par
     17           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     18           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     19           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     20           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     21           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     22           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     23           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     24           */
     25          
     26          #include "common.h"
     27          #include "uif.h"
     28          
     29          /********************************************************************/
     30          /*
     31           * Global messages -- constant strings
     32           */

   \                                 In section .rodata, align 4
     33          const int8 HELPMSG[] =
   \                     HELPMSG:
   \        0x0   0x45 0x6E          DC8 "Enter 'help' for help.\012"
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x27 0x68    
   \              0x65 0x6C    
   \              0x70 0x27    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x20 0x68    
   \              0x65 0x6C    
   \              0x70 0x2E    
   \              0x0A 0x00    
     34              "Enter 'help' for help.\n";
     35          

   \                                 In section .rodata, align 4
     36          const int8 INVARG[] =
   \                     INVARG:
   \        0x0   0x45 0x72          DC8 "Error: Invalid argument: %s\012"
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x49    
   \              0x6E 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x20 0x61    
   \              0x72 0x67    
   \              0x75 0x6D    
   \              0x65 0x6E    
   \              0x74 0x3A    
   \              0x20 0x25    
   \              0x73 0x0A    
   \              0x00         
   \       0x1D   0x00 0x00          DC8 0, 0, 0
   \              0x00         
     37              "Error: Invalid argument: %s\n";
     38          

   \                                 In section .rodata, align 4
     39          const int8 INVALUE[] = 
   \                     INVALUE:
   \        0x0   0x45 0x72          DC8 "Error: Invalid value: %s\012"
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x49    
   \              0x6E 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x20 0x76    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0A 0x00    
   \       0x1A   0x00 0x00          DC8 0, 0
     40              "Error: Invalid value: %s\n";
     41          
     42          /*
     43           * Strings used by this file only
     44           */

   \                                 In section .rodata, align 4
     45          static const int8 INVCMD[] =
   \                     INVCMD:
   \        0x0   0x45 0x72          DC8 "Error: No such command: %s\012"
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x4E    
   \              0x6F 0x20    
   \              0x73 0x75    
   \              0x63 0x68    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0A 0x00    
     46              "Error: No such command: %s\n";
     47          

   \                                 In section .rodata, align 4
     48          static const int8 HELPFORMAT[] = 
   \                     HELPFORMAT:
   \        0x0   0x25 0x38          DC8 "%8s  %-25s %s %s\012"
   \              0x73 0x20    
   \              0x20 0x25    
   \              0x2D 0x32    
   \              0x35 0x73    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x25 0x73    
   \              0x0A 0x00    
   \       0x12   0x00 0x00          DC8 0, 0
     49              "%8s  %-25s %s %s\n";
     50          

   \                                 In section .rodata, align 4
     51          static const int8 SYNTAX[] = 
   \                     SYNTAX:
   \        0x0   0x45 0x72          DC8 "Error: Invalid syntax for: %s\012"
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x49    
   \              0x6E 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x20 0x73    
   \              0x79 0x6E    
   \              0x74 0x61    
   \              0x78 0x20    
   \              0x66 0x6F    
   \              0x72 0x3A    
   \              0x20 0x25    
   \              0x73 0x0A    
   \              0x00         
   \       0x1F   0x00               DC8 0
     52              "Error: Invalid syntax for: %s\n";
     53          

   \                                 In section .rodata, align 4
     54          static const int8 INVOPT[] = 
   \                     INVOPT:
   \        0x0   0x45 0x72          DC8 "Error:  Invalid set/show option: %s\012"
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x20    
   \              0x49 0x6E    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x73 0x65    
   \              0x74 0x2F    
   \              0x73 0x68    
   \              0x6F 0x77    
   \              0x20 0x6F    
   \              0x70 0x74    
   \              0x69 0x6F    
   \              0x6E 0x3A    
   \              0x20 0x25    
   \              0x73 0x0A    
   \              0x00         
   \       0x25   0x00 0x00          DC8 0, 0, 0
   \              0x00         
     55              "Error:  Invalid set/show option: %s\n";
     56          

   \                                 In section .rodata, align 4
     57          static const int8 OPTFMT[] = 
   \                     OPTFMT:
   \        0x0   0x25 0x31          DC8 "%12s: "
   \              0x32 0x73    
   \              0x3A 0x20    
   \              0x00         
   \        0x7   0x00               DC8 0
     58              "%12s: ";
     59          

   \                                 In section .bss, align 4
     60          static int8 cmdline1 [UIF_MAX_LINE];
   \                     cmdline1:
   \        0x0                      DS8 80

   \                                 In section .bss, align 4
     61          static int8 cmdline2 [UIF_MAX_LINE];
   \                     cmdline2:
   \        0x0                      DS8 80
     62          
     63          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     64          int8 *get_line (int8 *line)
     65          {
   \                     get_line: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
     66              int32 pos;
     67              int32 ch;
     68          
     69              pos = 0;
   \        0x4   0x2500             MOVS     R5,#+0
     70              ch = (int32)in_char();
   \        0x6   0x....'....        BL       in_char
   \        0xA   0x0006             MOVS     R6,R0
     71              while ( (ch != 0x0D /* CR */) &&
     72                      (ch != 0x0A /* LF/NL */) &&
     73                      (pos < UIF_MAX_LINE))
   \                     ??get_line_0: (+1)
   \        0xC   0x2E0D             CMP      R6,#+13
   \        0xE   0xD026             BEQ.N    ??get_line_1
   \       0x10   0x2E0A             CMP      R6,#+10
   \       0x12   0xD024             BEQ.N    ??get_line_1
   \       0x14   0x2D50             CMP      R5,#+80
   \       0x16   0xDA22             BGE.N    ??get_line_1
     74              {
     75                  switch (ch)
   \       0x18   0x0030             MOVS     R0,R6
   \       0x1A   0x2808             CMP      R0,#+8
   \       0x1C   0xD001             BEQ.N    ??get_line_2
   \       0x1E   0x287F             CMP      R0,#+127
   \       0x20   0xD10C             BNE.N    ??get_line_3
     76                  {
     77                      case 0x08:      /* Backspace */
     78                      case 0x7F:      /* Delete */
     79                          if (pos > 0)
   \                     ??get_line_2: (+1)
   \       0x22   0x2D01             CMP      R5,#+1
   \       0x24   0xDB09             BLT.N    ??get_line_4
     80                          {
     81                              pos -= 1;
   \       0x26   0x1E6D             SUBS     R5,R5,#+1
     82                              out_char(0x08);    /* backspace */
   \       0x28   0x2008             MOVS     R0,#+8
   \       0x2A   0x....'....        BL       out_char
     83                              out_char(' ');
   \       0x2E   0x2020             MOVS     R0,#+32
   \       0x30   0x....'....        BL       out_char
     84                              out_char(0x08);    /* backspace */
   \       0x34   0x2008             MOVS     R0,#+8
   \       0x36   0x....'....        BL       out_char
     85                          }
     86                          break;
   \                     ??get_line_4: (+1)
   \       0x3A   0xE00C             B.N      ??get_line_5
     87                      default:
     88                          if ((pos+1) < UIF_MAX_LINE)
   \                     ??get_line_3: (+1)
   \       0x3C   0x1C68             ADDS     R0,R5,#+1
   \       0x3E   0x2850             CMP      R0,#+80
   \       0x40   0xDA09             BGE.N    ??get_line_6
     89                          {
     90                              if ((ch > 0x1f) && (ch < 0x80))
   \       0x42   0x2E20             CMP      R6,#+32
   \       0x44   0xDB07             BLT.N    ??get_line_6
   \       0x46   0x2E80             CMP      R6,#+128
   \       0x48   0xDA05             BGE.N    ??get_line_6
     91                              {
     92                                  line[pos++] = (int8)ch;
   \       0x4A   0x5566             STRB     R6,[R4, R5]
   \       0x4C   0x1C6D             ADDS     R5,R5,#+1
     93                                  out_char((int8)ch);
   \       0x4E   0x0030             MOVS     R0,R6
   \       0x50   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \       0x52   0x....'....        BL       out_char
     94                              }
     95                          }
     96                          break;
     97                  }
     98                  ch = (int32)in_char();
   \                     ??get_line_6: (+1)
   \                     ??get_line_5: (+1)
   \       0x56   0x....'....        BL       in_char
   \       0x5A   0x0006             MOVS     R6,R0
   \       0x5C   0xE7D6             B.N      ??get_line_0
     99              }
    100              line[pos] = '\0';
   \                     ??get_line_1: (+1)
   \       0x5E   0x2000             MOVS     R0,#+0
   \       0x60   0x5560             STRB     R0,[R4, R5]
    101              out_char(0x0D);    /* CR */
   \       0x62   0x200D             MOVS     R0,#+13
   \       0x64   0x....'....        BL       out_char
    102              out_char(0x0A);    /* LF */
   \       0x68   0x200A             MOVS     R0,#+10
   \       0x6A   0x....'....        BL       out_char
    103          
    104              return line;
   \       0x6E   0x0020             MOVS     R0,R4
   \       0x70   0xBD70             POP      {R4-R6,PC}       ;; return
    105          }
    106          
    107          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    108          int32 make_argv (int8 *cmdline, int8 *argv[])
    109          {
   \                     make_argv: (+1)
   \        0x0   0xB430             PUSH     {R4,R5}
   \        0x2   0x0004             MOVS     R4,R0
    110              int32 argc, i, in_text;
    111          
    112              /* 
    113               * Break cmdline into strings and argv
    114               * It is permissible for argv to be NULL, in which case
    115               * the purpose of this routine becomes to count args
    116               */
    117              argc = 0;
   \        0x4   0x2300             MOVS     R3,#+0
    118              i = 0;
   \        0x6   0x2500             MOVS     R5,#+0
    119              in_text = FALSE;
   \        0x8   0x2200             MOVS     R2,#+0
    120              while (cmdline[i] != '\0')  /* getline() must place 0x00 on end */
   \                     ??make_argv_0: (+1)
   \        0xA   0x5760             LDRSB    R0,[R4, R5]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD01D             BEQ.N    ??make_argv_1
    121              {
    122                  if (((cmdline[i] == ' ')   ||
    123                       (cmdline[i] == '\t')) )
   \       0x10   0x5760             LDRSB    R0,[R4, R5]
   \       0x12   0x2820             CMP      R0,#+32
   \       0x14   0xD002             BEQ.N    ??make_argv_2
   \       0x16   0x5760             LDRSB    R0,[R4, R5]
   \       0x18   0x2809             CMP      R0,#+9
   \       0x1A   0xD106             BNE.N    ??make_argv_3
    124                  {
    125                      if (in_text)
   \                     ??make_argv_2: (+1)
   \       0x1C   0x2A00             CMP      R2,#+0
   \       0x1E   0xD013             BEQ.N    ??make_argv_4
    126                      {
    127                          /* end of command line argument */
    128                          cmdline[i] = '\0';
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0x5560             STRB     R0,[R4, R5]
    129                          in_text = FALSE;
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0x0002             MOVS     R2,R0
   \       0x28   0xE00E             B.N      ??make_argv_4
    130                      }
    131                      else
    132                      {
    133                          /* still looking for next argument */
    134                          
    135                      }
    136                  }
    137                  else
    138                  {
    139                      /* got non-whitespace character */
    140                      if (in_text)
   \                     ??make_argv_3: (+1)
   \       0x2A   0x2A00             CMP      R2,#+0
   \       0x2C   0xD10C             BNE.N    ??make_argv_4
    141                      {
    142                      }
    143                      else
    144                      {
    145                          /* start of an argument */
    146                          in_text = TRUE;
   \       0x2E   0x2001             MOVS     R0,#+1
   \       0x30   0x0002             MOVS     R2,R0
    147                          if (argc < UIF_MAX_ARGS)
   \       0x32   0x2B0A             CMP      R3,#+10
   \       0x34   0xDA07             BGE.N    ??make_argv_5
    148                          {
    149                              if (argv != NULL)
   \       0x36   0x2900             CMP      R1,#+0
   \       0x38   0xD003             BEQ.N    ??make_argv_6
    150                                  argv[argc] = &cmdline[i];
   \       0x3A   0xEB04 0x0005      ADD      R0,R4,R5
   \       0x3E   0xF841 0x0023      STR      R0,[R1, R3, LSL #+2]
    151                              argc++;
   \                     ??make_argv_6: (+1)
   \       0x42   0x1C5B             ADDS     R3,R3,#+1
   \       0x44   0xE000             B.N      ??make_argv_4
    152                          }
    153                          else
    154                              /*return argc;*/
    155                              break;
   \                     ??make_argv_5: (+1)
   \       0x46   0xE001             B.N      ??make_argv_1
    156                      }
    157          
    158                  }
    159                  i++;    /* proceed to next character */
   \                     ??make_argv_4: (+1)
   \       0x48   0x1C6D             ADDS     R5,R5,#+1
   \       0x4A   0xE7DE             B.N      ??make_argv_0
    160              }
    161              if (argv != NULL)
   \                     ??make_argv_1: (+1)
   \       0x4C   0x2900             CMP      R1,#+0
   \       0x4E   0xD002             BEQ.N    ??make_argv_7
    162                  argv[argc] = NULL;
   \       0x50   0x2000             MOVS     R0,#+0
   \       0x52   0xF841 0x0023      STR      R0,[R1, R3, LSL #+2]
    163              return argc;
   \                     ??make_argv_7: (+1)
   \       0x56   0x0018             MOVS     R0,R3
   \       0x58   0xBC30             POP      {R4,R5}
   \       0x5A   0x4770             BX       LR               ;; return
    164          }
    165          
    166          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    167          void run_cmd (void)
    168          {
   \                     run_cmd: (+1)
   \        0x0   0xE92D 0x41F8      PUSH     {R3-R8,LR}
   \        0x4   0xB08B             SUB      SP,SP,#+44
    169              /*
    170               * Global array of pointers to emulate C argc,argv interface
    171               */
    172              int32 argc;
    173              int8 *argv[UIF_MAX_ARGS + 1];   /* one extra for null terminator */
    174          
    175              get_line(cmdline1);
   \        0x6   0x....             LDR.N    R5,??DataTable4_3
   \        0x8   0x0028             MOVS     R0,R5
   \        0xA   0x....'....        BL       get_line
    176          
    177              if (!(argc = make_argv(cmdline1,argv)))
   \        0xE   0x4669             MOV      R1,SP
   \       0x10   0x0028             MOVS     R0,R5
   \       0x12   0x....'....        BL       make_argv
   \       0x16   0x0004             MOVS     R4,R0
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD108             BNE.N    ??run_cmd_0
    178              {
    179                  /* no command entered, just a blank line */
    180                  strcpy(cmdline1,cmdline2);
   \       0x1C   0x....             LDR.N    R1,??DataTable4_4
   \       0x1E   0x0028             MOVS     R0,R5
   \       0x20   0x....'....        BL       strcpy
    181                  argc = make_argv(cmdline1,argv);
   \       0x24   0x4669             MOV      R1,SP
   \       0x26   0x0028             MOVS     R0,R5
   \       0x28   0x....'....        BL       make_argv
   \       0x2C   0x0004             MOVS     R4,R0
    182              }
    183              cmdline2[0] = '\0';
   \                     ??run_cmd_0: (+1)
   \       0x2E   0x....             LDR.N    R5,??DataTable4_4
   \       0x30   0x2000             MOVS     R0,#+0
   \       0x32   0x7028             STRB     R0,[R5, #+0]
    184          
    185              if (argc)
   \       0x34   0x2C00             CMP      R4,#+0
   \       0x36   0xD03F             BEQ.N    ??run_cmd_1
    186              {
    187                  int32 i;
    188                  for (i = 0; i < UIF_NUM_CMD; i++)
   \       0x38   0x2600             MOVS     R6,#+0
   \                     ??run_cmd_2: (+1)
   \       0x3A   0x....             LDR.N    R0,??DataTable4_5
   \       0x3C   0x6800             LDR      R0,[R0, #+0]
   \       0x3E   0x4286             CMP      R6,R0
   \       0x40   0xDA33             BGE.N    ??run_cmd_3
    189                  {
    190                      if (strcasecmp(UIF_CMDTAB[i].cmd,argv[0]) == 0)
   \       0x42   0x271C             MOVS     R7,#+28
   \       0x44   0x....'....        LDR.W    R8,??DataTable4_6
   \       0x48   0x9900             LDR      R1,[SP, #+0]
   \       0x4A   0xFB07 0xF006      MUL      R0,R7,R6
   \       0x4E   0xF858 0x0000      LDR      R0,[R8, R0]
   \       0x52   0x....'....        BL       strcasecmp
   \       0x56   0x2800             CMP      R0,#+0
   \       0x58   0xD125             BNE.N    ??run_cmd_4
    191                      {
    192                          if (((argc-1) >= UIF_CMDTAB[i].min_args) &&
    193                              ((argc-1) <= UIF_CMDTAB[i].max_args))
   \       0x5A   0x1E60             SUBS     R0,R4,#+1
   \       0x5C   0xFB07 0xF106      MUL      R1,R7,R6
   \       0x60   0x4441             ADD      R1,R8,R1
   \       0x62   0x6849             LDR      R1,[R1, #+4]
   \       0x64   0x4288             CMP      R0,R1
   \       0x66   0xDB19             BLT.N    ??run_cmd_5
   \       0x68   0xFB07 0xF006      MUL      R0,R7,R6
   \       0x6C   0x4440             ADD      R0,R8,R0
   \       0x6E   0x6880             LDR      R0,[R0, #+8]
   \       0x70   0x1E61             SUBS     R1,R4,#+1
   \       0x72   0x4288             CMP      R0,R1
   \       0x74   0xDB12             BLT.N    ??run_cmd_5
    194                          {
    195                              if (UIF_CMDTAB[i].flags & UIF_CMD_FLAG_REPEAT)
   \       0x76   0xFB07 0xF006      MUL      R0,R7,R6
   \       0x7A   0x4440             ADD      R0,R8,R0
   \       0x7C   0x7B00             LDRB     R0,[R0, #+12]
   \       0x7E   0x07C0             LSLS     R0,R0,#+31
   \       0x80   0xD503             BPL.N    ??run_cmd_6
    196                              {
    197                                  strcpy(cmdline2,argv[0]);
   \       0x82   0x9900             LDR      R1,[SP, #+0]
   \       0x84   0x0028             MOVS     R0,R5
   \       0x86   0x....'....        BL       strcpy
    198                              }
    199                              UIF_CMDTAB[i].func(argc,argv);
   \                     ??run_cmd_6: (+1)
   \       0x8A   0x4669             MOV      R1,SP
   \       0x8C   0x0020             MOVS     R0,R4
   \       0x8E   0xFB07 0xF706      MUL      R7,R7,R6
   \       0x92   0xEB08 0x0207      ADD      R2,R8,R7
   \       0x96   0x6912             LDR      R2,[R2, #+16]
   \       0x98   0x4790             BLX      R2
    200                              return;
   \       0x9A   0xE00D             B.N      ??run_cmd_7
    201                          }
    202                          else
    203                          {
    204                              printf(SYNTAX,argv[0]);
   \                     ??run_cmd_5: (+1)
   \       0x9C   0x9900             LDR      R1,[SP, #+0]
   \       0x9E   0x....             LDR.N    R0,??DataTable4_7
   \       0xA0   0x....'....        BL       printf
    205                              return;
   \       0xA4   0xE008             B.N      ??run_cmd_7
    206                          }
    207                      }
    208                  }
   \                     ??run_cmd_4: (+1)
   \       0xA6   0x1C76             ADDS     R6,R6,#+1
   \       0xA8   0xE7C7             B.N      ??run_cmd_2
    209                  printf(INVCMD,argv[0]);
   \                     ??run_cmd_3: (+1)
   \       0xAA   0x9900             LDR      R1,[SP, #+0]
   \       0xAC   0x....             LDR.N    R0,??DataTable4_8
   \       0xAE   0x....'....        BL       printf
    210                  printf(HELPMSG);
   \       0xB2   0x....             LDR.N    R0,??DataTable4_9
   \       0xB4   0x....'....        BL       printf
    211              }
    212          }
   \                     ??run_cmd_1: (+1)
   \                     ??run_cmd_7: (+1)
   \       0xB8   0xB00C             ADD      SP,SP,#+48
   \       0xBA   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    213          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    214          uint32 get_value (int8 *s, int32 *success, int32 base)
    215          {
   \                     get_value: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
    216              uint32 value;
    217              int8 *p;
    218          
    219              value = strtoul(s,&p,base);
   \        0x8   0x0032             MOVS     R2,R6
   \        0xA   0x4669             MOV      R1,SP
   \        0xC   0x0020             MOVS     R0,R4
   \        0xE   0x....'....        BL       strtoul
   \       0x12   0x0001             MOVS     R1,R0
    220              if ((value == 0) && (p == s))
   \       0x14   0x2900             CMP      R1,#+0
   \       0x16   0xD106             BNE.N    ??get_value_0
   \       0x18   0x9800             LDR      R0,[SP, #+0]
   \       0x1A   0x42A0             CMP      R0,R4
   \       0x1C   0xD103             BNE.N    ??get_value_0
    221              {
    222                  *success = FALSE;
   \       0x1E   0x2000             MOVS     R0,#+0
   \       0x20   0x6028             STR      R0,[R5, #+0]
    223                  return 0;
   \       0x22   0x2000             MOVS     R0,#+0
   \       0x24   0xE002             B.N      ??get_value_1
    224              }
    225              else
    226              {
    227                  *success = TRUE;
   \                     ??get_value_0: (+1)
   \       0x26   0x2001             MOVS     R0,#+1
   \       0x28   0x6028             STR      R0,[R5, #+0]
    228                  return value;
   \       0x2A   0x0008             MOVS     R0,R1
   \                     ??get_value_1: (+1)
   \       0x2C   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    229              }
    230          }
    231          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    232          void uif_cmd_help (int32 argc, int8 **argv)
    233          {
   \                     uif_cmd_help: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    234              int32 index;
    235              
    236              (void)argc;
    237              (void)argv;
    238              
    239              printf("\n");
   \        0x6   0x....             ADR.N    R6,??DataTable4  ;; "\n"
   \        0x8   0x0030             MOVS     R0,R6
   \        0xA   0x....'....        BL       printf
    240              for (index = 0; index < UIF_NUM_CMD; index++)
   \        0xE   0x2700             MOVS     R7,#+0
   \                     ??uif_cmd_help_0: (+1)
   \       0x10   0x....             LDR.N    R0,??DataTable4_5
   \       0x12   0x6800             LDR      R0,[R0, #+0]
   \       0x14   0x4287             CMP      R7,R0
   \       0x16   0xDA15             BGE.N    ??uif_cmd_help_1
    241              {
    242                  printf(HELPFORMAT,
    243                      UIF_CMDTAB[index].cmd,
    244                      UIF_CMDTAB[index].description,
    245                      UIF_CMDTAB[index].cmd,
    246                      UIF_CMDTAB[index].syntax);
   \       0x18   0x201C             MOVS     R0,#+28
   \       0x1A   0x....             LDR.N    R1,??DataTable4_6
   \       0x1C   0xFB00 0xF207      MUL      R2,R0,R7
   \       0x20   0x440A             ADD      R2,R1,R2
   \       0x22   0x6992             LDR      R2,[R2, #+24]
   \       0x24   0x9200             STR      R2,[SP, #+0]
   \       0x26   0xFB00 0xF207      MUL      R2,R0,R7
   \       0x2A   0x588B             LDR      R3,[R1, R2]
   \       0x2C   0xFB00 0xF207      MUL      R2,R0,R7
   \       0x30   0x440A             ADD      R2,R1,R2
   \       0x32   0x6952             LDR      R2,[R2, #+20]
   \       0x34   0xFB00 0xF007      MUL      R0,R0,R7
   \       0x38   0x5809             LDR      R1,[R1, R0]
   \       0x3A   0x....             LDR.N    R0,??DataTable4_10
   \       0x3C   0x....'....        BL       printf
    247              }
   \       0x40   0x1C7F             ADDS     R7,R7,#+1
   \       0x42   0xE7E5             B.N      ??uif_cmd_help_0
    248              printf("\n");
   \                     ??uif_cmd_help_1: (+1)
   \       0x44   0x0030             MOVS     R0,R6
   \       0x46   0x....'....        BL       printf
    249          }
   \       0x4A   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    250          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    251          void uif_cmd_set (int32 argc, int8 **argv)
    252          {
   \                     uif_cmd_set: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
    253              int32 index;
    254          
    255              printf("\n");
   \        0x8   0x....             ADR.N    R6,??DataTable4  ;; "\n"
   \        0xA   0x0030             MOVS     R0,R6
   \        0xC   0x....'....        BL       printf
    256              if (argc == 1)
   \       0x10   0x2C01             CMP      R4,#+1
   \       0x12   0xD120             BNE.N    ??uif_cmd_set_0
    257              {
    258                  printf("Valid 'set' options:\n");
   \       0x14   0x....             LDR.N    R0,??DataTable4_11
   \       0x16   0x....'....        BL       printf
    259                  for (index = 0; index < UIF_NUM_SETCMD; ++index)
   \       0x1A   0x2700             MOVS     R7,#+0
   \                     ??uif_cmd_set_1: (+1)
   \       0x1C   0x....             LDR.N    R0,??DataTable4_12
   \       0x1E   0x6800             LDR      R0,[R0, #+0]
   \       0x20   0x4287             CMP      R7,R0
   \       0x22   0xDA14             BGE.N    ??uif_cmd_set_2
    260                  {
    261                      printf(OPTFMT,UIF_SETCMDTAB[index].option);
   \       0x24   0xF05F 0x0814      MOVS     R8,#+20
   \       0x28   0x....'....        LDR.W    R9,??DataTable4_13
   \       0x2C   0xFB08 0xF007      MUL      R0,R8,R7
   \       0x30   0xF859 0x1000      LDR      R1,[R9, R0]
   \       0x34   0x....             LDR.N    R0,??DataTable4_14
   \       0x36   0x....'....        BL       printf
    262                      printf("%s\n",UIF_SETCMDTAB[index].syntax);
   \       0x3A   0xFB08 0xF807      MUL      R8,R8,R7
   \       0x3E   0xEB09 0x0008      ADD      R0,R9,R8
   \       0x42   0x6901             LDR      R1,[R0, #+16]
   \       0x44   0x....             ADR.N    R0,??DataTable4_1  ;; "%s\n"
   \       0x46   0x....'....        BL       printf
    263                  }
   \       0x4A   0x1C7F             ADDS     R7,R7,#+1
   \       0x4C   0xE7E6             B.N      ??uif_cmd_set_1
    264                  printf("\n");
   \                     ??uif_cmd_set_2: (+1)
   \       0x4E   0x0030             MOVS     R0,R6
   \       0x50   0x....'....        BL       printf
    265                  return;
   \       0x54   0xE038             B.N      ??uif_cmd_set_3
    266              }
    267          
    268              if (argc != 3)
   \                     ??uif_cmd_set_0: (+1)
   \       0x56   0x2C03             CMP      R4,#+3
   \       0x58   0xD003             BEQ.N    ??uif_cmd_set_4
    269              {
    270                  printf("Error: Invalid argument list\n");
   \       0x5A   0x....             LDR.N    R0,??DataTable4_15
   \       0x5C   0x....'....        BL       printf
    271                  return;
   \       0x60   0xE032             B.N      ??uif_cmd_set_3
    272              }
    273          
    274              for (index = 0; index < UIF_NUM_SETCMD; index++)
   \                     ??uif_cmd_set_4: (+1)
   \       0x62   0x2600             MOVS     R6,#+0
   \                     ??uif_cmd_set_5: (+1)
   \       0x64   0x....             LDR.N    R0,??DataTable4_12
   \       0x66   0x6800             LDR      R0,[R0, #+0]
   \       0x68   0x4286             CMP      R6,R0
   \       0x6A   0xDA29             BGE.N    ??uif_cmd_set_6
    275              {
    276                  if (strcasecmp(UIF_SETCMDTAB[index].option,argv[1]) == 0)
   \       0x6C   0x2714             MOVS     R7,#+20
   \       0x6E   0x....'....        LDR.W    R8,??DataTable4_13
   \       0x72   0x6869             LDR      R1,[R5, #+4]
   \       0x74   0xFB07 0xF006      MUL      R0,R7,R6
   \       0x78   0xF858 0x0000      LDR      R0,[R8, R0]
   \       0x7C   0x....'....        BL       strcasecmp
   \       0x80   0x2800             CMP      R0,#+0
   \       0x82   0xD11B             BNE.N    ??uif_cmd_set_7
    277                  {
    278                      if (((argc-1-1) >= UIF_SETCMDTAB[index].min_args) &&
    279                          ((argc-1-1) <= UIF_SETCMDTAB[index].max_args))
   \       0x84   0x1EA0             SUBS     R0,R4,#+2
   \       0x86   0xFB07 0xF106      MUL      R1,R7,R6
   \       0x8A   0x4441             ADD      R1,R8,R1
   \       0x8C   0x6849             LDR      R1,[R1, #+4]
   \       0x8E   0x4288             CMP      R0,R1
   \       0x90   0xDB0F             BLT.N    ??uif_cmd_set_8
   \       0x92   0xFB07 0xF006      MUL      R0,R7,R6
   \       0x96   0x4440             ADD      R0,R8,R0
   \       0x98   0x6880             LDR      R0,[R0, #+8]
   \       0x9A   0x1EA1             SUBS     R1,R4,#+2
   \       0x9C   0x4288             CMP      R0,R1
   \       0x9E   0xDB08             BLT.N    ??uif_cmd_set_8
    280                      {
    281                          UIF_SETCMDTAB[index].func(argc,argv);
   \       0xA0   0x0029             MOVS     R1,R5
   \       0xA2   0x0020             MOVS     R0,R4
   \       0xA4   0xFB07 0xF706      MUL      R7,R7,R6
   \       0xA8   0xEB08 0x0207      ADD      R2,R8,R7
   \       0xAC   0x68D2             LDR      R2,[R2, #+12]
   \       0xAE   0x4790             BLX      R2
    282                          return;
   \       0xB0   0xE00A             B.N      ??uif_cmd_set_3
    283                      }
    284                      else
    285                      {
    286                          printf(INVARG,argv[1]);
   \                     ??uif_cmd_set_8: (+1)
   \       0xB2   0x6869             LDR      R1,[R5, #+4]
   \       0xB4   0x....             LDR.N    R0,??DataTable4_16
   \       0xB6   0x....'....        BL       printf
    287                          return;
   \       0xBA   0xE005             B.N      ??uif_cmd_set_3
    288                      }
    289                  }
    290              }
   \                     ??uif_cmd_set_7: (+1)
   \       0xBC   0x1C76             ADDS     R6,R6,#+1
   \       0xBE   0xE7D1             B.N      ??uif_cmd_set_5
    291              printf(INVOPT,argv[1]);
   \                     ??uif_cmd_set_6: (+1)
   \       0xC0   0x6869             LDR      R1,[R5, #+4]
   \       0xC2   0x....             LDR.N    R0,??DataTable4_17
   \       0xC4   0x....'....        BL       printf
    292          }
   \                     ??uif_cmd_set_3: (+1)
   \       0xC8   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    293          
    294          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    295          void uif_cmd_show (int32 argc, int8 **argv)
    296          {
   \                     uif_cmd_show: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0x0005             MOVS     R5,R0
   \        0x6   0x000C             MOVS     R4,R1
    297              int32 index;
    298          
    299              printf("\n");
   \        0x8   0x....             ADR.N    R6,??DataTable4  ;; "\n"
   \        0xA   0x0030             MOVS     R0,R6
   \        0xC   0x....'....        BL       printf
    300              if (argc == 1)
   \       0x10   0x2D01             CMP      R5,#+1
   \       0x12   0xD124             BNE.N    ??uif_cmd_show_0
    301              {
    302                  /*
    303                   * Show all Option settings
    304                   */
    305                  argc = 2;
   \       0x14   0x2702             MOVS     R7,#+2
    306                  argv[2] = NULL;
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0x60A0             STR      R0,[R4, #+8]
    307                  for (index = 0; index < UIF_NUM_SETCMD; index++)
   \       0x1A   0xF05F 0x0800      MOVS     R8,#+0
   \                     ??uif_cmd_show_1: (+1)
   \       0x1E   0x....             LDR.N    R0,??DataTable4_12
   \       0x20   0x6800             LDR      R0,[R0, #+0]
   \       0x22   0x4580             CMP      R8,R0
   \       0x24   0xDA17             BGE.N    ??uif_cmd_show_2
    308                  {
    309                      printf(OPTFMT,UIF_SETCMDTAB[index].option);
   \       0x26   0x2514             MOVS     R5,#+20
   \       0x28   0x....'....        LDR.W    R9,??DataTable4_13
   \       0x2C   0xFB05 0xF008      MUL      R0,R5,R8
   \       0x30   0xF859 0x1000      LDR      R1,[R9, R0]
   \       0x34   0x....             LDR.N    R0,??DataTable4_14
   \       0x36   0x....'....        BL       printf
    310                      UIF_SETCMDTAB[index].func(argc,argv);
   \       0x3A   0x0021             MOVS     R1,R4
   \       0x3C   0x0038             MOVS     R0,R7
   \       0x3E   0xFB05 0xF508      MUL      R5,R5,R8
   \       0x42   0xEB09 0x0205      ADD      R2,R9,R5
   \       0x46   0x68D2             LDR      R2,[R2, #+12]
   \       0x48   0x4790             BLX      R2
    311                      printf("\n");
   \       0x4A   0x0030             MOVS     R0,R6
   \       0x4C   0x....'....        BL       printf
    312                  }
   \       0x50   0xF118 0x0801      ADDS     R8,R8,#+1
   \       0x54   0xE7E3             B.N      ??uif_cmd_show_1
    313                  printf("\n");
   \                     ??uif_cmd_show_2: (+1)
   \       0x56   0x0030             MOVS     R0,R6
   \       0x58   0x....'....        BL       printf
    314                  return;
   \       0x5C   0xE03C             B.N      ??uif_cmd_show_3
    315              }
    316          
    317              for (index = 0; index < UIF_NUM_SETCMD; index++)
   \                     ??uif_cmd_show_0: (+1)
   \       0x5E   0x2600             MOVS     R6,#+0
   \                     ??uif_cmd_show_4: (+1)
   \       0x60   0x....             LDR.N    R0,??DataTable4_12
   \       0x62   0x6800             LDR      R0,[R0, #+0]
   \       0x64   0x4286             CMP      R6,R0
   \       0x66   0xDA33             BGE.N    ??uif_cmd_show_5
    318              {
    319                  if (strcasecmp(UIF_SETCMDTAB[index].option,argv[1]) == 0)
   \       0x68   0x2714             MOVS     R7,#+20
   \       0x6A   0x....'....        LDR.W    R8,??DataTable4_13
   \       0x6E   0x6861             LDR      R1,[R4, #+4]
   \       0x70   0xFB07 0xF006      MUL      R0,R7,R6
   \       0x74   0xF858 0x0000      LDR      R0,[R8, R0]
   \       0x78   0x....'....        BL       strcasecmp
   \       0x7C   0x2800             CMP      R0,#+0
   \       0x7E   0xD125             BNE.N    ??uif_cmd_show_6
    320                  {
    321                      if (((argc-1-1) >= UIF_SETCMDTAB[index].min_args) &&
    322                          ((argc-1-1) <= UIF_SETCMDTAB[index].max_args))
   \       0x80   0x1EA8             SUBS     R0,R5,#+2
   \       0x82   0xFB07 0xF106      MUL      R1,R7,R6
   \       0x86   0x4441             ADD      R1,R8,R1
   \       0x88   0x6849             LDR      R1,[R1, #+4]
   \       0x8A   0x4288             CMP      R0,R1
   \       0x8C   0xDB19             BLT.N    ??uif_cmd_show_7
   \       0x8E   0xFB07 0xF006      MUL      R0,R7,R6
   \       0x92   0x4440             ADD      R0,R8,R0
   \       0x94   0x6880             LDR      R0,[R0, #+8]
   \       0x96   0x1EA9             SUBS     R1,R5,#+2
   \       0x98   0x4288             CMP      R0,R1
   \       0x9A   0xDB12             BLT.N    ??uif_cmd_show_7
    323                      {
    324                          printf(OPTFMT,UIF_SETCMDTAB[index].option);
   \       0x9C   0xFB07 0xF006      MUL      R0,R7,R6
   \       0xA0   0xF858 0x1000      LDR      R1,[R8, R0]
   \       0xA4   0x....             LDR.N    R0,??DataTable4_14
   \       0xA6   0x....'....        BL       printf
    325                          UIF_SETCMDTAB[index].func(argc,argv);
   \       0xAA   0x0021             MOVS     R1,R4
   \       0xAC   0x0028             MOVS     R0,R5
   \       0xAE   0xFB07 0xF706      MUL      R7,R7,R6
   \       0xB2   0xEB08 0x0207      ADD      R2,R8,R7
   \       0xB6   0x68D2             LDR      R2,[R2, #+12]
   \       0xB8   0x4790             BLX      R2
    326                          printf("\n\n");
   \       0xBA   0x....             ADR.N    R0,??DataTable4_2  ;; 0x0A, 0x0A, 0x00, 0x00
   \       0xBC   0x....'....        BL       printf
    327                          return;
   \       0xC0   0xE00A             B.N      ??uif_cmd_show_3
    328                      }
    329                      else
    330                      {
    331                          printf(INVARG,argv[1]);
   \                     ??uif_cmd_show_7: (+1)
   \       0xC2   0x6861             LDR      R1,[R4, #+4]
   \       0xC4   0x....             LDR.N    R0,??DataTable4_16
   \       0xC6   0x....'....        BL       printf
    332                          return;
   \       0xCA   0xE005             B.N      ??uif_cmd_show_3
    333                      }
    334                  }
    335              }
   \                     ??uif_cmd_show_6: (+1)
   \       0xCC   0x1C76             ADDS     R6,R6,#+1
   \       0xCE   0xE7C7             B.N      ??uif_cmd_show_4
    336              printf(INVOPT,argv[1]);
   \                     ??uif_cmd_show_5: (+1)
   \       0xD0   0x6861             LDR      R1,[R4, #+4]
   \       0xD2   0x....             LDR.N    R0,??DataTable4_17
   \       0xD4   0x....'....        BL       printf
    337          }
   \                     ??uif_cmd_show_3: (+1)
   \       0xD8   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \        0x0   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \        0x0   0x25 0x73          DC8      "%s\n"
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \        0x0   0x0A 0x0A          DC8      0x0A, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \        0x0   0x....'....        DC32     cmdline1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \        0x0   0x....'....        DC32     cmdline2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \        0x0   0x....'....        DC32     UIF_NUM_CMD

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \        0x0   0x....'....        DC32     UIF_CMDTAB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \        0x0   0x....'....        DC32     SYNTAX

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \        0x0   0x....'....        DC32     INVCMD

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \        0x0   0x....'....        DC32     HELPMSG

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \        0x0   0x....'....        DC32     HELPFORMAT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \        0x0   0x....'....        DC32     UIF_NUM_SETCMD

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \        0x0   0x....'....        DC32     UIF_SETCMDTAB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \        0x0   0x....'....        DC32     OPTFMT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \        0x0   0x....'....        DC32     INVARG

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \        0x0   0x....'....        DC32     INVOPT

   \                                 In section .rodata, align 2
   \        0x0   0x0A 0x00          DC8 "\012"

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x56 0x61          DC8 "Valid 'set' options:\012"
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x27 0x73    
   \              0x65 0x74    
   \              0x27 0x20    
   \              0x6F 0x70    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x73 0x3A    
   \              0x0A 0x00    
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \        0x0   0x25 0x73          DC8 "%s\012"
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x45 0x72          DC8 "Error: Invalid argument list\012"
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x49    
   \              0x6E 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x20 0x61    
   \              0x72 0x67    
   \              0x75 0x6D    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x6C 0x69    
   \              0x73 0x74    
   \              0x0A 0x00    
   \       0x1E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \        0x0   0x0A 0x0A          DC8 "\012\012"
   \              0x00         
   \        0x3   0x00               DC8 0
    338          
    339          /********************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   get_line
        16   -> in_char
        16   -> out_char
      24   get_value
        24   -> strtoul
       8   make_argv
      72   run_cmd
        72   -- Indirect call
        72   -> get_line
        72   -> make_argv
        72   -> printf
        72   -> strcasecmp
        72   -> strcpy
      24   uif_cmd_help
        24   -> printf
      32   uif_cmd_set
        32   -- Indirect call
        32   -> printf
        32   -> strcasecmp
      32   uif_cmd_show
        32   -- Indirect call
        32   -> printf
        32   -> strcasecmp


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_16
       4  ??DataTable4_17
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
       2  ?_0
      24  ?_1
       4  ?_2
      32  ?_3
       4  ?_4
      20  HELPFORMAT
      24  HELPMSG
      28  INVALUE
      32  INVARG
      28  INVCMD
      40  INVOPT
       8  OPTFMT
      32  SYNTAX
      80  cmdline1
      80  cmdline2
     114  get_line
      46  get_value
      92  make_argv
     190  run_cmd
      76  uif_cmd_help
     204  uif_cmd_set
     220  uif_cmd_show

 
   160 bytes in section .bss
   278 bytes in section .rodata
 1 014 bytes in section .text
 
 1 014 bytes of CODE  memory
   278 bytes of CONST memory
   160 bytes of DATA  memory

Errors: none
Warnings: 1
