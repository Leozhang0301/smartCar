###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.1.169/W32 for ARM         02/Jul/2019  17:59:22
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  G:\AIcar\@@\xiugai\lib\common\printf.c
#    Command line =  
#        -f C:\Users\admin\AppData\Local\Temp\EW69FF.tmp
#        (G:\AIcar\@@\xiugai\lib\common\printf.c -D LPLD_K60 -lCN
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\List"
#        -lB
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\List"
#        -o "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        G:\AIcar\arm\inc\c\DLib_Config_Normal.h -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\app\" -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\CPU\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\common\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\HW\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\DEV\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Ports\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Source\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\option\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\common\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\driver\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\descriptor\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\class\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\Jay\"
#        -On -I G:\AIcar\arm\CMSIS\Core\Include\ -I
#        G:\AIcar\arm\CMSIS\DSP\Include\ -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\List\printf.lst
#    Object file  =  
#        G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\Obj\printf.o
#
###############################################################################

G:\AIcar\@@\xiugai\lib\common\printf.c
      1          /**
      2           * @file printf.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief C库标准printf()函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          
     23          #include "common.h"
     24          #include <stdarg.h>
     25          
     26          /********************************************************************/
     27          
     28          typedef struct
     29          {
     30              int32 dest;
     31              void (*func)(int8);
     32              int8 *loc;
     33          } PRINTK_INFO;
     34          
     35          int32 
     36          printk (PRINTK_INFO *, const int8 *, va_list);
     37          
     38          /********************************************************************/
     39          
     40          #define DEST_CONSOLE    (1)
     41          #define DEST_STRING     (2)
     42          
     43          #define FLAGS_MINUS     (0x01)
     44          #define FLAGS_PLUS      (0x02)
     45          #define FLAGS_SPACE     (0x04)
     46          #define FLAGS_ZERO      (0x08)
     47          #define FLAGS_POUND     (0x10)
     48          
     49          #define IS_FLAG_MINUS(a)    (a & FLAGS_MINUS)
     50          #define IS_FLAG_PLUS(a)     (a & FLAGS_PLUS)
     51          #define IS_FLAG_SPACE(a)    (a & FLAGS_SPACE)
     52          #define IS_FLAG_ZERO(a)     (a & FLAGS_ZERO)
     53          #define IS_FLAG_POUND(a)    (a & FLAGS_POUND)
     54          
     55          #define LENMOD_h        (0x01)
     56          #define LENMOD_l        (0x02)
     57          #define LENMOD_L        (0x04)
     58          
     59          #define IS_LENMOD_h(a)  (a & LENMOD_h)
     60          #define IS_LENMOD_l(a)  (a & LENMOD_l)
     61          #define IS_LENMOD_L(a)  (a & LENMOD_L)
     62          
     63          #define FMT_d   (0x0001)
     64          #define FMT_o   (0x0002)
     65          #define FMT_x   (0x0004)
     66          #define FMT_X   (0x0008)
     67          #define FMT_u   (0x0010)
     68          #define FMT_c   (0x0020)
     69          #define FMT_s   (0x0040)
     70          #define FMT_p   (0x0080)
     71          #define FMT_n   (0x0100)
     72          
     73          #define IS_FMT_d(a)     (a & FMT_d)
     74          #define IS_FMT_o(a)     (a & FMT_o)
     75          #define IS_FMT_x(a)     (a & FMT_x)
     76          #define IS_FMT_X(a)     (a & FMT_X)
     77          #define IS_FMT_u(a)     (a & FMT_u)
     78          #define IS_FMT_c(a)     (a & FMT_c)
     79          #define IS_FMT_s(a)     (a & FMT_s)
     80          #define IS_FMT_p(a)     (a & FMT_p)
     81          #define IS_FMT_n(a)     (a & FMT_n)
     82          
     83          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     84          static void printk_putc (int32 c, int32 *count, PRINTK_INFO *info)
     85          {
   \                     printk_putc: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
     86              switch (info->dest)
   \        0x8   0x6830             LDR      R0,[R6, #+0]
   \        0xA   0x2801             CMP      R0,#+1
   \        0xC   0xD002             BEQ.N    ??printk_putc_0
   \        0xE   0x2802             CMP      R0,#+2
   \       0x10   0xD005             BEQ.N    ??printk_putc_1
   \       0x12   0xE00A             B.N      ??printk_putc_2
     87              {
     88                  case DEST_CONSOLE:
     89                      info->func((int8)c);
   \                     ??printk_putc_0: (+1)
   \       0x14   0x0020             MOVS     R0,R4
   \       0x16   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \       0x18   0x6871             LDR      R1,[R6, #+4]
   \       0x1A   0x4788             BLX      R1
     90                      break;
   \       0x1C   0xE005             B.N      ??printk_putc_3
     91                  case DEST_STRING:
     92                      *(info->loc) = (uint8)c;
   \                     ??printk_putc_1: (+1)
   \       0x1E   0x68B0             LDR      R0,[R6, #+8]
   \       0x20   0x7004             STRB     R4,[R0, #+0]
     93                      ++(info->loc);
   \       0x22   0x68B0             LDR      R0,[R6, #+8]
   \       0x24   0x1C40             ADDS     R0,R0,#+1
   \       0x26   0x60B0             STR      R0,[R6, #+8]
     94                      break;
   \       0x28   0xE7FF             B.N      ??printk_putc_3
     95                  default:
     96                      break;
     97              }
     98              *count += 1;
   \                     ??printk_putc_2: (+1)
   \                     ??printk_putc_3: (+1)
   \       0x2A   0x6828             LDR      R0,[R5, #+0]
   \       0x2C   0x1C40             ADDS     R0,R0,#+1
   \       0x2E   0x6028             STR      R0,[R5, #+0]
     99          }
   \       0x30   0xBD70             POP      {R4-R6,PC}       ;; return
    100          
    101          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    102          static int32 printk_mknumstr (int8 *numstr, void *nump, int32 neg, int32 radix)
    103          {
   \                     printk_mknumstr: (+1)
   \        0x0   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \        0x4   0x0006             MOVS     R6,R0
   \        0x6   0x000D             MOVS     R5,R1
   \        0x8   0x0014             MOVS     R4,R2
    104              int32 a,b,c;
    105              uint32 ua,ub,uc;
    106          
    107              int32 nlen;
    108              int8 *nstrp;
    109          
    110              nlen = 0;
   \        0xA   0x2000             MOVS     R0,#+0
    111              nstrp = numstr;
   \        0xC   0x46B1             MOV      R9,R6
    112              *nstrp++ = '\0';
   \        0xE   0xF05F 0x0A00      MOVS     R10,#+0
   \       0x12   0xF889 0xA000      STRB     R10,[R9, #+0]
   \       0x16   0xF119 0x0901      ADDS     R9,R9,#+1
    113          
    114              if (neg)
   \       0x1A   0x2C00             CMP      R4,#+0
   \       0x1C   0xD024             BEQ.N    ??printk_mknumstr_0
    115              {
    116                  a = *(int32 *)nump;
   \       0x1E   0xF8D5 0xA000      LDR      R10,[R5, #+0]
   \       0x22   0x4651             MOV      R1,R10
    117                  if (a == 0)
   \       0x24   0x2900             CMP      R1,#+0
   \       0x26   0xD105             BNE.N    ??printk_mknumstr_1
    118                  {
    119                      *nstrp = '0';
   \       0x28   0xF05F 0x0A30      MOVS     R10,#+48
   \       0x2C   0xF889 0xA000      STRB     R10,[R9, #+0]
    120                      ++nlen;
   \       0x30   0x1C40             ADDS     R0,R0,#+1
    121                      goto done;
   \       0x32   0xE03C             B.N      ??printk_mknumstr_2
    122                  }
    123                  while (a != 0)
   \                     ??printk_mknumstr_1: (+1)
   \       0x34   0x2900             CMP      R1,#+0
   \       0x36   0xD03A             BEQ.N    ??printk_mknumstr_2
    124                  {
    125                      b = (int32)a / (int32)radix;
   \       0x38   0xFB91 0xFAF3      SDIV     R10,R1,R3
   \       0x3C   0x4657             MOV      R7,R10
    126                      c = (int32)a - ((int32)b * (int32)radix);
   \       0x3E   0xFB03 0x1A17      MLS      R10,R3,R7,R1
    127                      if (c < 0)
   \       0x42   0xF1BA 0x0F00      CMP      R10,#+0
   \       0x46   0xD505             BPL.N    ??printk_mknumstr_3
    128                      {
    129                          c = ~c + 1 + '0';
   \       0x48   0x46D0             MOV      R8,R10
   \       0x4A   0xEA7F 0x0808      MVNS     R8,R8
   \       0x4E   0xF118 0x0831      ADDS     R8,R8,#+49
   \       0x52   0xE002             B.N      ??printk_mknumstr_4
    130                      }
    131                      else
    132                      {
    133                          c = c + '0';
   \                     ??printk_mknumstr_3: (+1)
   \       0x54   0x46D0             MOV      R8,R10
   \       0x56   0xF118 0x0830      ADDS     R8,R8,#+48
    134                      }
    135                      a = b;
   \                     ??printk_mknumstr_4: (+1)
   \       0x5A   0x0039             MOVS     R1,R7
    136                      *nstrp++ = (int8)c;
   \       0x5C   0xF889 0x8000      STRB     R8,[R9, #+0]
   \       0x60   0xF119 0x0901      ADDS     R9,R9,#+1
    137                      ++nlen;
   \       0x64   0x1C40             ADDS     R0,R0,#+1
   \       0x66   0xE7E5             B.N      ??printk_mknumstr_1
    138                  }
    139              }
    140              else
    141              {
    142                  ua = *(uint32 *)nump;
   \                     ??printk_mknumstr_0: (+1)
   \       0x68   0xF8D5 0xA000      LDR      R10,[R5, #+0]
   \       0x6C   0x4652             MOV      R2,R10
    143                  if (ua == 0)
   \       0x6E   0x2A00             CMP      R2,#+0
   \       0x70   0xD105             BNE.N    ??printk_mknumstr_5
    144                  {
    145                      *nstrp = '0';
   \       0x72   0xF05F 0x0A30      MOVS     R10,#+48
   \       0x76   0xF889 0xA000      STRB     R10,[R9, #+0]
    146                      ++nlen;
   \       0x7A   0x1C40             ADDS     R0,R0,#+1
    147                      goto done;
   \       0x7C   0xE017             B.N      ??printk_mknumstr_2
    148                  }
    149                  while (ua != 0)
   \                     ??printk_mknumstr_5: (+1)
   \       0x7E   0x2A00             CMP      R2,#+0
   \       0x80   0xD015             BEQ.N    ??printk_mknumstr_2
    150                  {
    151                      ub = (uint32)ua / (uint32)radix;
   \       0x82   0xFBB2 0xFAF3      UDIV     R10,R2,R3
   \       0x86   0x46D4             MOV      R12,R10
    152                      uc = (uint32)ua - ((uint32)ub * (uint32)radix);
   \       0x88   0xFB03 0x2A1C      MLS      R10,R3,R12,R2
    153                      if (uc < 10)
   \       0x8C   0xF1BA 0x0F0A      CMP      R10,#+10
   \       0x90   0xD203             BCS.N    ??printk_mknumstr_6
    154                      {
    155                          uc = uc + '0';
   \       0x92   0x46D6             MOV      LR,R10
   \       0x94   0xF11E 0x0E30      ADDS     LR,LR,#+48
   \       0x98   0xE002             B.N      ??printk_mknumstr_7
    156                      }
    157                      else
    158                      {
    159                          uc = uc - 10 + 'A';
   \                     ??printk_mknumstr_6: (+1)
   \       0x9A   0x46D6             MOV      LR,R10
   \       0x9C   0xF11E 0x0E37      ADDS     LR,LR,#+55
    160                      }
    161                      ua = ub;
   \                     ??printk_mknumstr_7: (+1)
   \       0xA0   0x4662             MOV      R2,R12
    162                      *nstrp++ = (int8)uc;
   \       0xA2   0xF889 0xE000      STRB     LR,[R9, #+0]
   \       0xA6   0xF119 0x0901      ADDS     R9,R9,#+1
    163                      ++nlen;
   \       0xAA   0x1C40             ADDS     R0,R0,#+1
   \       0xAC   0xE7E7             B.N      ??printk_mknumstr_5
    164                  }
    165              }
    166              done:
    167              return nlen;
   \                     ??printk_mknumstr_2: (+1)
   \       0xAE   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    168          }
    169          
    170          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    171          static void printk_pad_zero (int32 curlen, int32 field_width, int32 *count, PRINTK_INFO *info)
    172          {
   \                     printk_pad_zero: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
   \        0x8   0x0016             MOVS     R6,R2
   \        0xA   0x001F             MOVS     R7,R3
    173              int32 i;
    174          
    175              for (i = curlen; i < field_width; i++)
   \        0xC   0x46A0             MOV      R8,R4
   \                     ??printk_pad_zero_0: (+1)
   \        0xE   0x45A8             CMP      R8,R5
   \       0x10   0xDA07             BGE.N    ??printk_pad_zero_1
    176              {
    177                  printk_putc('0',count, info);
   \       0x12   0x003A             MOVS     R2,R7
   \       0x14   0x0031             MOVS     R1,R6
   \       0x16   0x2030             MOVS     R0,#+48
   \       0x18   0x....'....        BL       printk_putc
    178              }
   \       0x1C   0xF118 0x0801      ADDS     R8,R8,#+1
   \       0x20   0xE7F5             B.N      ??printk_pad_zero_0
    179          }
   \                     ??printk_pad_zero_1: (+1)
   \       0x22   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    180          
    181          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    182          static void
    183          printk_pad_space (int32 curlen, int32 field_width, int32 *count, PRINTK_INFO *info)
    184          {
   \                     printk_pad_space: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
   \        0x8   0x0016             MOVS     R6,R2
   \        0xA   0x001F             MOVS     R7,R3
    185              int32 i;
    186          
    187              for (i = curlen; i < field_width; i++)
   \        0xC   0x46A0             MOV      R8,R4
   \                     ??printk_pad_space_0: (+1)
   \        0xE   0x45A8             CMP      R8,R5
   \       0x10   0xDA07             BGE.N    ??printk_pad_space_1
    188              {
    189                  printk_putc(' ',count, info);
   \       0x12   0x003A             MOVS     R2,R7
   \       0x14   0x0031             MOVS     R1,R6
   \       0x16   0x2020             MOVS     R0,#+32
   \       0x18   0x....'....        BL       printk_putc
    190              }
   \       0x1C   0xF118 0x0801      ADDS     R8,R8,#+1
   \       0x20   0xE7F5             B.N      ??printk_pad_space_0
    191          }
   \                     ??printk_pad_space_1: (+1)
   \       0x22   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    192          
    193          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    194          int32 printk (PRINTK_INFO *info, const int8 *fmt, va_list ap)
    195          {
   \                     printk: (+1)
   \        0x0   0xE92D 0x4FF2      PUSH     {R1,R4-R11,LR}
   \        0x4   0xB092             SUB      SP,SP,#+72
   \        0x6   0x0005             MOVS     R5,R0
   \        0x8   0x4693             MOV      R11,R2
    196              /* va_list ap; */
    197              int8 *p;
    198              int32 c;
    199          
    200              int8 vstr[33];
    201              int8 *vstrp;
    202              int32 vlen;
    203          
    204              int32 done;
    205              int32 count = 0;
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0x9000             STR      R0,[SP, #+0]
    206          
    207              int32 flags_used;
    208              int32 field_width;
    209          #if 0
    210              int32 precision_used;
    211              int32 precision_width;
    212              int32 length_modifier;
    213          #endif
    214          
    215              int32 ival;
    216              int32 schar, dschar;
    217              int32 *ivalp;
    218              int8 *sval;
    219              int32 cval;
    220              uint32 uval;
    221          
    222              /*
    223               * Start parsing apart the format string and display appropriate
    224               * formats and data.
    225               */
    226              for (p = (int8 *)fmt; (c = *p) != 0; p++)
   \        0xE   0xF8DD 0x8048      LDR      R8,[SP, #+72]
   \                     ??printk_0: (+1)
   \       0x12   0xF998 0x0000      LDRSB    R0,[R8, #+0]
   \       0x16   0x9001             STR      R0,[SP, #+4]
   \       0x18   0x9801             LDR      R0,[SP, #+4]
   \       0x1A   0x2800             CMP      R0,#+0
   \       0x1C   0xF000 0x81F6      BEQ.W    ??printk_1
    227              {
    228                  /*
    229                   * All formats begin with a '%' marker.  Special chars like
    230                   * '\n' or '\t' are normally converted to the appropriate
    231                   * character by the __compiler__.  Thus, no need for this
    232                   * routine to account for the '\' character.
    233                   */
    234                  if (c != '%')
   \       0x20   0x9801             LDR      R0,[SP, #+4]
   \       0x22   0x2825             CMP      R0,#+37
   \       0x24   0xD013             BEQ.N    ??printk_2
    235                  {
    236                      /*
    237                       * This needs to be replaced with something like
    238                       * 'out_char()' or call an OS routine.
    239                       */
    240          #ifndef UNIX_DEBUG
    241                      if (c != '\n')
   \       0x26   0x9801             LDR      R0,[SP, #+4]
   \       0x28   0x280A             CMP      R0,#+10
   \       0x2A   0xD005             BEQ.N    ??printk_3
    242                      {
    243                          printk_putc(c, &count, info);
   \       0x2C   0x002A             MOVS     R2,R5
   \       0x2E   0x4669             MOV      R1,SP
   \       0x30   0x9801             LDR      R0,[SP, #+4]
   \       0x32   0x....'....        BL       printk_putc
   \       0x36   0xE009             B.N      ??printk_4
    244                      }
    245                      else
    246                      {
    247                          printk_putc(0x0D /* CR */, &count, info);
   \                     ??printk_3: (+1)
   \       0x38   0x002A             MOVS     R2,R5
   \       0x3A   0x4669             MOV      R1,SP
   \       0x3C   0x200D             MOVS     R0,#+13
   \       0x3E   0x....'....        BL       printk_putc
    248                          printk_putc(0x0A /* LF */, &count, info);
   \       0x42   0x002A             MOVS     R2,R5
   \       0x44   0x4669             MOV      R1,SP
   \       0x46   0x200A             MOVS     R0,#+10
   \       0x48   0x....'....        BL       printk_putc
    249                      }
    250          #else
    251                      printk_putc(c, &count, info);
    252          #endif
    253          
    254                      /*
    255                       * By using 'continue', the next iteration of the loop
    256                       * is used, skipping the code that follows.
    257                       */
    258                      continue;
   \                     ??printk_4: (+1)
   \       0x4C   0xE1DB             B.N      ??printk_5
    259                  }
    260          
    261                  /*
    262                   * First check for specification modifier flags.
    263                   */
    264                  flags_used = 0;
   \                     ??printk_2: (+1)
   \       0x4E   0x2000             MOVS     R0,#+0
   \       0x50   0x0006             MOVS     R6,R0
    265                  done = FALSE;
   \       0x52   0x2000             MOVS     R0,#+0
    266                  while (!done)
   \                     ??printk_6: (+1)
   \       0x54   0x2800             CMP      R0,#+0
   \       0x56   0xD122             BNE.N    ??printk_7
    267                  {
    268                      switch (/* c = */ *++p)
   \       0x58   0xF118 0x0801      ADDS     R8,R8,#+1
   \       0x5C   0xF998 0x1000      LDRSB    R1,[R8, #+0]
   \       0x60   0x2920             CMP      R1,#+32
   \       0x62   0xD00E             BEQ.N    ??printk_8
   \       0x64   0x2923             CMP      R1,#+35
   \       0x66   0xD012             BEQ.N    ??printk_9
   \       0x68   0x292B             CMP      R1,#+43
   \       0x6A   0xD007             BEQ.N    ??printk_10
   \       0x6C   0x292D             CMP      R1,#+45
   \       0x6E   0xD002             BEQ.N    ??printk_11
   \       0x70   0x2930             CMP      R1,#+48
   \       0x72   0xD009             BEQ.N    ??printk_12
   \       0x74   0xE00E             B.N      ??printk_13
    269                      {
    270                          case '-':
    271                              flags_used |= FLAGS_MINUS;
   \                     ??printk_11: (+1)
   \       0x76   0xF056 0x0601      ORRS     R6,R6,#0x1
    272                              break;
   \       0x7A   0xE7EB             B.N      ??printk_6
    273                          case '+':
    274                              flags_used |= FLAGS_PLUS;
   \                     ??printk_10: (+1)
   \       0x7C   0xF056 0x0602      ORRS     R6,R6,#0x2
    275                              break;
   \       0x80   0xE7E8             B.N      ??printk_6
    276                          case ' ':
    277                              flags_used |= FLAGS_SPACE;
   \                     ??printk_8: (+1)
   \       0x82   0xF056 0x0604      ORRS     R6,R6,#0x4
    278                              break;
   \       0x86   0xE7E5             B.N      ??printk_6
    279                          case '0':
    280                              flags_used |= FLAGS_ZERO;
   \                     ??printk_12: (+1)
   \       0x88   0xF056 0x0608      ORRS     R6,R6,#0x8
    281                              break;
   \       0x8C   0xE7E2             B.N      ??printk_6
    282                          case '#':
    283                              flags_used |= FLAGS_POUND;
   \                     ??printk_9: (+1)
   \       0x8E   0xF056 0x0610      ORRS     R6,R6,#0x10
    284                              break;
   \       0x92   0xE7DF             B.N      ??printk_6
    285                          default:
    286                              /* we've gone one int8 too far */
    287                              --p;
   \                     ??printk_13: (+1)
   \       0x94   0xF1B8 0x0801      SUBS     R8,R8,#+1
    288                              done = TRUE;
   \       0x98   0x2101             MOVS     R1,#+1
   \       0x9A   0x0008             MOVS     R0,R1
    289                              break;
   \       0x9C   0xE7DA             B.N      ??printk_6
    290                      }
    291                  }
    292          
    293                  /*
    294                   * Next check for minimum field width.
    295                   */
    296                  field_width = 0;
   \                     ??printk_7: (+1)
   \       0x9E   0x2100             MOVS     R1,#+0
   \       0xA0   0x000F             MOVS     R7,R1
    297                  done = FALSE;
   \       0xA2   0x2100             MOVS     R1,#+0
   \       0xA4   0x9105             STR      R1,[SP, #+20]
    298                  while (!done)
   \                     ??printk_14: (+1)
   \       0xA6   0x9805             LDR      R0,[SP, #+20]
   \       0xA8   0x2800             CMP      R0,#+0
   \       0xAA   0xD113             BNE.N    ??printk_15
    299                  {
    300                      switch (c = *++p)
   \       0xAC   0xF118 0x0801      ADDS     R8,R8,#+1
   \       0xB0   0xF998 0x0000      LDRSB    R0,[R8, #+0]
   \       0xB4   0x9001             STR      R0,[SP, #+4]
   \       0xB6   0x9801             LDR      R0,[SP, #+4]
   \       0xB8   0x3830             SUBS     R0,R0,#+48
   \       0xBA   0x2809             CMP      R0,#+9
   \       0xBC   0xD805             BHI.N    ??printk_16
    301                      {
    302                          case '0':
    303                          case '1':
    304                          case '2':
    305                          case '3':
    306                          case '4':
    307                          case '5':
    308                          case '6':
    309                          case '7':
    310                          case '8':
    311                          case '9':
    312                              field_width = (field_width * 10) + (c - '0');
   \                     ??printk_17: (+1)
   \       0xBE   0x210A             MOVS     R1,#+10
   \       0xC0   0x9801             LDR      R0,[SP, #+4]
   \       0xC2   0xFB01 0x0707      MLA      R7,R1,R7,R0
   \       0xC6   0x3F30             SUBS     R7,R7,#+48
    313                              break;
   \       0xC8   0xE7ED             B.N      ??printk_14
    314                          default:
    315                              /* we've gone one int8 too far */
    316                              --p;
   \                     ??printk_16: (+1)
   \       0xCA   0xF1B8 0x0801      SUBS     R8,R8,#+1
    317                              done = TRUE;
   \       0xCE   0x2001             MOVS     R0,#+1
   \       0xD0   0x9005             STR      R0,[SP, #+20]
    318                              break;
   \       0xD2   0xE7E8             B.N      ??printk_14
    319                      }
    320                  }
    321          
    322                  /*
    323                   * Next check for the width and precision field separator.
    324                   */
    325                  if (/* (c = *++p) */ *++p == '.')
   \                     ??printk_15: (+1)
   \       0xD4   0xF118 0x0101      ADDS     R1,R8,#+1
   \       0xD8   0xF991 0x0000      LDRSB    R0,[R1, #+0]
   \       0xDC   0x282E             CMP      R0,#+46
   \       0xDE   0xD10F             BNE.N    ??printk_18
    326                  {
    327                      /* precision_used = TRUE; */
    328          
    329                      /*
    330                       * Must get precision field width, if present.
    331                       */
    332                      /* precision_width = 0; */
    333                      done = FALSE;
   \       0xE0   0x2000             MOVS     R0,#+0
   \       0xE2   0x9005             STR      R0,[SP, #+20]
    334                      while (!done)
   \                     ??printk_19: (+1)
   \       0xE4   0x9805             LDR      R0,[SP, #+20]
   \       0xE6   0x2800             CMP      R0,#+0
   \       0xE8   0xD10B             BNE.N    ??printk_20
    335                      {
    336                          switch (/* c = uncomment if used below */ *++p)
   \       0xEA   0x1C49             ADDS     R1,R1,#+1
   \       0xEC   0xF991 0x0000      LDRSB    R0,[R1, #+0]
   \       0xF0   0x3830             SUBS     R0,R0,#+48
   \       0xF2   0x2809             CMP      R0,#+9
   \       0xF4   0xD800             BHI.N    ??printk_21
    337                          {
    338                              case '0':
    339                              case '1':
    340                              case '2':
    341                              case '3':
    342                              case '4':
    343                              case '5':
    344                              case '6':
    345                              case '7':
    346                              case '8':
    347                              case '9':
    348          #if 0
    349                                  precision_width = (precision_width * 10) +
    350                                      (c - '0');
    351          #endif
    352                                  break;
   \                     ??printk_22: (+1)
   \       0xF6   0xE7F5             B.N      ??printk_19
    353                              default:
    354                                  /* we've gone one int8 too far */
    355                                  --p;
   \                     ??printk_21: (+1)
   \       0xF8   0x1E49             SUBS     R1,R1,#+1
    356                                  done = TRUE;
   \       0xFA   0x2001             MOVS     R0,#+1
   \       0xFC   0x9005             STR      R0,[SP, #+20]
    357                                  break;
   \       0xFE   0xE7F1             B.N      ??printk_19
    358                          }
    359                      }
    360                  }
    361                  else
    362                  {
    363                      /* we've gone one int8 too far */
    364                      --p;
   \                     ??printk_18: (+1)
   \      0x100   0x1E49             SUBS     R1,R1,#+1
    365          #if 0
    366                      precision_used = FALSE;
    367                      precision_width = 0;
    368          #endif
    369                  }
    370          
    371                  /*
    372                   * Check for the length modifier.
    373                   */
    374                  /* length_modifier = 0; */
    375                  switch (/* c = */ *++p)
   \                     ??printk_20: (+1)
   \      0x102   0x1C48             ADDS     R0,R1,#+1
   \      0x104   0xF990 0x1000      LDRSB    R1,[R0, #+0]
   \      0x108   0x294C             CMP      R1,#+76
   \      0x10A   0xD006             BEQ.N    ??printk_23
   \      0x10C   0x2968             CMP      R1,#+104
   \      0x10E   0xD002             BEQ.N    ??printk_24
   \      0x110   0x296C             CMP      R1,#+108
   \      0x112   0xD001             BEQ.N    ??printk_25
   \      0x114   0xE002             B.N      ??printk_26
    376                  {
    377                      case 'h':
    378                          /* length_modifier |= LENMOD_h; */
    379                          break;
   \                     ??printk_24: (+1)
   \      0x116   0xE002             B.N      ??printk_27
    380                      case 'l':
    381                          /* length_modifier |= LENMOD_l; */
    382                          break;
   \                     ??printk_25: (+1)
   \      0x118   0xE001             B.N      ??printk_27
    383                      case 'L':
    384                          /* length_modifier |= LENMOD_L; */
    385                          break;
   \                     ??printk_23: (+1)
   \      0x11A   0xE000             B.N      ??printk_27
    386                      default:
    387                          /* we've gone one int8 too far */
    388                          --p;
   \                     ??printk_26: (+1)
   \      0x11C   0x1E40             SUBS     R0,R0,#+1
    389                          break;
    390                  }
    391          
    392                  /*
    393                   * Now we're ready to examine the format.
    394                   */
    395                  switch (c = *++p)
   \                     ??printk_27: (+1)
   \      0x11E   0xF110 0x0801      ADDS     R8,R0,#+1
   \      0x122   0xF998 0x0000      LDRSB    R0,[R8, #+0]
   \      0x126   0x9001             STR      R0,[SP, #+4]
   \      0x128   0x9801             LDR      R0,[SP, #+4]
   \      0x12A   0x2858             CMP      R0,#+88
   \      0x12C   0xD076             BEQ.N    ??printk_28
   \      0x12E   0x2862             CMP      R0,#+98
   \      0x130   0xF000 0x80D6      BEQ.W    ??printk_29
   \      0x134   0x2863             CMP      R0,#+99
   \      0x136   0xF000 0x8124      BEQ.W    ??printk_30
   \      0x13A   0x2864             CMP      R0,#+100
   \      0x13C   0xD013             BEQ.N    ??printk_31
   \      0x13E   0x2869             CMP      R0,#+105
   \      0x140   0xD011             BEQ.N    ??printk_31
   \      0x142   0x286E             CMP      R0,#+110
   \      0x144   0xF000 0x8151      BEQ.W    ??printk_32
   \      0x148   0x286F             CMP      R0,#+111
   \      0x14A   0xF000 0x80BC      BEQ.W    ??printk_33
   \      0x14E   0x2870             CMP      R0,#+112
   \      0x150   0xF000 0x80D3      BEQ.W    ??printk_34
   \      0x154   0x2873             CMP      R0,#+115
   \      0x156   0xF000 0x8120      BEQ.W    ??printk_35
   \      0x15A   0x2875             CMP      R0,#+117
   \      0x15C   0xF000 0x80DA      BEQ.W    ??printk_36
   \      0x160   0x2878             CMP      R0,#+120
   \      0x162   0xD05B             BEQ.N    ??printk_28
   \      0x164   0xE14A             B.N      ??printk_37
    396                  {
    397                      case 'd':
    398                      case 'i':
    399                          ival = (int32)va_arg(ap, int32);
   \                     ??printk_31: (+1)
   \      0x166   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \      0x16A   0xF11B 0x0B04      ADDS     R11,R11,#+4
   \      0x16E   0x9006             STR      R0,[SP, #+24]
    400                          vlen = printk_mknumstr(vstr,&ival,TRUE,10);
   \      0x170   0x230A             MOVS     R3,#+10
   \      0x172   0x2201             MOVS     R2,#+1
   \      0x174   0xA906             ADD      R1,SP,#+24
   \      0x176   0xA809             ADD      R0,SP,#+36
   \      0x178   0x....'....        BL       printk_mknumstr
   \      0x17C   0x4681             MOV      R9,R0
    401                          vstrp = &vstr[vlen];
   \      0x17E   0xA809             ADD      R0,SP,#+36
   \      0x180   0x4448             ADD      R0,R0,R9
   \      0x182   0x4682             MOV      R10,R0
    402          
    403                          if (ival < 0)
   \      0x184   0x9806             LDR      R0,[SP, #+24]
   \      0x186   0x2800             CMP      R0,#+0
   \      0x188   0xD504             BPL.N    ??printk_38
    404                          {
    405                              schar = '-';
   \      0x18A   0x202D             MOVS     R0,#+45
   \      0x18C   0x9003             STR      R0,[SP, #+12]
    406                              ++vlen;
   \      0x18E   0xF119 0x0901      ADDS     R9,R9,#+1
   \      0x192   0xE00F             B.N      ??printk_39
    407                          }
    408                          else
    409                          {
    410                              if (IS_FLAG_PLUS(flags_used))
   \                     ??printk_38: (+1)
   \      0x194   0x07B0             LSLS     R0,R6,#+30
   \      0x196   0xD504             BPL.N    ??printk_40
    411                              {
    412                                  schar = '+';
   \      0x198   0x202B             MOVS     R0,#+43
   \      0x19A   0x9003             STR      R0,[SP, #+12]
    413                                  ++vlen;
   \      0x19C   0xF119 0x0901      ADDS     R9,R9,#+1
   \      0x1A0   0xE008             B.N      ??printk_39
    414                              }
    415                              else
    416                              {
    417                                  if (IS_FLAG_SPACE(flags_used))
   \                     ??printk_40: (+1)
   \      0x1A2   0x0770             LSLS     R0,R6,#+29
   \      0x1A4   0xD504             BPL.N    ??printk_41
    418                                  {
    419                                      schar = ' ';
   \      0x1A6   0x2020             MOVS     R0,#+32
   \      0x1A8   0x9003             STR      R0,[SP, #+12]
    420                                      ++vlen;
   \      0x1AA   0xF119 0x0901      ADDS     R9,R9,#+1
   \      0x1AE   0xE001             B.N      ??printk_39
    421                                  }
    422                                  else
    423                                  {
    424                                      schar = 0;
   \                     ??printk_41: (+1)
   \      0x1B0   0x2000             MOVS     R0,#+0
   \      0x1B2   0x9003             STR      R0,[SP, #+12]
    425                                  }
    426                              }
    427                          }
    428                          dschar = FALSE;
   \                     ??printk_39: (+1)
   \      0x1B4   0x2000             MOVS     R0,#+0
   \      0x1B6   0x9004             STR      R0,[SP, #+16]
    429                      
    430                          /*
    431                           * do the ZERO pad.
    432                           */
    433                          if (IS_FLAG_ZERO(flags_used))
   \      0x1B8   0x0730             LSLS     R0,R6,#+28
   \      0x1BA   0xD511             BPL.N    ??printk_42
    434                          {
    435                              if (schar)
   \      0x1BC   0x9803             LDR      R0,[SP, #+12]
   \      0x1BE   0x2800             CMP      R0,#+0
   \      0x1C0   0xD004             BEQ.N    ??printk_43
    436                                  printk_putc(schar, &count, info);
   \      0x1C2   0x002A             MOVS     R2,R5
   \      0x1C4   0x4669             MOV      R1,SP
   \      0x1C6   0x9803             LDR      R0,[SP, #+12]
   \      0x1C8   0x....'....        BL       printk_putc
    437                              dschar = TRUE;
   \                     ??printk_43: (+1)
   \      0x1CC   0x2001             MOVS     R0,#+1
   \      0x1CE   0x9004             STR      R0,[SP, #+16]
    438                      
    439                              printk_pad_zero (vlen, field_width, &count, info);
   \      0x1D0   0x002B             MOVS     R3,R5
   \      0x1D2   0x466A             MOV      R2,SP
   \      0x1D4   0x0039             MOVS     R1,R7
   \      0x1D6   0x4648             MOV      R0,R9
   \      0x1D8   0x....'....        BL       printk_pad_zero
    440                              vlen = field_width;
   \      0x1DC   0x46B9             MOV      R9,R7
   \      0x1DE   0xE011             B.N      ??printk_44
    441                          }
    442                          else
    443                          {
    444                              if (!IS_FLAG_MINUS(flags_used))
   \                     ??printk_42: (+1)
   \      0x1E0   0x07F0             LSLS     R0,R6,#+31
   \      0x1E2   0xD40F             BMI.N    ??printk_44
    445                              {
    446                                  printk_pad_space (vlen, field_width, &count, info);
   \      0x1E4   0x002B             MOVS     R3,R5
   \      0x1E6   0x466A             MOV      R2,SP
   \      0x1E8   0x0039             MOVS     R1,R7
   \      0x1EA   0x4648             MOV      R0,R9
   \      0x1EC   0x....'....        BL       printk_pad_space
    447                      
    448                                  if (schar)
   \      0x1F0   0x9803             LDR      R0,[SP, #+12]
   \      0x1F2   0x2800             CMP      R0,#+0
   \      0x1F4   0xD004             BEQ.N    ??printk_45
    449                                      printk_putc(schar, &count, info);
   \      0x1F6   0x002A             MOVS     R2,R5
   \      0x1F8   0x4669             MOV      R1,SP
   \      0x1FA   0x9803             LDR      R0,[SP, #+12]
   \      0x1FC   0x....'....        BL       printk_putc
    450                                  dschar = TRUE;
   \                     ??printk_45: (+1)
   \      0x200   0x2001             MOVS     R0,#+1
   \      0x202   0x9004             STR      R0,[SP, #+16]
    451                              }
    452                          }
    453                      
    454                          /* the string was built in reverse order, now display in */
    455                          /* correct order */
    456                          if (!dschar && schar)
   \                     ??printk_44: (+1)
   \      0x204   0x9804             LDR      R0,[SP, #+16]
   \      0x206   0x2800             CMP      R0,#+0
   \      0x208   0xD107             BNE.N    ??printk_46
   \      0x20A   0x9803             LDR      R0,[SP, #+12]
   \      0x20C   0x2800             CMP      R0,#+0
   \      0x20E   0xD004             BEQ.N    ??printk_46
    457                          {
    458                              printk_putc(schar, &count, info);
   \      0x210   0x002A             MOVS     R2,R5
   \      0x212   0x4669             MOV      R1,SP
   \      0x214   0x9803             LDR      R0,[SP, #+12]
   \      0x216   0x....'....        BL       printk_putc
    459                          }
    460                          goto cont_xd;
   \                     ??printk_46: (+1)
   \      0x21A   0xE09C             B.N      ??printk_47
    461          
    462                      case 'x':
    463                      case 'X':
    464                          uval = (uint32)va_arg(ap, uint32);
   \                     ??printk_28: (+1)
   \      0x21C   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \      0x220   0xF11B 0x0B04      ADDS     R11,R11,#+4
   \      0x224   0x9002             STR      R0,[SP, #+8]
    465                          vlen = printk_mknumstr(vstr,&uval,FALSE,16);
   \      0x226   0x2310             MOVS     R3,#+16
   \      0x228   0x2200             MOVS     R2,#+0
   \      0x22A   0xA902             ADD      R1,SP,#+8
   \      0x22C   0xA809             ADD      R0,SP,#+36
   \      0x22E   0x....'....        BL       printk_mknumstr
   \      0x232   0x4681             MOV      R9,R0
    466                          vstrp = &vstr[vlen];
   \      0x234   0xA809             ADD      R0,SP,#+36
   \      0x236   0x4448             ADD      R0,R0,R9
   \      0x238   0x4682             MOV      R10,R0
    467          
    468                          dschar = FALSE;
   \      0x23A   0x2000             MOVS     R0,#+0
   \      0x23C   0x9004             STR      R0,[SP, #+16]
    469                          if (IS_FLAG_ZERO(flags_used))
   \      0x23E   0x0730             LSLS     R0,R6,#+28
   \      0x240   0xD515             BPL.N    ??printk_48
    470                          {
    471                              if (IS_FLAG_POUND(flags_used))
   \      0x242   0x06F0             LSLS     R0,R6,#+27
   \      0x244   0xD50B             BPL.N    ??printk_49
    472                              {
    473                                  printk_putc('0', &count, info);
   \      0x246   0x002A             MOVS     R2,R5
   \      0x248   0x4669             MOV      R1,SP
   \      0x24A   0x2030             MOVS     R0,#+48
   \      0x24C   0x....'....        BL       printk_putc
    474                                  printk_putc('x', &count, info);
   \      0x250   0x002A             MOVS     R2,R5
   \      0x252   0x4669             MOV      R1,SP
   \      0x254   0x2078             MOVS     R0,#+120
   \      0x256   0x....'....        BL       printk_putc
    475                                  /*vlen += 2;*/
    476                                  dschar = TRUE;
   \      0x25A   0x2001             MOVS     R0,#+1
   \      0x25C   0x9004             STR      R0,[SP, #+16]
    477                              }
    478                              printk_pad_zero (vlen, field_width, &count, info);
   \                     ??printk_49: (+1)
   \      0x25E   0x002B             MOVS     R3,R5
   \      0x260   0x466A             MOV      R2,SP
   \      0x262   0x0039             MOVS     R1,R7
   \      0x264   0x4648             MOV      R0,R9
   \      0x266   0x....'....        BL       printk_pad_zero
    479                              vlen = field_width;
   \      0x26A   0x46B9             MOV      R9,R7
   \      0x26C   0xE019             B.N      ??printk_50
    480                          }
    481                          else
    482                          {
    483                              if (!IS_FLAG_MINUS(flags_used))
   \                     ??printk_48: (+1)
   \      0x26E   0x07F0             LSLS     R0,R6,#+31
   \      0x270   0xD417             BMI.N    ??printk_50
    484                              {
    485                                  if (IS_FLAG_POUND(flags_used))
   \      0x272   0x06F0             LSLS     R0,R6,#+27
   \      0x274   0xD501             BPL.N    ??printk_51
    486                                  {
    487                                      vlen += 2;
   \      0x276   0xF119 0x0902      ADDS     R9,R9,#+2
    488                                  }
    489                                  printk_pad_space (vlen, field_width, &count, info);
   \                     ??printk_51: (+1)
   \      0x27A   0x002B             MOVS     R3,R5
   \      0x27C   0x466A             MOV      R2,SP
   \      0x27E   0x0039             MOVS     R1,R7
   \      0x280   0x4648             MOV      R0,R9
   \      0x282   0x....'....        BL       printk_pad_space
    490                                  if (IS_FLAG_POUND(flags_used))
   \      0x286   0x06F0             LSLS     R0,R6,#+27
   \      0x288   0xD50B             BPL.N    ??printk_50
    491                                  {
    492                                      printk_putc('0', &count, info);
   \      0x28A   0x002A             MOVS     R2,R5
   \      0x28C   0x4669             MOV      R1,SP
   \      0x28E   0x2030             MOVS     R0,#+48
   \      0x290   0x....'....        BL       printk_putc
    493                                      printk_putc('x', &count, info);
   \      0x294   0x002A             MOVS     R2,R5
   \      0x296   0x4669             MOV      R1,SP
   \      0x298   0x2078             MOVS     R0,#+120
   \      0x29A   0x....'....        BL       printk_putc
    494                                      dschar = TRUE;
   \      0x29E   0x2001             MOVS     R0,#+1
   \      0x2A0   0x9004             STR      R0,[SP, #+16]
    495                                  }
    496                              }
    497                          }
    498          
    499                          if ((IS_FLAG_POUND(flags_used)) && !dschar)
   \                     ??printk_50: (+1)
   \      0x2A2   0x06F0             LSLS     R0,R6,#+27
   \      0x2A4   0xD50E             BPL.N    ??printk_52
   \      0x2A6   0x9804             LDR      R0,[SP, #+16]
   \      0x2A8   0x2800             CMP      R0,#+0
   \      0x2AA   0xD10B             BNE.N    ??printk_52
    500                          {
    501                              printk_putc('0', &count, info);
   \      0x2AC   0x002A             MOVS     R2,R5
   \      0x2AE   0x4669             MOV      R1,SP
   \      0x2B0   0x2030             MOVS     R0,#+48
   \      0x2B2   0x....'....        BL       printk_putc
    502                              printk_putc('x', &count, info);
   \      0x2B6   0x002A             MOVS     R2,R5
   \      0x2B8   0x4669             MOV      R1,SP
   \      0x2BA   0x2078             MOVS     R0,#+120
   \      0x2BC   0x....'....        BL       printk_putc
    503                              vlen += 2;
   \      0x2C0   0xF119 0x0902      ADDS     R9,R9,#+2
    504                          }
    505                          goto cont_xd;
   \                     ??printk_52: (+1)
   \      0x2C4   0xE047             B.N      ??printk_47
    506          
    507                      case 'o':
    508                          uval = (uint32)va_arg(ap, uint32);
   \                     ??printk_33: (+1)
   \      0x2C6   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \      0x2CA   0xF11B 0x0B04      ADDS     R11,R11,#+4
   \      0x2CE   0x9002             STR      R0,[SP, #+8]
    509                          vlen = printk_mknumstr(vstr,&uval,FALSE,8);
   \      0x2D0   0x2308             MOVS     R3,#+8
   \      0x2D2   0x2200             MOVS     R2,#+0
   \      0x2D4   0xA902             ADD      R1,SP,#+8
   \      0x2D6   0xA809             ADD      R0,SP,#+36
   \      0x2D8   0x....'....        BL       printk_mknumstr
   \      0x2DC   0x4681             MOV      R9,R0
    510                          goto cont_u;
   \      0x2DE   0xE025             B.N      ??printk_53
    511                      case 'b':
    512                          uval = (uint32)va_arg(ap, uint32);
   \                     ??printk_29: (+1)
   \      0x2E0   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \      0x2E4   0xF11B 0x0B04      ADDS     R11,R11,#+4
   \      0x2E8   0x9002             STR      R0,[SP, #+8]
    513                          vlen = printk_mknumstr(vstr,&uval,FALSE,2);
   \      0x2EA   0x2302             MOVS     R3,#+2
   \      0x2EC   0x2200             MOVS     R2,#+0
   \      0x2EE   0xA902             ADD      R1,SP,#+8
   \      0x2F0   0xA809             ADD      R0,SP,#+36
   \      0x2F2   0x....'....        BL       printk_mknumstr
   \      0x2F6   0x4681             MOV      R9,R0
    514                          goto cont_u;
   \      0x2F8   0xE018             B.N      ??printk_53
    515                      case 'p':
    516                          uval = (uint32)va_arg(ap, void *);
   \                     ??printk_34: (+1)
   \      0x2FA   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \      0x2FE   0xF11B 0x0B04      ADDS     R11,R11,#+4
   \      0x302   0x9002             STR      R0,[SP, #+8]
    517                          vlen = printk_mknumstr(vstr,&uval,FALSE,16);
   \      0x304   0x2310             MOVS     R3,#+16
   \      0x306   0x2200             MOVS     R2,#+0
   \      0x308   0xA902             ADD      R1,SP,#+8
   \      0x30A   0xA809             ADD      R0,SP,#+36
   \      0x30C   0x....'....        BL       printk_mknumstr
   \      0x310   0x4681             MOV      R9,R0
    518                          goto cont_u;
   \      0x312   0xE00B             B.N      ??printk_53
    519                      case 'u':
    520                          uval = (uint32)va_arg(ap, uint32);
   \                     ??printk_36: (+1)
   \      0x314   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \      0x318   0xF11B 0x0B04      ADDS     R11,R11,#+4
   \      0x31C   0x9002             STR      R0,[SP, #+8]
    521                          vlen = printk_mknumstr(vstr,&uval,FALSE,10);
   \      0x31E   0x230A             MOVS     R3,#+10
   \      0x320   0x2200             MOVS     R2,#+0
   \      0x322   0xA902             ADD      R1,SP,#+8
   \      0x324   0xA809             ADD      R0,SP,#+36
   \      0x326   0x....'....        BL       printk_mknumstr
   \      0x32A   0x4681             MOV      R9,R0
    522          
    523                          cont_u:
    524                              vstrp = &vstr[vlen];
   \                     ??printk_53: (+1)
   \      0x32C   0xA809             ADD      R0,SP,#+36
   \      0x32E   0x4448             ADD      R0,R0,R9
   \      0x330   0x4682             MOV      R10,R0
    525          
    526                              if (IS_FLAG_ZERO(flags_used))
   \      0x332   0x0730             LSLS     R0,R6,#+28
   \      0x334   0xD507             BPL.N    ??printk_54
    527                              {
    528                                  printk_pad_zero (vlen, field_width, &count, info);
   \      0x336   0x002B             MOVS     R3,R5
   \      0x338   0x466A             MOV      R2,SP
   \      0x33A   0x0039             MOVS     R1,R7
   \      0x33C   0x4648             MOV      R0,R9
   \      0x33E   0x....'....        BL       printk_pad_zero
    529                                  vlen = field_width;
   \      0x342   0x46B9             MOV      R9,R7
   \      0x344   0xE007             B.N      ??printk_47
    530                              }
    531                              else
    532                              {
    533                                  if (!IS_FLAG_MINUS(flags_used))
   \                     ??printk_54: (+1)
   \      0x346   0x07F0             LSLS     R0,R6,#+31
   \      0x348   0xD405             BMI.N    ??printk_47
    534                                  {
    535                                      printk_pad_space (vlen, field_width, &count, info);
   \      0x34A   0x002B             MOVS     R3,R5
   \      0x34C   0x466A             MOV      R2,SP
   \      0x34E   0x0039             MOVS     R1,R7
   \      0x350   0x4648             MOV      R0,R9
   \      0x352   0x....'....        BL       printk_pad_space
    536                                  }
    537                              }
    538          
    539                          cont_xd:
    540                              while (*vstrp)
   \                     ??printk_47: (+1)
   \      0x356   0xF99A 0x0000      LDRSB    R0,[R10, #+0]
   \      0x35A   0x2800             CMP      R0,#+0
   \      0x35C   0xD008             BEQ.N    ??printk_55
    541                                  printk_putc(*vstrp--, &count, info);
   \      0x35E   0x002A             MOVS     R2,R5
   \      0x360   0x4669             MOV      R1,SP
   \      0x362   0xF99A 0x0000      LDRSB    R0,[R10, #+0]
   \      0x366   0x....'....        BL       printk_putc
   \      0x36A   0xF1BA 0x0A01      SUBS     R10,R10,#+1
   \      0x36E   0xE7F2             B.N      ??printk_47
    542          
    543                              if (IS_FLAG_MINUS(flags_used))
   \                     ??printk_55: (+1)
   \      0x370   0x07F0             LSLS     R0,R6,#+31
   \      0x372   0xD505             BPL.N    ??printk_56
    544                              {
    545                                  printk_pad_space (vlen, field_width, &count, info);
   \      0x374   0x002B             MOVS     R3,R5
   \      0x376   0x466A             MOV      R2,SP
   \      0x378   0x0039             MOVS     R1,R7
   \      0x37A   0x4648             MOV      R0,R9
   \      0x37C   0x....'....        BL       printk_pad_space
    546                              }
    547                          break;
   \                     ??printk_56: (+1)
   \      0x380   0xE041             B.N      ??printk_5
    548          
    549                      case 'c':
    550                          cval = (int8)va_arg(ap, uint32);
   \                     ??printk_30: (+1)
   \      0x382   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \      0x386   0xF11B 0x0B04      ADDS     R11,R11,#+4
   \      0x38A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \      0x38C   0x9007             STR      R0,[SP, #+28]
    551                          printk_putc(cval,&count, info);
   \      0x38E   0x002A             MOVS     R2,R5
   \      0x390   0x4669             MOV      R1,SP
   \      0x392   0x9807             LDR      R0,[SP, #+28]
   \      0x394   0x....'....        BL       printk_putc
    552                          break;
   \      0x398   0xE035             B.N      ??printk_5
    553                      case 's':
    554                          sval = (int8 *)va_arg(ap, int8 *);
   \                     ??printk_35: (+1)
   \      0x39A   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \      0x39E   0xF11B 0x0B04      ADDS     R11,R11,#+4
   \      0x3A2   0x0004             MOVS     R4,R0
    555                          if (sval)
   \      0x3A4   0x2C00             CMP      R4,#+0
   \      0x3A6   0xD01F             BEQ.N    ??printk_57
    556                          {
    557                              vlen = strlen(sval);
   \      0x3A8   0x0020             MOVS     R0,R4
   \      0x3AA   0x....'....        BL       strlen
   \      0x3AE   0x4681             MOV      R9,R0
    558                              if (!IS_FLAG_MINUS(flags_used))
   \      0x3B0   0x07F0             LSLS     R0,R6,#+31
   \      0x3B2   0xD405             BMI.N    ??printk_58
    559                              {
    560                                  printk_pad_space (vlen, field_width, &count, info);
   \      0x3B4   0x002B             MOVS     R3,R5
   \      0x3B6   0x466A             MOV      R2,SP
   \      0x3B8   0x0039             MOVS     R1,R7
   \      0x3BA   0x4648             MOV      R0,R9
   \      0x3BC   0x....'....        BL       printk_pad_space
    561                              }
    562                              while (*sval)
   \                     ??printk_58: (+1)
   \      0x3C0   0xF994 0x0000      LDRSB    R0,[R4, #+0]
   \      0x3C4   0x2800             CMP      R0,#+0
   \      0x3C6   0xD007             BEQ.N    ??printk_59
    563                                  printk_putc(*sval++,&count, info);
   \      0x3C8   0x002A             MOVS     R2,R5
   \      0x3CA   0x4669             MOV      R1,SP
   \      0x3CC   0xF994 0x0000      LDRSB    R0,[R4, #+0]
   \      0x3D0   0x....'....        BL       printk_putc
   \      0x3D4   0x1C64             ADDS     R4,R4,#+1
   \      0x3D6   0xE7F3             B.N      ??printk_58
    564                              if (IS_FLAG_MINUS(flags_used))
   \                     ??printk_59: (+1)
   \      0x3D8   0x07F0             LSLS     R0,R6,#+31
   \      0x3DA   0xD505             BPL.N    ??printk_57
    565                              {
    566                                  printk_pad_space (vlen, field_width, &count, info);
   \      0x3DC   0x002B             MOVS     R3,R5
   \      0x3DE   0x466A             MOV      R2,SP
   \      0x3E0   0x0039             MOVS     R1,R7
   \      0x3E2   0x4648             MOV      R0,R9
   \      0x3E4   0x....'....        BL       printk_pad_space
    567                              }
    568                          }
    569                          break;
   \                     ??printk_57: (+1)
   \      0x3E8   0xE00D             B.N      ??printk_5
    570                      case 'n':
    571                          ivalp = (int32 *)va_arg(ap, int32 *);
   \                     ??printk_32: (+1)
   \      0x3EA   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \      0x3EE   0xF11B 0x0B04      ADDS     R11,R11,#+4
   \      0x3F2   0x9008             STR      R0,[SP, #+32]
    572                          *ivalp = count;
   \      0x3F4   0x9800             LDR      R0,[SP, #+0]
   \      0x3F6   0x9908             LDR      R1,[SP, #+32]
   \      0x3F8   0x6008             STR      R0,[R1, #+0]
    573                          break;
   \      0x3FA   0xE004             B.N      ??printk_5
    574                      default:
    575                          printk_putc(c,&count, info);
   \                     ??printk_37: (+1)
   \      0x3FC   0x002A             MOVS     R2,R5
   \      0x3FE   0x4669             MOV      R1,SP
   \      0x400   0x9801             LDR      R0,[SP, #+4]
   \      0x402   0x....'....        BL       printk_putc
    576                          break;
    577                  }
    578              }
   \                     ??printk_5: (+1)
   \      0x406   0xF118 0x0801      ADDS     R8,R8,#+1
   \      0x40A   0xE602             B.N      ??printk_0
    579              return count;
   \                     ??printk_1: (+1)
   \      0x40C   0x9800             LDR      R0,[SP, #+0]
   \      0x40E   0xB013             ADD      SP,SP,#+76
   \      0x410   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    580          }
    581          
    582          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    583          int32 printf (const int8 *fmt, ...)
    584          {
   \                     printf: (+1)
   \        0x0   0xB40E             PUSH     {R1-R3}
   \        0x2   0xB53F             PUSH     {R0-R5,LR}
   \        0x4   0x0004             MOVS     R4,R0
    585              va_list ap;
    586              int32 rvalue;
    587              PRINTK_INFO info;
    588          
    589          
    590              info.dest = DEST_CONSOLE;
   \        0x6   0x2001             MOVS     R0,#+1
   \        0x8   0x9000             STR      R0,[SP, #+0]
    591              info.func = &out_char;
   \        0xA   0x....             LDR.N    R0,??DataTable1
   \        0xC   0x9001             STR      R0,[SP, #+4]
    592              /*
    593               * Initialize the pointer to the variable length argument list.
    594               */
    595              va_start(ap, fmt);
   \        0xE   0xAD07             ADD      R5,SP,#+28
    596              rvalue = printk(&info, fmt, ap);
   \       0x10   0x002A             MOVS     R2,R5
   \       0x12   0x0021             MOVS     R1,R4
   \       0x14   0x4668             MOV      R0,SP
   \       0x16   0x....'....        BL       printk
    597              /*
    598               * Cleanup the variable length argument list.
    599               */
    600              va_end(ap);
    601              return rvalue;
   \       0x1A   0xB004             ADD      SP,SP,#+16
   \       0x1C   0xBC30             POP      {R4,R5}
   \       0x1E   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return
    602          }
    603          
    604          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    605          int32 sprintf (int8 *s, const int8 *fmt, ...)
    606          {
   \                     sprintf: (+1)
   \        0x0   0xB40C             PUSH     {R2,R3}
   \        0x2   0xB5FE             PUSH     {R1-R7,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
    607              va_list ap;
    608              int32 rvalue = 0;
   \        0x8   0x2700             MOVS     R7,#+0
    609              PRINTK_INFO info;
    610          
    611              /*
    612               * Initialize the pointer to the variable length argument list.
    613               */
    614              if (s != 0)
   \        0xA   0x2C00             CMP      R4,#+0
   \        0xC   0xD00D             BEQ.N    ??sprintf_0
    615              {
    616                  info.dest = DEST_STRING;
   \        0xE   0x2002             MOVS     R0,#+2
   \       0x10   0x9000             STR      R0,[SP, #+0]
    617                  info.loc = s;
   \       0x12   0x9402             STR      R4,[SP, #+8]
    618                  va_start(ap, fmt);
   \       0x14   0xA808             ADD      R0,SP,#+32
   \       0x16   0x0006             MOVS     R6,R0
    619                  rvalue = printk(&info, fmt, ap);
   \       0x18   0x0032             MOVS     R2,R6
   \       0x1A   0x0029             MOVS     R1,R5
   \       0x1C   0x4668             MOV      R0,SP
   \       0x1E   0x....'....        BL       printk
   \       0x22   0x0007             MOVS     R7,R0
    620                  *info.loc = '\0';
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0x9902             LDR      R1,[SP, #+8]
   \       0x28   0x7008             STRB     R0,[R1, #+0]
    621                  va_end(ap);
    622              }
    623              return rvalue;
   \                     ??sprintf_0: (+1)
   \       0x2A   0x0038             MOVS     R0,R7
   \       0x2C   0xBCFE             POP      {R1-R7}
   \       0x2E   0xF85D 0xFB0C      LDR      PC,[SP], #+12    ;; return
    624          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x....'....        DC32     out_char
    625          
    626          /********************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   printf
        40   -> printk
     112   printk
       112   -> printk_mknumstr
       112   -> printk_pad_space
       112   -> printk_pad_zero
       112   -> printk_putc
       112   -> strlen
      32   printk_mknumstr
      24   printk_pad_space
        24   -> printk_putc
      24   printk_pad_zero
        24   -> printk_putc
      16   printk_putc
        16   -- Indirect call
      40   sprintf
        40   -> printk


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
      34  printf
    1044  printk
     178  printk_mknumstr
      38  printk_pad_space
      38  printk_pad_zero
      50  printk_putc
      50  sprintf

 
 1 436 bytes in section .text
 
 1 436 bytes of CODE memory

Errors: none
Warnings: 1
