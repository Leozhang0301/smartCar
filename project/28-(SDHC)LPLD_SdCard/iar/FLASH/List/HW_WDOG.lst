###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.1.169/W32 for ARM         02/Jul/2019  17:59:19
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  G:\AIcar\@@\xiugai\lib\LPLD\HW\HW_WDOG.c
#    Command line =  
#        -f C:\Users\admin\AppData\Local\Temp\EW5DCC.tmp
#        (G:\AIcar\@@\xiugai\lib\LPLD\HW\HW_WDOG.c -D LPLD_K60 -lCN
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\List"
#        -lB
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\List"
#        -o "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        G:\AIcar\arm\inc\c\DLib_Config_Normal.h -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\app\" -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\CPU\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\common\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\HW\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\DEV\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Ports\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Source\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\option\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\common\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\driver\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\descriptor\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\class\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\Jay\"
#        -On -I G:\AIcar\arm\CMSIS\Core\Include\ -I
#        G:\AIcar\arm\CMSIS\DSP\Include\ -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\List\HW_WDOG.lst
#    Object file  =  
#        G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\Obj\HW_WDOG.o
#
###############################################################################

G:\AIcar\@@\xiugai\lib\LPLD\HW\HW_WDOG.c
      1          /**
      2           * @file HW_WDOG.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief WDOG底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"
     23          #include "HW_WDOG.h"
     24          
     25          static void LPLD_WDOG_Unlock(void);
     26          
     27          /*
     28           * LPLD_WDOG_Init
     29           * 看门狗初始化
     30           * 
     31           * 参数:
     32           *    period_ms--看门狗复位周期
     33           *      |__单位为毫秒
     34           *
     35           * 输出:
     36           *    0--配置错误
     37           *    1--配置成功
     38           */

   \                                 In section .text, align 2, keep-with-next
     39          uint8 LPLD_WDOG_Init(uint32 period_ms)
     40          {
   \                     LPLD_WDOG_Init: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
     41            uint8 presc = 3;
   \        0x4   0x2503             MOVS     R5,#+3
     42            uint32 bus_khz = g_bus_clock / 1000;
   \        0x6   0x....             LDR.N    R0,??DataTable4
   \        0x8   0x6800             LDR      R0,[R0, #+0]
   \        0xA   0xF44F 0x717A      MOV      R1,#+1000
   \        0xE   0xFBB0 0xF6F1      UDIV     R6,R0,R1
     43            uint32 value;
     44            
     45            if(period_ms==0)
   \       0x12   0x2C00             CMP      R4,#+0
   \       0x14   0xD101             BNE.N    ??LPLD_WDOG_Init_0
     46            {
     47              return 0;
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0xE01B             B.N      ??LPLD_WDOG_Init_1
     48            }
     49              
     50            value=(period_ms*bus_khz)/(presc+1);
   \                     ??LPLD_WDOG_Init_0: (+1)
   \       0x1A   0xFB06 0xF004      MUL      R0,R6,R4
   \       0x1E   0x0029             MOVS     R1,R5
   \       0x20   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x22   0x1C49             ADDS     R1,R1,#+1
   \       0x24   0xFBB0 0xF7F1      UDIV     R7,R0,R1
     51              
     52            //先解锁寄存器
     53            LPLD_WDOG_Unlock();
   \       0x28   0x....'....        BL       LPLD_WDOG_Unlock
     54            //设置分频
     55            WDOG->PRESC = WDOG_PRESC_PRESCVAL(presc);
   \       0x2C   0x0028             MOVS     R0,R5
   \       0x2E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x30   0x0200             LSLS     R0,R0,#+8
   \       0x32   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \       0x36   0x....             LDR.N    R1,??DataTable4_1  ;; 0x40052016
   \       0x38   0x8008             STRH     R0,[R1, #+0]
     56            //设置计时溢出值
     57            WDOG->TOVALH = (value&0xFFFF0000)>>16;
   \       0x3A   0x0038             MOVS     R0,R7
   \       0x3C   0x0C00             LSRS     R0,R0,#+16
   \       0x3E   0x....             LDR.N    R1,??DataTable4_2  ;; 0x40052004
   \       0x40   0x8008             STRH     R0,[R1, #+0]
     58            WDOG->TOVALL = (value&0x0000FFFF)>>0;  
   \       0x42   0x....             LDR.N    R0,??DataTable4_3  ;; 0x40052006
   \       0x44   0x8007             STRH     R7,[R0, #+0]
     59            //使能WDOG
     60            WDOG->STCTRLH |= WDOG_STCTRLH_WDOGEN_MASK;
   \       0x46   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40052000
   \       0x48   0x8801             LDRH     R1,[R0, #+0]
   \       0x4A   0xF051 0x0101      ORRS     R1,R1,#0x1
   \       0x4E   0x8001             STRH     R1,[R0, #+0]
     61            
     62            return 1;
   \       0x50   0x2001             MOVS     R0,#+1
   \                     ??LPLD_WDOG_Init_1: (+1)
   \       0x52   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     63          }
     64          
     65          /*
     66           * LPLD_WDOG_Enable
     67           * 看门狗使能
     68           * 
     69           * 参数:
     70           *    无
     71           *
     72           * 输出:
     73           *    无
     74           */

   \                                 In section .text, align 2, keep-with-next
     75          void LPLD_WDOG_Enable(void)
     76          {
   \                     LPLD_WDOG_Enable: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     77            //先解锁寄存器
     78            LPLD_WDOG_Unlock();
   \        0x2   0x....'....        BL       LPLD_WDOG_Unlock
     79            //使能WDOG
     80            WDOG->STCTRLH |= WDOG_STCTRLH_WDOGEN_MASK;
   \        0x6   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40052000
   \        0x8   0x8801             LDRH     R1,[R0, #+0]
   \        0xA   0xF051 0x0101      ORRS     R1,R1,#0x1
   \        0xE   0x8001             STRH     R1,[R0, #+0]
     81          }
   \       0x10   0xBD01             POP      {R0,PC}          ;; return
     82          
     83          /*
     84           * LPLD_WDOG_Disable
     85           * 看门狗禁用
     86           * 
     87           * 参数:
     88           *    无
     89           *
     90           * 输出:
     91           *    无
     92           */

   \                                 In section .text, align 2, keep-with-next
     93          void LPLD_WDOG_Disable(void)
     94          {
   \                     LPLD_WDOG_Disable: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     95            //先解锁寄存器
     96            LPLD_WDOG_Unlock();
   \        0x2   0x....'....        BL       LPLD_WDOG_Unlock
     97            //禁用WDOG
     98            WDOG->STCTRLH &= ~(WDOG_STCTRLH_WDOGEN_MASK);
   \        0x6   0x....             LDR.N    R1,??DataTable4_4  ;; 0x40052000
   \        0x8   0x880A             LDRH     R2,[R1, #+0]
   \        0xA   0xF64F 0x70FE      MOVW     R0,#+65534
   \        0xE   0x4002             ANDS     R2,R0,R2
   \       0x10   0x800A             STRH     R2,[R1, #+0]
     99          }
   \       0x12   0xBD01             POP      {R0,PC}          ;; return
    100          
    101          /*
    102           * LPLD_WDOG_Feed
    103           * 喂狗
    104           * 
    105           * 参数:
    106           *    无
    107           *
    108           * 输出:
    109           *    无
    110           */

   \                                 In section .text, align 2, keep-with-next
    111          void LPLD_WDOG_Feed(void)
    112          {
    113            WDOG->REFRESH = 0xA602;
   \                     LPLD_WDOG_Feed: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable4_5  ;; 0x4005200c
   \        0x2   0xF24A 0x6102      MOVW     R1,#+42498
   \        0x6   0x8001             STRH     R1,[R0, #+0]
    114            WDOG->REFRESH = 0xB480;
   \        0x8   0xF24B 0x4180      MOVW     R1,#+46208
   \        0xC   0x8001             STRH     R1,[R0, #+0]
    115          }
   \        0xE   0x4770             BX       LR               ;; return
    116          
    117          /*
    118           * LPLD_WDOG_Unlock
    119           * WDOG解锁函数，内部调用
    120           * 
    121           * 参数:
    122           *    无
    123           *
    124           * 输出:
    125           *    无
    126           */

   \                                 In section .text, align 2, keep-with-next
    127          static void LPLD_WDOG_Unlock(void)
    128          {
    129            //以下代码必须在20个时钟周期内完成，否则会复位
    130            DisableInterrupts;
   \                     LPLD_WDOG_Unlock: (+1)
   \        0x0   0xB672             CPSID    I
    131            
    132            //写0xC520来解锁寄存器
    133            WDOG->UNLOCK = 0xC520;
   \        0x2   0x....             LDR.N    R0,??DataTable4_6  ;; 0x4005200e
   \        0x4   0xF24C 0x5120      MOVW     R1,#+50464
   \        0x8   0x8001             STRH     R1,[R0, #+0]
    134            
    135            //接下来写0xD928完成解锁
    136            WDOG->UNLOCK = 0xD928;
   \        0xA   0xF64D 0x1128      MOVW     R1,#+55592
   \        0xE   0x8001             STRH     R1,[R0, #+0]
    137            	
    138            EnableInterrupts;
   \       0x10   0xB662             CPSIE    I
    139          }
   \       0x12   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \        0x0   0x....'....        DC32     g_bus_clock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \        0x0   0x4005'2016        DC32     0x40052016

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \        0x0   0x4005'2004        DC32     0x40052004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \        0x0   0x4005'2006        DC32     0x40052006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \        0x0   0x4005'2000        DC32     0x40052000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \        0x0   0x4005'200C        DC32     0x4005200c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \        0x0   0x4005'200E        DC32     0x4005200e

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   LPLD_WDOG_Disable
         8   -> LPLD_WDOG_Unlock
       8   LPLD_WDOG_Enable
         8   -> LPLD_WDOG_Unlock
       0   LPLD_WDOG_Feed
      24   LPLD_WDOG_Init
        24   -> LPLD_WDOG_Unlock
       0   LPLD_WDOG_Unlock


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
      20  LPLD_WDOG_Disable
      18  LPLD_WDOG_Enable
      16  LPLD_WDOG_Feed
      84  LPLD_WDOG_Init
      20  LPLD_WDOG_Unlock

 
 186 bytes in section .text
 
 186 bytes of CODE memory

Errors: none
Warnings: 1
