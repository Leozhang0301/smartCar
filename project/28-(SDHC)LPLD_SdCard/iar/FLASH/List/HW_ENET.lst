###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.1.169/W32 for ARM         02/Jul/2019  17:59:15
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  G:\AIcar\@@\xiugai\lib\LPLD\HW\HW_ENET.c
#    Command line =  
#        -f C:\Users\admin\AppData\Local\Temp\EW4DEC.tmp
#        (G:\AIcar\@@\xiugai\lib\LPLD\HW\HW_ENET.c -D LPLD_K60 -lCN
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\List"
#        -lB
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\List"
#        -o "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        G:\AIcar\arm\inc\c\DLib_Config_Normal.h -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\app\" -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\CPU\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\common\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\HW\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\DEV\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Ports\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Source\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\option\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\common\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\driver\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\descriptor\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\class\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\Jay\"
#        -On -I G:\AIcar\arm\CMSIS\Core\Include\ -I
#        G:\AIcar\arm\CMSIS\DSP\Include\ -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\List\HW_ENET.lst
#    Object file  =  
#        G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\Obj\HW_ENET.o
#
###############################################################################

G:\AIcar\@@\xiugai\lib\LPLD\HW\HW_ENET.c
      1          /**
      2           * @file HW_ENET.c
      3           * @version 3.01[By LPLD]
      4           * @date 2013-10-21
      5           * @brief ENET底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_EnableIRQ(IRQn_Type)
   \                     __NVIC_EnableIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD40A             BMI.N    ??__NVIC_EnableIRQ_0
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0xE   0x408A             LSLS     R2,R2,R1
   \       0x10   0x....'....        LDR.W    R1,??DataTable14  ;; 0xe000e100
   \       0x14   0x0003             MOVS     R3,R0
   \       0x16   0xB25B             SXTB     R3,R3            ;; SignExt  R3,R3,#+24,#+24
   \       0x18   0x095B             LSRS     R3,R3,#+5
   \       0x1A   0xF841 0x2023      STR      R2,[R1, R3, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \       0x1E   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
   \   static __absolute uint8 xENETTxDescriptors_unaligned[24]
   \                     xENETTxDescriptors_unaligned:
   \        0x0                      DS8 24

   \                                 In section .bss, align 4
   \   static __absolute uint8 xENETRxDescriptors_unaligned[80]
   \                     xENETRxDescriptors_unaligned:
   \        0x0                      DS8 80

   \                                 In section .bss, align 4
   \   static __absolute uint8 ucENETRxBuffers[2064]
   \                     ucENETRxBuffers:
   \        0x0                      DS8 2064

   \                                 In section .bss, align 4
   \   static __absolute ENET_NbufTypeDef *xENETTxDescriptors
   \                     xENETTxDescriptors:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
   \   static __absolute ENET_NbufTypeDef *xENETRxDescriptors
   \                     xENETRxDescriptors:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
   \   static __absolute uint32 uxNextRxBuffer
   \                     uxNextRxBuffer:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
   \   static __absolute uint32 uxNextTxBuffer
   \                     uxNextTxBuffer:
   \        0x0                      DS8 4
     23          #include "HW_ENET.h"
     24          
     25          //用户自定义中断服务函数数组

   \                                 In section .bss, align 4
     26          ENET_ISR_CALLBACK ENET_ISR[4]={NULL, NULL, NULL, NULL};
   \                     ENET_ISR:
   \        0x0                      DS8 16
     27          
     28          //内部函数声明
     29          static void LPLD_ENET_BDInit( void );
     30          static void LPLD_ENET_Delay(uint32 time);
     31          
     32          
     33          /*******************************************************************
     34           *
     35           *                ENET模块函数
     36           *
     37          *******************************************************************/
     38          
     39          /*
     40           * LPLD_ENET_Init
     41           * ENET模块初始化，包括PHY收发器初始化，MAC初始化，BD初始化
     42           * 
     43           * 参数:
     44           *    enet_init_struct--ENET初始化结构体，
     45           *                        具体定义见ENET_InitTypeDef
     46           *
     47           * 输出:
     48           *    无
     49           */

   \                                 In section .text, align 4, keep-with-next
     50          void LPLD_ENET_Init(ENET_InitTypeDef enet_init_struct)
     51          {
   \                     LPLD_ENET_Init: (+1)
   \        0x0   0xB40F             PUSH     {R0-R3}
   \        0x2   0xB538             PUSH     {R3-R5,LR}
     52           
     53            uint16 usData;
     54           
     55            //使能ENET时钟
     56            SIM->SCGC2 |= SIM_SCGC2_ENET_MASK;
   \        0x4   0x....'....        LDR.W    R0,??DataTable14_1  ;; 0x4004802c
   \        0x8   0x6801             LDR      R1,[R0, #+0]
   \        0xA   0xF051 0x0101      ORRS     R1,R1,#0x1
   \        0xE   0x6001             STR      R1,[R0, #+0]
     57          
     58            //允许并发访问MPU控制器
     59            MPU->CESR = 0;         
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0x....'....        LDR.W    R1,??DataTable14_2  ;; 0x4000d000
   \       0x16   0x6008             STR      R0,[R1, #+0]
     60                  
     61            //缓冲区描述符初始化
     62            LPLD_ENET_BDInit();
   \       0x18   0x....'....        BL       LPLD_ENET_BDInit
     63            
     64            //复位ENET
     65            ENET->ECR = ENET_ECR_RESET_MASK;
   \       0x1C   0x....'....        LDR.W    R4,??DataTable14_3  ;; 0x400c0024
   \       0x20   0x2001             MOVS     R0,#+1
   \       0x22   0x6020             STR      R0,[R4, #+0]
     66          
     67            //等待至少8个时钟周期
     68            for( usData = 0; usData < 10; usData++ )
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \                     ??LPLD_ENET_Init_0: (+1)
   \       0x2A   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \       0x2E   0x280A             CMP      R0,#+10
   \       0x30   0xDA06             BGE.N    ??LPLD_ENET_Init_1
     69            {
     70              asm( "NOP" );
   \       0x32   0xBF00             NOP
     71            }
   \       0x34   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \       0x38   0x1C40             ADDS     R0,R0,#+1
   \       0x3A   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \       0x3E   0xE7F4             B.N      ??LPLD_ENET_Init_0
     72              
     73            //初始化MII接口
     74            LPLD_ENET_MiiInit(g_bus_clock/1000000/*MHz*/);       
   \                     ??LPLD_ENET_Init_1: (+1)
   \       0x40   0x....'....        LDR.W    R0,??DataTable14_4
   \       0x44   0x6800             LDR      R0,[R0, #+0]
   \       0x46   0x....'....        LDR.W    R1,??DataTable14_5  ;; 0xf4240
   \       0x4A   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \       0x4E   0x....'....        BL       LPLD_ENET_MiiInit
     75                  
     76            //使能中断并设置优先级
     77            //set_irq_priority (76, 6);
     78            enable_irq(ENET_Transmit_IRQn);        //ENET发送中断
   \       0x52   0x204C             MOVS     R0,#+76
   \       0x54   0x....'....        BL       __NVIC_EnableIRQ
     79            //set_irq_priority (77, 6);
     80            enable_irq(ENET_Receive_IRQn);         //ENET接收中断
   \       0x58   0x204D             MOVS     R0,#+77
   \       0x5A   0x....'....        BL       __NVIC_EnableIRQ
     81            //set_irq_priority (78, 6);
     82            enable_irq(ENET_Error_IRQn);           //ENET错误及其他中断
   \       0x5E   0x204E             MOVS     R0,#+78
   \       0x60   0x....'....        BL       __NVIC_EnableIRQ
     83            
     84            if(enet_init_struct.ENET_TxIsr != NULL)
   \       0x64   0x9805             LDR      R0,[SP, #+20]
   \       0x66   0x2800             CMP      R0,#+0
   \       0x68   0xD003             BEQ.N    ??LPLD_ENET_Init_2
     85            {
     86              ENET_ISR[ENET_TXF_ISR] = enet_init_struct.ENET_TxIsr;
   \       0x6A   0x9805             LDR      R0,[SP, #+20]
   \       0x6C   0x....'....        LDR.W    R1,??DataTable14_6
   \       0x70   0x6048             STR      R0,[R1, #+4]
     87            }
     88            if(enet_init_struct.ENET_RxIsr != NULL)
   \                     ??LPLD_ENET_Init_2: (+1)
   \       0x72   0x9806             LDR      R0,[SP, #+24]
   \       0x74   0x2800             CMP      R0,#+0
   \       0x76   0xD003             BEQ.N    ??LPLD_ENET_Init_3
     89            {
     90              ENET_ISR[ENET_RXF_ISR] = enet_init_struct.ENET_RxIsr;
   \       0x78   0x9806             LDR      R0,[SP, #+24]
   \       0x7A   0x....'....        LDR.W    R1,??DataTable14_6
   \       0x7E   0x6008             STR      R0,[R1, #+0]
     91            }
     92            if(enet_init_struct.ENET_1588Isr != NULL)
   \                     ??LPLD_ENET_Init_3: (+1)
   \       0x80   0x9807             LDR      R0,[SP, #+28]
   \       0x82   0x2800             CMP      R0,#+0
   \       0x84   0xD003             BEQ.N    ??LPLD_ENET_Init_4
     93            {
     94              ENET_ISR[ENET_1588_ISR] = enet_init_struct.ENET_1588Isr;
   \       0x86   0x9807             LDR      R0,[SP, #+28]
   \       0x88   0x....'....        LDR.W    R1,??DataTable14_6
   \       0x8C   0x6088             STR      R0,[R1, #+8]
     95            }
     96            if(enet_init_struct.ENET_ErrIsr != NULL)
   \                     ??LPLD_ENET_Init_4: (+1)
   \       0x8E   0x9808             LDR      R0,[SP, #+32]
   \       0x90   0x2800             CMP      R0,#+0
   \       0x92   0xD003             BEQ.N    ??LPLD_ENET_Init_5
     97            {
     98              ENET_ISR[ENET_ERR_ISR] = enet_init_struct.ENET_ErrIsr;
   \       0x94   0x9808             LDR      R0,[SP, #+32]
   \       0x96   0x....'....        LDR.W    R1,??DataTable14_6
   \       0x9A   0x60C8             STR      R0,[R1, #+12]
     99            }
    100          
    101            //使能GPIO引脚复用功能
    102            PORTB->PCR[0]  = PORT_PCR_MUX(4);  //GPIO;//RMII0_MDIO/MII0_MDIO
   \                     ??LPLD_ENET_Init_5: (+1)
   \       0x9C   0xF44F 0x6080      MOV      R0,#+1024
   \       0xA0   0x....'....        LDR.W    R1,??DataTable14_7  ;; 0x4004a000
   \       0xA4   0x6008             STR      R0,[R1, #+0]
    103            PORTB->PCR[1]  = PORT_PCR_MUX(4);  //GPIO;//RMII0_MDC/MII0_MDC    
   \       0xA6   0x....'....        LDR.W    R1,??DataTable14_8  ;; 0x4004a004
   \       0xAA   0x6008             STR      R0,[R1, #+0]
    104            PORTA->PCR[14] = PORT_PCR_MUX(4);  //RMII0_CRS_DV/MII0_RXDV
   \       0xAC   0x....'....        LDR.W    R1,??DataTable14_9  ;; 0x40049038
   \       0xB0   0x6008             STR      R0,[R1, #+0]
    105            PORTA->PCR[12] = PORT_PCR_MUX(4);  //RMII0_RXD1/MII0_RXD1
   \       0xB2   0x....'....        LDR.W    R1,??DataTable14_10  ;; 0x40049030
   \       0xB6   0x6008             STR      R0,[R1, #+0]
    106            PORTA->PCR[13] = PORT_PCR_MUX(4);  //RMII0_RXD0/MII0_RXD0
   \       0xB8   0x....'....        LDR.W    R1,??DataTable14_11  ;; 0x40049034
   \       0xBC   0x6008             STR      R0,[R1, #+0]
    107            PORTA->PCR[15] = PORT_PCR_MUX(4);  //RMII0_TXEN/MII0_TXEN
   \       0xBE   0x....'....        LDR.W    R1,??DataTable14_12  ;; 0x4004903c
   \       0xC2   0x6008             STR      R0,[R1, #+0]
    108            PORTA->PCR[16] = PORT_PCR_MUX(4);  //RMII0_TXD0/MII0_TXD0
   \       0xC4   0x....'....        LDR.W    R1,??DataTable14_13  ;; 0x40049040
   \       0xC8   0x6008             STR      R0,[R1, #+0]
    109            PORTA->PCR[17] = PORT_PCR_MUX(4);  //RMII0_TXD1/MII0_TXD1
   \       0xCA   0x....'....        LDR.W    R1,??DataTable14_14  ;; 0x40049044
   \       0xCE   0x6008             STR      R0,[R1, #+0]
    110            
    111              
    112            //等待PHY收发器复位完成
    113            do
    114            {
    115              LPLD_ENET_Delay( ENET_LINK_DELAY );
   \                     ??LPLD_ENET_Init_6: (+1)
   \       0xD0   0x2001             MOVS     R0,#+1
   \       0xD2   0x....'....        BL       LPLD_ENET_Delay
    116              usData = 0xffff;
   \       0xD6   0xF64F 0x75FF      MOVW     R5,#+65535
   \       0xDA   0x0028             MOVS     R0,R5
   \       0xDC   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    117              LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_PHYIDR1, &usData );     
   \       0xE0   0x466A             MOV      R2,SP
   \       0xE2   0x2102             MOVS     R1,#+2
   \       0xE4   0x2001             MOVS     R0,#+1
   \       0xE6   0x....'....        BL       LPLD_ENET_MiiRead
    118            } while( usData == 0xffff );
   \       0xEA   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \       0xEE   0x42A8             CMP      R0,R5
   \       0xF0   0xD0EE             BEQ.N    ??LPLD_ENET_Init_6
    119          
    120          #ifdef ENET_PRINT_PHY_INFO
    121            printf("PHY_PHYIDR1=0x%X\r\n",usData);
   \       0xF2   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \       0xF6   0x....'....        LDR.W    R0,??DataTable14_15
   \       0xFA   0x....'....        BL       printf
    122            LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_PHYIDR2, &usData );
   \       0xFE   0x466A             MOV      R2,SP
   \      0x100   0x2103             MOVS     R1,#+3
   \      0x102   0x2001             MOVS     R0,#+1
   \      0x104   0x....'....        BL       LPLD_ENET_MiiRead
    123            printf("PHY_PHYIDR2=0x%X\r\n",usData); 
   \      0x108   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \      0x10C   0x....'....        LDR.W    R0,??DataTable14_16
   \      0x110   0x....'....        BL       printf
    124            LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_ANLPAR, &usData );
   \      0x114   0x466A             MOV      R2,SP
   \      0x116   0x2105             MOVS     R1,#+5
   \      0x118   0x2001             MOVS     R0,#+1
   \      0x11A   0x....'....        BL       LPLD_ENET_MiiRead
    125            printf("PHY_ANLPAR=0x%X\r\n",usData);
   \      0x11E   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \      0x122   0x....'....        LDR.W    R0,??DataTable14_17
   \      0x126   0x....'....        BL       printf
    126            LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_ANLPARNP, &usData );
   \      0x12A   0x466A             MOV      R2,SP
   \      0x12C   0x2105             MOVS     R1,#+5
   \      0x12E   0x2001             MOVS     R0,#+1
   \      0x130   0x....'....        BL       LPLD_ENET_MiiRead
    127            printf("PHY_ANLPARNP=0x%X\r\n",usData);
   \      0x134   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \      0x138   0x....'....        LDR.W    R0,??DataTable14_18
   \      0x13C   0x....'....        BL       printf
    128            LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_PHYSTS, &usData );
   \      0x140   0x466A             MOV      R2,SP
   \      0x142   0x2110             MOVS     R1,#+16
   \      0x144   0x2001             MOVS     R0,#+1
   \      0x146   0x....'....        BL       LPLD_ENET_MiiRead
    129            printf("PHY_PHYSTS=0x%X\r\n",usData);
   \      0x14A   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \      0x14E   0x....'....        LDR.W    R0,??DataTable14_19
   \      0x152   0x....'....        BL       printf
    130            LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_MICR, &usData );
   \      0x156   0x466A             MOV      R2,SP
   \      0x158   0x2111             MOVS     R1,#+17
   \      0x15A   0x2001             MOVS     R0,#+1
   \      0x15C   0x....'....        BL       LPLD_ENET_MiiRead
    131            printf("PHY_MICR=0x%X\r\n",usData);
   \      0x160   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \      0x164   0x....'....        LDR.W    R0,??DataTable14_20
   \      0x168   0x....'....        BL       printf
    132            LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_MISR, &usData );
   \      0x16C   0x466A             MOV      R2,SP
   \      0x16E   0x2112             MOVS     R1,#+18
   \      0x170   0x2001             MOVS     R0,#+1
   \      0x172   0x....'....        BL       LPLD_ENET_MiiRead
    133            printf("PHY_MISR=0x%X\r\n",usData);
   \      0x176   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \      0x17A   0x....'....        LDR.W    R0,??DataTable14_21
   \      0x17E   0x....'....        BL       printf
    134          #endif 
    135            
    136            //开始自动协商
    137            LPLD_ENET_MiiWrite(CFG_PHY_ADDRESS, PHY_BMCR, ( PHY_BMCR_AN_RESTART | PHY_BMCR_AN_ENABLE ) );
   \      0x182   0xF44F 0x5290      MOV      R2,#+4608
   \      0x186   0x2100             MOVS     R1,#+0
   \      0x188   0x2001             MOVS     R0,#+1
   \      0x18A   0x....'....        BL       LPLD_ENET_MiiWrite
    138          
    139          #ifdef ENET_PRINT_PHY_INFO
    140            LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_BMCR, &usData );
   \      0x18E   0x466A             MOV      R2,SP
   \      0x190   0x2100             MOVS     R1,#+0
   \      0x192   0x2001             MOVS     R0,#+1
   \      0x194   0x....'....        BL       LPLD_ENET_MiiRead
    141            printf("PHY_BMCR=0x%X\r\n",usData);
   \      0x198   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \      0x19C   0x....'....        LDR.W    R0,??DataTable14_22
   \      0x1A0   0x....'....        BL       printf
    142          #endif 
    143            
    144            //等待自动协商完成
    145            do
    146            {
    147              LPLD_ENET_Delay( ENET_LINK_DELAY );
   \                     ??LPLD_ENET_Init_7: (+1)
   \      0x1A4   0x2001             MOVS     R0,#+1
   \      0x1A6   0x....'....        BL       LPLD_ENET_Delay
    148              LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_BMSR, &usData );
   \      0x1AA   0x466A             MOV      R2,SP
   \      0x1AC   0x2101             MOVS     R1,#+1
   \      0x1AE   0x2001             MOVS     R0,#+1
   \      0x1B0   0x....'....        BL       LPLD_ENET_MiiRead
    149          
    150            } while( !( usData & PHY_BMSR_AN_COMPLETE ) );
   \      0x1B4   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \      0x1B8   0x0680             LSLS     R0,R0,#+26
   \      0x1BA   0xD5F3             BPL.N    ??LPLD_ENET_Init_7
    151          
    152          #ifdef ENET_PRINT_PHY_INFO
    153              printf("PHY_BMSR=0x%X\r\n",usData);
   \      0x1BC   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \      0x1C0   0x....'....        LDR.W    R0,??DataTable14_23
   \      0x1C4   0x....'....        BL       printf
    154          #endif 
    155              
    156            //根据协商结果设置ENET模块
    157            LPLD_ENET_MiiRead(CFG_PHY_ADDRESS, PHY_STATUS, &usData );  
   \      0x1C8   0x466A             MOV      R2,SP
   \      0x1CA   0x2110             MOVS     R1,#+16
   \      0x1CC   0x2001             MOVS     R0,#+1
   \      0x1CE   0x....'....        BL       LPLD_ENET_MiiRead
    158          
    159          #ifdef ENET_PRINT_PHY_INFO
    160            printf("PHY_STATUS=0x%X\r\n",usData);
   \      0x1D2   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \      0x1D6   0x....'....        LDR.W    R0,??DataTable14_24
   \      0x1DA   0x....'....        BL       printf
    161          #endif 
    162            
    163            //清除单独和组地址哈希寄存器
    164            ENET->IALR = 0;
   \      0x1DE   0x2000             MOVS     R0,#+0
   \      0x1E0   0x....'....        LDR.W    R1,??DataTable14_25  ;; 0x400c011c
   \      0x1E4   0x6008             STR      R0,[R1, #+0]
    165            ENET->IAUR = 0;
   \      0x1E6   0x2000             MOVS     R0,#+0
   \      0x1E8   0x....'....        LDR.W    R1,??DataTable14_26  ;; 0x400c0118
   \      0x1EC   0x6008             STR      R0,[R1, #+0]
    166            ENET->GALR = 0;
   \      0x1EE   0x2000             MOVS     R0,#+0
   \      0x1F0   0x....'....        LDR.W    R1,??DataTable14_27  ;; 0x400c0124
   \      0x1F4   0x6008             STR      R0,[R1, #+0]
    167            ENET->GAUR = 0;
   \      0x1F6   0x2000             MOVS     R0,#+0
   \      0x1F8   0x....'....        LDR.W    R1,??DataTable14_28  ;; 0x400c0120
   \      0x1FC   0x6008             STR      R0,[R1, #+0]
    168            
    169            //设置ENET模块MAC地址
    170            LPLD_ENET_SetAddress(enet_init_struct.ENET_MacAddress);
   \      0x1FE   0x9804             LDR      R0,[SP, #+16]
   \      0x200   0x....'....        BL       LPLD_ENET_SetAddress
    171              
    172            //设置接收控制寄存器，最大长度、RMII模式、接收CRC校验等
    173            ENET->RCR = ENET_RCR_MAX_FL(CFG_ENET_MAX_PACKET_SIZE) | ENET_RCR_MII_MODE_MASK | ENET_RCR_CRCFWD_MASK | ENET_RCR_RMII_MODE_MASK;
   \      0x204   0x....'....        LDR.W    R0,??DataTable14_29  ;; 0x400c0084
   \      0x208   0x....'....        LDR.W    R1,??DataTable14_30  ;; 0x5f04104
   \      0x20C   0x6001             STR      R1,[R0, #+0]
    174          
    175            //清除发送接收控制
    176            ENET->TCR = 0;
   \      0x20E   0x....'....        LDR.W    R1,??DataTable14_31  ;; 0x400c00c4
   \      0x212   0x2200             MOVS     R2,#+0
   \      0x214   0x600A             STR      R2,[R1, #+0]
    177                  
    178            //通讯方式设置
    179            if( usData & PHY_DUPLEX_STATUS )
   \      0x216   0xF8BD 0x2000      LDRH     R2,[SP, #+0]
   \      0x21A   0x0752             LSLS     R2,R2,#+29
   \      0x21C   0xD508             BPL.N    ??LPLD_ENET_Init_8
    180            {
    181              //全双工
    182              ENET->RCR &= (uint32)~ENET_RCR_DRT_MASK;
   \      0x21E   0x6802             LDR      R2,[R0, #+0]
   \      0x220   0xF032 0x0202      BICS     R2,R2,#0x2
   \      0x224   0x6002             STR      R2,[R0, #+0]
    183              ENET->TCR |= ENET_TCR_FDEN_MASK;
   \      0x226   0x680A             LDR      R2,[R1, #+0]
   \      0x228   0xF052 0x0204      ORRS     R2,R2,#0x4
   \      0x22C   0x600A             STR      R2,[R1, #+0]
   \      0x22E   0xE007             B.N      ??LPLD_ENET_Init_9
    184            }
    185            else
    186            {
    187              //半双工
    188              ENET->RCR |= ENET_RCR_DRT_MASK;
   \                     ??LPLD_ENET_Init_8: (+1)
   \      0x230   0x6802             LDR      R2,[R0, #+0]
   \      0x232   0xF052 0x0202      ORRS     R2,R2,#0x2
   \      0x236   0x6002             STR      R2,[R0, #+0]
    189              ENET->TCR &= (uint32)~ENET_TCR_FDEN_MASK;
   \      0x238   0x680A             LDR      R2,[R1, #+0]
   \      0x23A   0xF032 0x0204      BICS     R2,R2,#0x4
   \      0x23E   0x600A             STR      R2,[R1, #+0]
    190            }
    191            
    192            //通信速率设置
    193            if( usData & PHY_SPEED_STATUS )
   \                     ??LPLD_ENET_Init_9: (+1)
   \      0x240   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \      0x244   0x0789             LSLS     R1,R1,#+30
   \      0x246   0xD503             BPL.N    ??LPLD_ENET_Init_10
    194            {
    195              //10Mbps
    196              ENET->RCR |= ENET_RCR_RMII_10T_MASK;
   \      0x248   0x6801             LDR      R1,[R0, #+0]
   \      0x24A   0xF451 0x7100      ORRS     R1,R1,#0x200
   \      0x24E   0x6001             STR      R1,[R0, #+0]
    197            }
    198          
    199            //使用非增强型缓冲区描述符
    200            ENET->ECR = 0;
   \                     ??LPLD_ENET_Init_10: (+1)
   \      0x250   0x2000             MOVS     R0,#+0
   \      0x252   0x6020             STR      R0,[R4, #+0]
    201            
    202            
    203            //设置接收缓冲区长度
    204            ENET->MRBR = (unsigned short) CFG_ENET_RX_BUFFER_SIZE;
   \      0x254   0xF44F 0x7080      MOV      R0,#+256
   \      0x258   0x....'....        LDR.W    R1,??DataTable14_32  ;; 0x400c0188
   \      0x25C   0x6008             STR      R0,[R1, #+0]
    205          
    206            //指向环形接收缓冲区描述符序列的头地址
    207            ENET->RDSR = ( uint32 ) &( xENETRxDescriptors[ 0 ] );
   \      0x25E   0x....'....        LDR.W    R0,??DataTable14_33
   \      0x262   0x6800             LDR      R0,[R0, #+0]
   \      0x264   0x....'....        LDR.W    R1,??DataTable14_34  ;; 0x400c0180
   \      0x268   0x6008             STR      R0,[R1, #+0]
    208          
    209            //指向环形发送缓冲区描述符序列的头地址
    210            ENET->TDSR = ( uint32 ) xENETTxDescriptors;
   \      0x26A   0x....'....        LDR.W    R0,??DataTable14_35
   \      0x26E   0x6800             LDR      R0,[R0, #+0]
   \      0x270   0x....'....        LDR.W    R1,??DataTable14_36  ;; 0x400c0184
   \      0x274   0x6008             STR      R0,[R1, #+0]
    211          
    212            //清除ENET中断事件
    213            ENET->EIR = ( uint32 ) -1;
   \      0x276   0xF05F 0x30FF      MOVS     R0,#-1
   \      0x27A   0x....'....        LDR.W    R1,??DataTable14_37  ;; 0x400c0004
   \      0x27E   0x6008             STR      R0,[R1, #+0]
    214          
    215            //使能中断
    216            ENET->EIMR = 0 
    217                      | ENET_EIMR_RXF_MASK  //接收中断
    218                      | ENET_EIMR_TXF_MASK  //发送中断
    219                      //ENET中断
    220                      | ENET_EIMR_UN_MASK | ENET_EIMR_RL_MASK | ENET_EIMR_LC_MASK | ENET_EIMR_BABT_MASK | ENET_EIMR_BABR_MASK | ENET_EIMR_EBERR_MASK
    221                      | ENET_EIMR_RXB_MASK
    222                      ;
   \      0x280   0x....'....        LDR.W    R0,??DataTable14_38  ;; 0x6b780000
   \      0x284   0x....'....        LDR.W    R1,??DataTable14_39  ;; 0x400c0008
   \      0x288   0x6008             STR      R0,[R1, #+0]
    223          
    224            //使能ENET模块
    225            ENET->ECR |= ENET_ECR_ETHEREN_MASK;
   \      0x28A   0x6820             LDR      R0,[R4, #+0]
   \      0x28C   0xF050 0x0002      ORRS     R0,R0,#0x2
   \      0x290   0x6020             STR      R0,[R4, #+0]
    226          
    227            //表明接收缓冲区为空
    228            ENET->RDAR = ENET_RDAR_RDAR_MASK;
   \      0x292   0xF05F 0x7080      MOVS     R0,#+16777216
   \      0x296   0x....'....        LDR.W    R1,??DataTable14_40  ;; 0x400c0010
   \      0x29A   0x6008             STR      R0,[R1, #+0]
    229          }
   \      0x29C   0xBC31             POP      {R0,R4,R5}
   \      0x29E   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    230          
    231          
    232          /*
    233           * LPLD_ENET_SetIsr
    234           * ENET模块中断函数设置
    235           * 
    236           * 参数:
    237           *    type--中断类型
    238           *      |__ENET_RXF_ISR   -接收中断
    239           *      |__ENET_TXF_ISR   -发送中断
    240           *    isr_func--用户中断程序入口地址
    241           *      |__用户在工程文件下定义的中断函数名，函数必须为:无返回值,无参数(eg. void isr(void);)
    242           *
    243           * 输出:
    244           *    0--配置错误
    245           *    1--配置成功
    246           *
    247           */

   \                                 In section .text, align 2, keep-with-next
    248          uint8 LPLD_ENET_SetIsr(uint8 type, ENET_ISR_CALLBACK isr_func)
    249          {
   \                     LPLD_ENET_SetIsr: (+1)
   \        0x0   0x0002             MOVS     R2,R0
    250            if(type>4)
   \        0x2   0x0010             MOVS     R0,R2
   \        0x4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \        0x6   0x2805             CMP      R0,#+5
   \        0x8   0xDB01             BLT.N    ??LPLD_ENET_SetIsr_0
    251              return 0;
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0xE006             B.N      ??LPLD_ENET_SetIsr_1
    252            
    253            ENET_ISR[type] = isr_func;
   \                     ??LPLD_ENET_SetIsr_0: (+1)
   \        0xE   0x....'....        LDR.W    R0,??DataTable14_6
   \       0x12   0x0013             MOVS     R3,R2
   \       0x14   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0x16   0xF840 0x1023      STR      R1,[R0, R3, LSL #+2]
    254            return 1;
   \       0x1A   0x2001             MOVS     R0,#+1
   \                     ??LPLD_ENET_SetIsr_1: (+1)
   \       0x1C   0x4770             BX       LR               ;; return
    255          }
    256          
    257          
    258          /*
    259           * Eth_RX_IRQHandler
    260           * ENET接收中断底层入口函数
    261           * 
    262           * 用户无需修改，程序自动进入对应通道中断函数
    263           */

   \                                 In section .text, align 2, keep-with-next
    264          void Eth_RX_IRQHandler(void)
    265          {   
   \                     Eth_RX_IRQHandler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    266            ENET->EIR |= ENET_EIMR_RXF_MASK; 
   \        0x2   0x....'....        LDR.W    R0,??DataTable14_37  ;; 0x400c0004
   \        0x6   0x6801             LDR      R1,[R0, #+0]
   \        0x8   0xF051 0x7100      ORRS     R1,R1,#0x2000000
   \        0xC   0x6001             STR      R1,[R0, #+0]
    267              
    268            //调用用户自定义中断服务
    269            if(ENET_ISR[ENET_RXF_ISR] != NULL)
   \        0xE   0x....'....        LDR.W    R1,??DataTable14_6
   \       0x12   0x6808             LDR      R0,[R1, #+0]
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD001             BEQ.N    ??Eth_RX_IRQHandler_0
    270            {
    271              ENET_ISR[ENET_RXF_ISR]();  
   \       0x18   0x6808             LDR      R0,[R1, #+0]
   \       0x1A   0x4780             BLX      R0
    272            }
    273          }
   \                     ??Eth_RX_IRQHandler_0: (+1)
   \       0x1C   0xBD01             POP      {R0,PC}          ;; return
    274          
    275          /*
    276           * Eth_TX_IRQHandler
    277           * ENET发送中断底层入口函数
    278           * 
    279           * 用户无需修改，程序自动进入对应通道中断函数
    280           */

   \                                 In section .text, align 2, keep-with-next
    281          void Eth_TX_IRQHandler(void)
    282          {  
   \                     Eth_TX_IRQHandler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    283            ENET->EIR |= ENET_EIMR_TXF_MASK; 
   \        0x2   0x....'....        LDR.W    R0,??DataTable14_37  ;; 0x400c0004
   \        0x6   0x6801             LDR      R1,[R0, #+0]
   \        0x8   0xF051 0x6100      ORRS     R1,R1,#0x8000000
   \        0xC   0x6001             STR      R1,[R0, #+0]
    284              
    285            //调用用户自定义中断服务
    286            if(ENET_ISR[ENET_TXF_ISR] != NULL)
   \        0xE   0x....'....        LDR.W    R1,??DataTable14_6
   \       0x12   0x6848             LDR      R0,[R1, #+4]
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD001             BEQ.N    ??Eth_TX_IRQHandler_0
    287            {
    288              ENET_ISR[ENET_TXF_ISR]();  
   \       0x18   0x6848             LDR      R0,[R1, #+4]
   \       0x1A   0x4780             BLX      R0
    289            }
    290          }
   \                     ??Eth_TX_IRQHandler_0: (+1)
   \       0x1C   0xBD01             POP      {R0,PC}          ;; return
    291          
    292          /*
    293           * Eth_IEEE1588_IRQHandler
    294           * IEEE1588中断底层入口函数
    295           * 
    296           * 用户无需修改，程序自动进入对应通道中断函数
    297           */

   \                                 In section .text, align 2, keep-with-next
    298          void Eth_IEEE1588_IRQHandler(void)
    299          {    
   \                     Eth_IEEE1588_IRQHandler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    300            //调用用户自定义中断服务
    301            if(ENET_ISR[ENET_1588_ISR] != NULL)
   \        0x2   0x....'....        LDR.W    R1,??DataTable14_6
   \        0x6   0x6888             LDR      R0,[R1, #+8]
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD001             BEQ.N    ??Eth_IEEE1588_IRQHandler_0
    302            {
    303              ENET_ISR[ENET_1588_ISR]();  
   \        0xC   0x6888             LDR      R0,[R1, #+8]
   \        0xE   0x4780             BLX      R0
    304            }
    305          }
   \                     ??Eth_IEEE1588_IRQHandler_0: (+1)
   \       0x10   0xBD01             POP      {R0,PC}          ;; return
    306          
    307          /*
    308           * Eth_Err_Misc_IRQHandler
    309           * 其他错误中断底层入口函数
    310           * 
    311           * 用户无需修改，程序自动进入对应通道中断函数
    312           */

   \                                 In section .text, align 2, keep-with-next
    313          void Eth_Err_Misc_IRQHandler(void)
    314          {  
   \                     Eth_Err_Misc_IRQHandler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    315            //调用用户自定义中断服务
    316            if(ENET_ISR[ENET_ERR_ISR] != NULL)
   \        0x2   0x....             LDR.N    R1,??DataTable14_6
   \        0x4   0x68C8             LDR      R0,[R1, #+12]
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD001             BEQ.N    ??Eth_Err_Misc_IRQHandler_0
    317            {
    318              ENET_ISR[ENET_ERR_ISR](); 
   \        0xA   0x68C8             LDR      R0,[R1, #+12]
   \        0xC   0x4780             BLX      R0
    319            } 
    320          }
   \                     ??Eth_Err_Misc_IRQHandler_0: (+1)
   \        0xE   0xBD01             POP      {R0,PC}          ;; return
    321          
    322          /*
    323           * LPLD_ENET_Delay
    324           * ENET模块内部延时函数
    325           * 
    326           * 参数:
    327           *    time--延迟大小
    328           *
    329           * 输出:
    330           *    无
    331           */

   \                                 In section .text, align 2, keep-with-next
    332          static void LPLD_ENET_Delay(uint32 time)
    333          {
    334            uint32 i = 0,j = 0;
   \                     LPLD_ENET_Delay: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0x2300             MOVS     R3,#+0
    335            
    336            for(i = 0;i < time;i++)
   \        0x4   0x2200             MOVS     R2,#+0
   \                     ??LPLD_ENET_Delay_0: (+1)
   \        0x6   0x4282             CMP      R2,R0
   \        0x8   0xD209             BCS.N    ??LPLD_ENET_Delay_1
    337            {
    338              for(j = 0;j < 50000;j++);
   \        0xA   0x2100             MOVS     R1,#+0
   \        0xC   0x000B             MOVS     R3,R1
   \                     ??LPLD_ENET_Delay_2: (+1)
   \        0xE   0xF24C 0x3150      MOVW     R1,#+50000
   \       0x12   0x428B             CMP      R3,R1
   \       0x14   0xD201             BCS.N    ??LPLD_ENET_Delay_3
   \       0x16   0x1C5B             ADDS     R3,R3,#+1
   \       0x18   0xE7F9             B.N      ??LPLD_ENET_Delay_2
    339            }
   \                     ??LPLD_ENET_Delay_3: (+1)
   \       0x1A   0x1C52             ADDS     R2,R2,#+1
   \       0x1C   0xE7F3             B.N      ??LPLD_ENET_Delay_0
    340          }
   \                     ??LPLD_ENET_Delay_1: (+1)
   \       0x1E   0x4770             BX       LR               ;; return
    341          
    342          
    343          /*
    344           * LPLD_ENET_BDInit
    345           * 缓冲区描述符初始化
    346           * 
    347           * 参数:
    348           *    无
    349           *
    350           * 输出:
    351           *    无
    352           */

   \                                 In section .text, align 2, keep-with-next
    353          static void LPLD_ENET_BDInit( void )
    354          {
   \                     LPLD_ENET_BDInit: (+1)
   \        0x0   0xB430             PUSH     {R4,R5}
    355            uint32 ux;
    356            uint8 *pcBufPointer;
    357            
    358            //寻找<发送描述符数组空间>中的16字节对齐的地址，即低四位为0的起始地址
    359            pcBufPointer = &( xENETTxDescriptors_unaligned[ 0 ] );
   \        0x2   0x....'....        LDR.W    R3,??DataTable14_41
    360            while( ( ( uint32 ) pcBufPointer & 0x0fUL ) != 0 )
   \                     ??LPLD_ENET_BDInit_0: (+1)
   \        0x6   0xF013 0x000F      ANDS     R0,R3,#0xF
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD001             BEQ.N    ??LPLD_ENET_BDInit_1
    361            {
    362              pcBufPointer++;
   \        0xE   0x1C5B             ADDS     R3,R3,#+1
   \       0x10   0xE7F9             B.N      ??LPLD_ENET_BDInit_0
    363            }
    364            xENETTxDescriptors = ( ENET_NbufTypeDef * ) pcBufPointer;
   \                     ??LPLD_ENET_BDInit_1: (+1)
   \       0x12   0x....'....        LDR.W    R2,??DataTable14_35
   \       0x16   0x6013             STR      R3,[R2, #+0]
    365            
    366            //寻找<接收描述符数组空间>中的16字节对齐的地址
    367            pcBufPointer = &( xENETRxDescriptors_unaligned[ 0 ] );
   \       0x18   0x....'....        LDR.W    R1,??DataTable14_42
    368            while( ( ( uint32 ) pcBufPointer & 0x0fUL ) != 0 )
   \                     ??LPLD_ENET_BDInit_2: (+1)
   \       0x1C   0xF011 0x000F      ANDS     R0,R1,#0xF
   \       0x20   0x2800             CMP      R0,#+0
   \       0x22   0xD001             BEQ.N    ??LPLD_ENET_BDInit_3
    369            {
    370              pcBufPointer++;
   \       0x24   0x1C49             ADDS     R1,R1,#+1
   \       0x26   0xE7F9             B.N      ??LPLD_ENET_BDInit_2
    371            }
    372            xENETRxDescriptors = ( ENET_NbufTypeDef * ) pcBufPointer;
   \                     ??LPLD_ENET_BDInit_3: (+1)
   \       0x28   0x....             LDR.N    R3,??DataTable14_33
   \       0x2A   0x6019             STR      R1,[R3, #+0]
    373            
    374            //发送缓冲区描述符初始化
    375            for( ux = 0; ux < CFG_NUM_ENET_TX_BUFFERS; ux++ )
   \       0x2C   0x2000             MOVS     R0,#+0
   \                     ??LPLD_ENET_BDInit_4: (+1)
   \       0x2E   0x2800             CMP      R0,#+0
   \       0x30   0xD10F             BNE.N    ??LPLD_ENET_BDInit_5
    376            {
    377              xENETTxDescriptors[ ux ].status = 0;
   \       0x32   0x2400             MOVS     R4,#+0
   \       0x34   0x6815             LDR      R5,[R2, #+0]
   \       0x36   0xF825 0x4030      STRH     R4,[R5, R0, LSL #+3]
    378              xENETTxDescriptors[ ux ].data = 0;
   \       0x3A   0x2400             MOVS     R4,#+0
   \       0x3C   0x6815             LDR      R5,[R2, #+0]
   \       0x3E   0xEB05 0x05C0      ADD      R5,R5,R0, LSL #+3
   \       0x42   0x606C             STR      R4,[R5, #+4]
    379              xENETTxDescriptors[ ux ].length = 0;
   \       0x44   0x2400             MOVS     R4,#+0
   \       0x46   0x6815             LDR      R5,[R2, #+0]
   \       0x48   0xEB05 0x05C0      ADD      R5,R5,R0, LSL #+3
   \       0x4C   0x806C             STRH     R4,[R5, #+2]
    380            }
   \       0x4E   0x1C40             ADDS     R0,R0,#+1
   \       0x50   0xE7ED             B.N      ??LPLD_ENET_BDInit_4
    381            
    382            //寻找<接收缓冲区空间>中的16字节对齐的地址
    383            pcBufPointer = &( ucENETRxBuffers[ 0 ] );
   \                     ??LPLD_ENET_BDInit_5: (+1)
   \       0x52   0x....             LDR.N    R4,??DataTable14_43
    384            while( ( ( uint32 ) pcBufPointer & 0x0fUL ) != 0 )
   \                     ??LPLD_ENET_BDInit_6: (+1)
   \       0x54   0xF014 0x010F      ANDS     R1,R4,#0xF
   \       0x58   0x2900             CMP      R1,#+0
   \       0x5A   0xD001             BEQ.N    ??LPLD_ENET_BDInit_7
    385            {
    386              pcBufPointer++;
   \       0x5C   0x1C64             ADDS     R4,R4,#+1
   \       0x5E   0xE7F9             B.N      ??LPLD_ENET_BDInit_6
    387            }
    388            
    389            //接收缓冲区描述符初始化
    390            for( ux = 0; ux < CFG_NUM_ENET_RX_BUFFERS; ux++ )
   \                     ??LPLD_ENET_BDInit_7: (+1)
   \       0x60   0x2100             MOVS     R1,#+0
   \                     ??LPLD_ENET_BDInit_8: (+1)
   \       0x62   0x2908             CMP      R1,#+8
   \       0x64   0xD211             BCS.N    ??LPLD_ENET_BDInit_9
    391            {
    392              xENETRxDescriptors[ ux ].status = RX_BD_E;
   \       0x66   0x2080             MOVS     R0,#+128
   \       0x68   0x681D             LDR      R5,[R3, #+0]
   \       0x6A   0xF825 0x0031      STRH     R0,[R5, R1, LSL #+3]
    393              xENETRxDescriptors[ ux ].length = 0;
   \       0x6E   0x2000             MOVS     R0,#+0
   \       0x70   0x681D             LDR      R5,[R3, #+0]
   \       0x72   0xEB05 0x05C1      ADD      R5,R5,R1, LSL #+3
   \       0x76   0x8068             STRH     R0,[R5, #+2]
    394              xENETRxDescriptors[ ux ].data = (uint8 *)__REV((uint32)pcBufPointer);
   \       0x78   0xBA20             REV      R0,R4
   \       0x7A   0x681D             LDR      R5,[R3, #+0]
   \       0x7C   0xEB05 0x05C1      ADD      R5,R5,R1, LSL #+3
   \       0x80   0x6068             STR      R0,[R5, #+4]
    395              pcBufPointer += CFG_ENET_RX_BUFFER_SIZE;
   \       0x82   0xF514 0x7480      ADDS     R4,R4,#+256
    396            
    397            }
   \       0x86   0x1C49             ADDS     R1,R1,#+1
   \       0x88   0xE7EB             B.N      ??LPLD_ENET_BDInit_8
    398            
    399            //设置缓冲区描述符环形序列中的最后一个状态位为Wrap
    400            xENETTxDescriptors[ CFG_NUM_ENET_TX_BUFFERS - 1 ].status |= TX_BD_W;
   \                     ??LPLD_ENET_BDInit_9: (+1)
   \       0x8A   0x6810             LDR      R0,[R2, #+0]
   \       0x8C   0x8800             LDRH     R0,[R0, #+0]
   \       0x8E   0xF050 0x0020      ORRS     R0,R0,#0x20
   \       0x92   0x6812             LDR      R2,[R2, #+0]
   \       0x94   0x8010             STRH     R0,[R2, #+0]
    401            xENETRxDescriptors[ CFG_NUM_ENET_RX_BUFFERS - 1 ].status |= RX_BD_W;
   \       0x96   0x6818             LDR      R0,[R3, #+0]
   \       0x98   0x8F00             LDRH     R0,[R0, #+56]
   \       0x9A   0xF050 0x0020      ORRS     R0,R0,#0x20
   \       0x9E   0x681A             LDR      R2,[R3, #+0]
   \       0xA0   0x8710             STRH     R0,[R2, #+56]
    402            
    403            uxNextRxBuffer = 0;
   \       0xA2   0x2000             MOVS     R0,#+0
   \       0xA4   0x....             LDR.N    R2,??DataTable14_44
   \       0xA6   0x6010             STR      R0,[R2, #+0]
    404            uxNextTxBuffer = 0;
   \       0xA8   0x2000             MOVS     R0,#+0
   \       0xAA   0x....             LDR.N    R2,??DataTable14_45
   \       0xAC   0x6010             STR      R0,[R2, #+0]
    405          }
   \       0xAE   0xBC30             POP      {R4,R5}
   \       0xB0   0x4770             BX       LR               ;; return
    406          
    407          /*
    408           * LPLD_ENET_MacSend
    409           * 以太帧发送函数
    410           * 
    411           * 参数:
    412           *    *ch--数据帧头地址，该数据帧为以太帧，必须包含目的地址、源地址、类型等。
    413           *    len--数据帧长度。
    414           *
    415           * 输出:
    416           *    无
    417           */

   \                                 In section .text, align 2, keep-with-next
    418          void LPLD_ENET_MacSend(uint8 *ch, uint16 len)
    419          {
   \                     LPLD_ENET_MacSend: (+1)
   \        0x0   0xB470             PUSH     {R4-R6}
    420            
    421            //检查当前发送缓冲区描述符是否可用
    422            while( xENETTxDescriptors[ uxNextTxBuffer ].status & TX_BD_R);
   \                     ??LPLD_ENET_MacSend_0: (+1)
   \        0x2   0x....             LDR.N    R3,??DataTable14_45
   \        0x4   0x....             LDR.N    R2,??DataTable14_35
   \        0x6   0x6814             LDR      R4,[R2, #+0]
   \        0x8   0x681D             LDR      R5,[R3, #+0]
   \        0xA   0xF814 0x4035      LDRB     R4,[R4, R5, LSL #+3]
   \        0xE   0x0624             LSLS     R4,R4,#+24
   \       0x10   0xD4F7             BMI.N    ??LPLD_ENET_MacSend_0
    423            
    424            //设置发送缓冲区描述符
    425            xENETTxDescriptors[ uxNextTxBuffer ].data = (uint8 *)__REV((uint32)ch);
   \       0x12   0xBA04             REV      R4,R0
   \       0x14   0x6815             LDR      R5,[R2, #+0]
   \       0x16   0x681E             LDR      R6,[R3, #+0]
   \       0x18   0xEB05 0x05C6      ADD      R5,R5,R6, LSL #+3
   \       0x1C   0x606C             STR      R4,[R5, #+4]
    426            xENETTxDescriptors[ uxNextTxBuffer ].length = __REVSH(len);
   \       0x1E   0xBACC             REVSH    R4,R1
   \       0x20   0x6815             LDR      R5,[R2, #+0]
   \       0x22   0x681E             LDR      R6,[R3, #+0]
   \       0x24   0xEB05 0x05C6      ADD      R5,R5,R6, LSL #+3
   \       0x28   0x806C             STRH     R4,[R5, #+2]
    427            xENETTxDescriptors[ uxNextTxBuffer ].status = ( TX_BD_R | TX_BD_L | TX_BD_TC | TX_BD_W );
   \       0x2A   0x24AC             MOVS     R4,#+172
   \       0x2C   0x6812             LDR      R2,[R2, #+0]
   \       0x2E   0x681D             LDR      R5,[R3, #+0]
   \       0x30   0xF822 0x4035      STRH     R4,[R2, R5, LSL #+3]
    428            
    429            uxNextTxBuffer++;
   \       0x34   0x681A             LDR      R2,[R3, #+0]
   \       0x36   0x1C52             ADDS     R2,R2,#+1
   \       0x38   0x601A             STR      R2,[R3, #+0]
    430            if( uxNextTxBuffer >= CFG_NUM_ENET_TX_BUFFERS )
   \       0x3A   0x681A             LDR      R2,[R3, #+0]
   \       0x3C   0x2A00             CMP      R2,#+0
   \       0x3E   0xD001             BEQ.N    ??LPLD_ENET_MacSend_1
    431            {
    432              uxNextTxBuffer = 0;
   \       0x40   0x2200             MOVS     R2,#+0
   \       0x42   0x601A             STR      R2,[R3, #+0]
    433            }
    434            
    435            //使能发送
    436            ENET->TDAR = ENET_TDAR_TDAR_MASK;
   \                     ??LPLD_ENET_MacSend_1: (+1)
   \       0x44   0xF05F 0x7280      MOVS     R2,#+16777216
   \       0x48   0x....             LDR.N    R3,??DataTable14_46  ;; 0x400c0014
   \       0x4A   0x601A             STR      R2,[R3, #+0]
    437            
    438          }
   \       0x4C   0xBC70             POP      {R4-R6}
   \       0x4E   0x4770             BX       LR               ;; return
    439          
    440          
    441          /*
    442           * LPLD_ENET_MacRecv
    443           * 以太帧接收函数
    444           * 
    445           * 参数:
    446           *    *ch--接收数据帧头地址。
    447           *    *len--数据帧长度地址。
    448           *
    449           * 输出:
    450           *    无
    451           */

   \                                 In section .text, align 2, keep-with-next
    452          uint8 LPLD_ENET_MacRecv(uint8 *ch, uint16 *len)
    453          {
   \                     LPLD_ENET_MacRecv: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
    454            uint8 *prvRxd;
    455            *len = 0;
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0x8028             STRH     R0,[R5, #+0]
    456            uxNextRxBuffer = 0; 
   \        0xC   0x....             LDR.N    R6,??DataTable14_44
   \        0xE   0x2000             MOVS     R0,#+0
   \       0x10   0x6030             STR      R0,[R6, #+0]
    457            
    458            //寻找为非空的接收缓冲区描述符 
    459            while( (xENETRxDescriptors[ uxNextRxBuffer ].status & RX_BD_E)!=0 )
   \                     ??LPLD_ENET_MacRecv_0: (+1)
   \       0x12   0x....             LDR.N    R7,??DataTable14_33
   \       0x14   0x6838             LDR      R0,[R7, #+0]
   \       0x16   0x6831             LDR      R1,[R6, #+0]
   \       0x18   0xF810 0x0031      LDRB     R0,[R0, R1, LSL #+3]
   \       0x1C   0x0600             LSLS     R0,R0,#+24
   \       0x1E   0xD509             BPL.N    ??LPLD_ENET_MacRecv_1
    460            {
    461              uxNextRxBuffer++; 
   \       0x20   0x6830             LDR      R0,[R6, #+0]
   \       0x22   0x1C40             ADDS     R0,R0,#+1
   \       0x24   0x6030             STR      R0,[R6, #+0]
    462              if( uxNextRxBuffer >= CFG_NUM_ENET_RX_BUFFERS )
   \       0x26   0x6830             LDR      R0,[R6, #+0]
   \       0x28   0x2808             CMP      R0,#+8
   \       0x2A   0xD3F2             BCC.N    ??LPLD_ENET_MacRecv_0
    463              {
    464                uxNextRxBuffer = 0; 
   \       0x2C   0x2000             MOVS     R0,#+0
   \       0x2E   0x6030             STR      R0,[R6, #+0]
    465                return 1;
   \       0x30   0x2001             MOVS     R0,#+1
   \       0x32   0xE022             B.N      ??LPLD_ENET_MacRecv_2
    466              } 
    467              
    468            }
    469            
    470            //读取接收缓冲区描述符
    471            *len  =  __REVSH(xENETRxDescriptors[ uxNextRxBuffer ].length);
   \                     ??LPLD_ENET_MacRecv_1: (+1)
   \       0x34   0x6838             LDR      R0,[R7, #+0]
   \       0x36   0x6831             LDR      R1,[R6, #+0]
   \       0x38   0xEB00 0x00C1      ADD      R0,R0,R1, LSL #+3
   \       0x3C   0xF9B0 0x0002      LDRSH    R0,[R0, #+2]
   \       0x40   0xBAC0             REVSH    R0,R0
   \       0x42   0x8028             STRH     R0,[R5, #+0]
    472            prvRxd =  (uint8 *)__REV((uint32)xENETRxDescriptors[ uxNextRxBuffer ].data);      
   \       0x44   0x6838             LDR      R0,[R7, #+0]
   \       0x46   0x6831             LDR      R1,[R6, #+0]
   \       0x48   0xEB00 0x00C1      ADD      R0,R0,R1, LSL #+3
   \       0x4C   0x6840             LDR      R0,[R0, #+4]
   \       0x4E   0xFA90 0xF880      REV      R8,R0
    473            memcpy((void *)ch, (void *)prvRxd, *len);      
   \       0x52   0x882A             LDRH     R2,[R5, #+0]
   \       0x54   0x4641             MOV      R1,R8
   \       0x56   0x0020             MOVS     R0,R4
   \       0x58   0x....'....        BL       memcpy
    474            
    475            //清除接收缓冲区描述符状态标志Empty
    476            xENETRxDescriptors[ uxNextRxBuffer ].status |= RX_BD_E;
   \       0x5C   0x6838             LDR      R0,[R7, #+0]
   \       0x5E   0x6831             LDR      R1,[R6, #+0]
   \       0x60   0xF830 0x0031      LDRH     R0,[R0, R1, LSL #+3]
   \       0x64   0xF050 0x0080      ORRS     R0,R0,#0x80
   \       0x68   0x6839             LDR      R1,[R7, #+0]
   \       0x6A   0x6832             LDR      R2,[R6, #+0]
   \       0x6C   0xF821 0x0032      STRH     R0,[R1, R2, LSL #+3]
    477            ENET->RDAR = ENET_RDAR_RDAR_MASK;	
   \       0x70   0xF05F 0x7080      MOVS     R0,#+16777216
   \       0x74   0x....             LDR.N    R1,??DataTable14_40  ;; 0x400c0010
   \       0x76   0x6008             STR      R0,[R1, #+0]
    478            return 0;
   \       0x78   0x2000             MOVS     R0,#+0
   \                     ??LPLD_ENET_MacRecv_2: (+1)
   \       0x7A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    479          }
    480          
    481          
    482          /*
    483           * LPLD_ENET_HashAddress
    484           * 生成给定的MAC地址的哈希表
    485           * 
    486           * 参数:
    487           *    *addr--6字节地址指针。
    488           *
    489           * 输出:
    490           *    32位CRC校验的高6位
    491           */

   \                                 In section .text, align 2, keep-with-next
    492          uint8 LPLD_ENET_HashAddress(const uint8* addr)
    493          {
   \                     LPLD_ENET_HashAddress: (+1)
   \        0x0   0xB470             PUSH     {R4-R6}
   \        0x2   0x0002             MOVS     R2,R0
    494            uint32 crc;
    495            uint8 byte;
    496            int i, j;
    497            
    498            crc = 0xFFFFFFFF;
   \        0x4   0xF05F 0x30FF      MOVS     R0,#-1
    499            for(i=0; i<6; ++i)
   \        0x8   0x2400             MOVS     R4,#+0
   \                     ??LPLD_ENET_HashAddress_0: (+1)
   \        0xA   0x2C06             CMP      R4,#+6
   \        0xC   0xDA19             BGE.N    ??LPLD_ENET_HashAddress_1
    500            {
    501              byte = addr[i];
   \        0xE   0x5D11             LDRB     R1,[R2, R4]
   \       0x10   0x000B             MOVS     R3,R1
    502              for(j=0; j<8; ++j)
   \       0x12   0x2100             MOVS     R1,#+0
   \       0x14   0x000D             MOVS     R5,R1
   \                     ??LPLD_ENET_HashAddress_2: (+1)
   \       0x16   0x2D08             CMP      R5,#+8
   \       0x18   0xDA11             BGE.N    ??LPLD_ENET_HashAddress_3
    503              {
    504                if((byte & 0x01)^(crc & 0x01))
   \       0x1A   0x0019             MOVS     R1,R3
   \       0x1C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x1E   0xF011 0x0101      ANDS     R1,R1,#0x1
   \       0x22   0xF010 0x0601      ANDS     R6,R0,#0x1
   \       0x26   0xEA96 0x0F01      TEQ      R6,R1
   \       0x2A   0xD003             BEQ.N    ??LPLD_ENET_HashAddress_4
    505                {
    506                  crc >>= 1;
   \       0x2C   0x0840             LSRS     R0,R0,#+1
    507                  crc = crc ^ 0xEDB88320;
   \       0x2E   0x....             LDR.N    R1,??DataTable14_47  ;; 0xedb88320
   \       0x30   0x4048             EORS     R0,R1,R0
   \       0x32   0xE000             B.N      ??LPLD_ENET_HashAddress_5
    508                }
    509                else
    510                  crc >>= 1;
   \                     ??LPLD_ENET_HashAddress_4: (+1)
   \       0x34   0x0840             LSRS     R0,R0,#+1
    511                byte >>= 1;
   \                     ??LPLD_ENET_HashAddress_5: (+1)
   \       0x36   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0x38   0x085B             LSRS     R3,R3,#+1
    512              }
   \       0x3A   0x1C6D             ADDS     R5,R5,#+1
   \       0x3C   0xE7EB             B.N      ??LPLD_ENET_HashAddress_2
    513            }
   \                     ??LPLD_ENET_HashAddress_3: (+1)
   \       0x3E   0x1C64             ADDS     R4,R4,#+1
   \       0x40   0xE7E3             B.N      ??LPLD_ENET_HashAddress_0
    514            return (uint8)(crc >> 26);
   \                     ??LPLD_ENET_HashAddress_1: (+1)
   \       0x42   0x0E80             LSRS     R0,R0,#+26
   \       0x44   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x46   0xBC70             POP      {R4-R6}
   \       0x48   0x4770             BX       LR               ;; return
    515          }
    516          
    517          
    518          /*
    519           * LPLD_ENET_SetAddress
    520           * 设置MAC物理地址
    521           * 
    522           * 参数:
    523           *    *pa--6字节的物理地址指针。
    524           *
    525           * 输出:
    526           *    无
    527           */

   \                                 In section .text, align 2, keep-with-next
    528          void LPLD_ENET_SetAddress(const uint8 *pa)
    529          {
   \                     LPLD_ENET_SetAddress: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
    530            uint8 crc;
    531            
    532            //设置物理地址
    533            ENET->PALR = (uint32)((pa[0]<<24) | (pa[1]<<16) | (pa[2]<<8) | pa[3]);
   \        0x4   0x7820             LDRB     R0,[R4, #+0]
   \        0x6   0x7861             LDRB     R1,[R4, #+1]
   \        0x8   0x0409             LSLS     R1,R1,#+16
   \        0xA   0xEA51 0x6100      ORRS     R1,R1,R0, LSL #+24
   \        0xE   0x78A0             LDRB     R0,[R4, #+2]
   \       0x10   0xEA51 0x2100      ORRS     R1,R1,R0, LSL #+8
   \       0x14   0x78E0             LDRB     R0,[R4, #+3]
   \       0x16   0x4301             ORRS     R1,R0,R1
   \       0x18   0x....             LDR.N    R0,??DataTable14_48  ;; 0x400c00e4
   \       0x1A   0x6001             STR      R1,[R0, #+0]
    534            ENET->PAUR = (uint32)((pa[4]<<24) | (pa[5]<<16));
   \       0x1C   0x7920             LDRB     R0,[R4, #+4]
   \       0x1E   0x7961             LDRB     R1,[R4, #+5]
   \       0x20   0x0409             LSLS     R1,R1,#+16
   \       0x22   0xEA51 0x6100      ORRS     R1,R1,R0, LSL #+24
   \       0x26   0x....             LDR.N    R0,??DataTable14_49  ;; 0x400c00e8
   \       0x28   0x6001             STR      R1,[R0, #+0]
    535            
    536            //根据物理地址计算并设置独立地址哈希寄存器的值
    537            crc = LPLD_ENET_HashAddress(pa);
   \       0x2A   0x0020             MOVS     R0,R4
   \       0x2C   0x....'....        BL       LPLD_ENET_HashAddress
    538            if(crc >= 32)
   \       0x30   0x0001             MOVS     R1,R0
   \       0x32   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x34   0x2920             CMP      R1,#+32
   \       0x36   0xDB08             BLT.N    ??LPLD_ENET_SetAddress_0
    539              ENET->IAUR |= (uint32)(1 << (crc - 32));
   \       0x38   0x....             LDR.N    R2,??DataTable14_26  ;; 0x400c0118
   \       0x3A   0x6813             LDR      R3,[R2, #+0]
   \       0x3C   0x2501             MOVS     R5,#+1
   \       0x3E   0xF1B0 0x0120      SUBS     R1,R0,#+32
   \       0x42   0x408D             LSLS     R5,R5,R1
   \       0x44   0x432B             ORRS     R3,R5,R3
   \       0x46   0x6013             STR      R3,[R2, #+0]
   \       0x48   0xE005             B.N      ??LPLD_ENET_SetAddress_1
    540            else
    541              ENET->IALR |= (uint32)(1 << crc);
   \                     ??LPLD_ENET_SetAddress_0: (+1)
   \       0x4A   0x....             LDR.N    R1,??DataTable14_25  ;; 0x400c011c
   \       0x4C   0x680A             LDR      R2,[R1, #+0]
   \       0x4E   0x2301             MOVS     R3,#+1
   \       0x50   0x4083             LSLS     R3,R3,R0
   \       0x52   0x431A             ORRS     R2,R3,R2
   \       0x54   0x600A             STR      R2,[R1, #+0]
    542          }
   \                     ??LPLD_ENET_SetAddress_1: (+1)
   \       0x56   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    543          
    544          
    545          
    546          /*******************************************************************
    547           *
    548           *                PHY设备MII接口函数
    549           *
    550          *******************************************************************/
    551          
    552          /*
    553           * LPLD_ENET_MiiInit
    554           * 设置ENET模块的MII接口时钟，期望频率为2.5MHz
    555           * MII_SPEED = 系统时钟 / (2.5MHz * 2)
    556           * 
    557           * 参数:
    558           *    sys_clk_mhz--系统主频
    559           *
    560           * 输出:
    561           *    无
    562           */

   \                                 In section .text, align 2, keep-with-next
    563          void LPLD_ENET_MiiInit(uint32 sys_clk_mhz)
    564          {
    565            ENET->MSCR = 0 | ENET_MSCR_MII_SPEED((2*sys_clk_mhz/5)+1);
   \                     LPLD_ENET_MiiInit: (+1)
   \        0x0   0x0041             LSLS     R1,R0,#+1
   \        0x2   0x2205             MOVS     R2,#+5
   \        0x4   0xFBB1 0xF1F2      UDIV     R1,R1,R2
   \        0x8   0x1C49             ADDS     R1,R1,#+1
   \        0xA   0x0049             LSLS     R1,R1,#+1
   \        0xC   0xF011 0x017E      ANDS     R1,R1,#0x7E
   \       0x10   0x....             LDR.N    R2,??DataTable14_50  ;; 0x400c0044
   \       0x12   0x6011             STR      R1,[R2, #+0]
    566          }
   \       0x14   0x4770             BX       LR               ;; return
    567          
    568          
    569          /*
    570           * LPLD_ENET_MiiWrite
    571           * MII接口写
    572           * 
    573           * 参数:
    574           *    phy_addr--物理收发器地址
    575           *    reg_addr--寄存器地址
    576           *    data--写入的数据
    577           *
    578           * 输出:
    579           *    1--写超时
    580           *    0--写入成功
    581           */

   \                                 In section .text, align 2, keep-with-next
    582          uint8 LPLD_ENET_MiiWrite(uint16 phy_addr, uint16 reg_addr, uint16 data)
    583          {
   \                     LPLD_ENET_MiiWrite: (+1)
   \        0x0   0xB4F0             PUSH     {R4-R7}
   \        0x2   0x0003             MOVS     R3,R0
    584            uint32 timeout;
    585            
    586            //清除MII中断事件
    587            ENET->EIR = ENET_EIR_MII_MASK;
   \        0x4   0x....             LDR.N    R5,??DataTable14_37  ;; 0x400c0004
   \        0x6   0xF45F 0x0600      MOVS     R6,#+8388608
   \        0xA   0x602E             STR      R6,[R5, #+0]
    588            
    589            //初始化MII管理帧寄存器
    590            ENET->MMFR = 0
    591                      | ENET_MMFR_ST(0x01)
    592                      | ENET_MMFR_OP(0x01)
    593                      | ENET_MMFR_PA(phy_addr)
    594                      | ENET_MMFR_RA(reg_addr)
    595                      | ENET_MMFR_TA(0x02)
    596                      | ENET_MMFR_DATA(data);
   \        0xC   0x001C             MOVS     R4,R3
   \        0xE   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \       0x10   0x05E4             LSLS     R4,R4,#+23
   \       0x12   0xF014 0x6478      ANDS     R4,R4,#0xF800000
   \       0x16   0x0008             MOVS     R0,R1
   \       0x18   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \       0x1A   0x0480             LSLS     R0,R0,#+18
   \       0x1C   0xF410 0x00F8      ANDS     R0,R0,#0x7C0000
   \       0x20   0x4304             ORRS     R4,R0,R4
   \       0x22   0x0010             MOVS     R0,R2
   \       0x24   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \       0x26   0x4304             ORRS     R4,R0,R4
   \       0x28   0x....             LDR.N    R0,??DataTable14_51  ;; 0x50020000
   \       0x2A   0x4304             ORRS     R4,R0,R4
   \       0x2C   0x....             LDR.N    R0,??DataTable14_52  ;; 0x400c0040
   \       0x2E   0x6004             STR      R4,[R0, #+0]
    597            
    598            //等待MII传输完成中断事件
    599            for (timeout = 0; timeout < MII_TIMEOUT; timeout++)
   \       0x30   0x2400             MOVS     R4,#+0
   \                     ??LPLD_ENET_MiiWrite_0: (+1)
   \       0x32   0x....             LDR.N    R0,??DataTable14_53  ;; 0x1ffff
   \       0x34   0x4284             CMP      R4,R0
   \       0x36   0xD204             BCS.N    ??LPLD_ENET_MiiWrite_1
    600            {
    601              if (ENET->EIR & ENET_EIR_MII_MASK)
   \       0x38   0x682F             LDR      R7,[R5, #+0]
   \       0x3A   0x023F             LSLS     R7,R7,#+8
   \       0x3C   0xD401             BMI.N    ??LPLD_ENET_MiiWrite_1
    602                break;
    603            }
   \                     ??LPLD_ENET_MiiWrite_2: (+1)
   \       0x3E   0x1C64             ADDS     R4,R4,#+1
   \       0x40   0xE7F7             B.N      ??LPLD_ENET_MiiWrite_0
    604            
    605            if(timeout == MII_TIMEOUT) 
   \                     ??LPLD_ENET_MiiWrite_1: (+1)
   \       0x42   0x4284             CMP      R4,R0
   \       0x44   0xD101             BNE.N    ??LPLD_ENET_MiiWrite_3
    606              return 1;
   \       0x46   0x2001             MOVS     R0,#+1
   \       0x48   0xE001             B.N      ??LPLD_ENET_MiiWrite_4
    607            
    608            //清除MII中断事件
    609            ENET->EIR = ENET_EIR_MII_MASK;
   \                     ??LPLD_ENET_MiiWrite_3: (+1)
   \       0x4A   0x602E             STR      R6,[R5, #+0]
    610            
    611            return 0;
   \       0x4C   0x2000             MOVS     R0,#+0
   \                     ??LPLD_ENET_MiiWrite_4: (+1)
   \       0x4E   0xBCF0             POP      {R4-R7}
   \       0x50   0x4770             BX       LR               ;; return
    612          }
    613          
    614          
    615          /*
    616           * LPLD_ENET_MiiRead
    617           * MII接口读
    618           * 
    619           * 参数:
    620           *    phy_addr--物理收发器地址
    621           *    reg_addr--寄存器地址
    622           *    *data--读出的数据地址指针
    623           *
    624           * 输出:
    625           *    1--读超时
    626           *    0--读取成功
    627           */

   \                                 In section .text, align 2, keep-with-next
    628          uint8 LPLD_ENET_MiiRead(uint16 phy_addr, uint16 reg_addr, uint16 *data)
    629          {
   \                     LPLD_ENET_MiiRead: (+1)
   \        0x0   0xB4F0             PUSH     {R4-R7}
   \        0x2   0x0003             MOVS     R3,R0
    630            uint32 timeout;
    631            
    632            //清除MII中断事件
    633            ENET->EIR = ENET_EIR_MII_MASK;
   \        0x4   0x....             LDR.N    R5,??DataTable14_37  ;; 0x400c0004
   \        0x6   0xF45F 0x0600      MOVS     R6,#+8388608
   \        0xA   0x602E             STR      R6,[R5, #+0]
    634            
    635            //初始化MII管理帧寄存器
    636            ENET->MMFR = 0
    637                      | ENET_MMFR_ST(0x01)
    638                      | ENET_MMFR_OP(0x2)
    639                      | ENET_MMFR_PA(phy_addr)
    640                      | ENET_MMFR_RA(reg_addr)
    641                      | ENET_MMFR_TA(0x02);
   \        0xC   0x....             LDR.N    R7,??DataTable14_52  ;; 0x400c0040
   \        0xE   0x001C             MOVS     R4,R3
   \       0x10   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \       0x12   0x05E4             LSLS     R4,R4,#+23
   \       0x14   0xF014 0x6478      ANDS     R4,R4,#0xF800000
   \       0x18   0x0008             MOVS     R0,R1
   \       0x1A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \       0x1C   0x0480             LSLS     R0,R0,#+18
   \       0x1E   0xF410 0x00F8      ANDS     R0,R0,#0x7C0000
   \       0x22   0x4304             ORRS     R4,R0,R4
   \       0x24   0x....             LDR.N    R0,??DataTable14_54  ;; 0x60020000
   \       0x26   0x4304             ORRS     R4,R0,R4
   \       0x28   0x603C             STR      R4,[R7, #+0]
    642            
    643            //等待MII传输完成中断事件
    644            for (timeout = 0; timeout < MII_TIMEOUT; timeout++)
   \       0x2A   0x2400             MOVS     R4,#+0
   \                     ??LPLD_ENET_MiiRead_0: (+1)
   \       0x2C   0x....             LDR.N    R0,??DataTable14_53  ;; 0x1ffff
   \       0x2E   0x4284             CMP      R4,R0
   \       0x30   0xD206             BCS.N    ??LPLD_ENET_MiiRead_1
    645            {
    646              if (ENET->EIR & ENET_EIR_MII_MASK)
   \       0x32   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0x36   0xEA5F 0x2C0C      LSLS     R12,R12,#+8
   \       0x3A   0xD401             BMI.N    ??LPLD_ENET_MiiRead_1
    647                break;
    648            }
   \                     ??LPLD_ENET_MiiRead_2: (+1)
   \       0x3C   0x1C64             ADDS     R4,R4,#+1
   \       0x3E   0xE7F5             B.N      ??LPLD_ENET_MiiRead_0
    649            
    650            if(timeout == MII_TIMEOUT) 
   \                     ??LPLD_ENET_MiiRead_1: (+1)
   \       0x40   0x4284             CMP      R4,R0
   \       0x42   0xD101             BNE.N    ??LPLD_ENET_MiiRead_3
    651              return 1;
   \       0x44   0x2001             MOVS     R0,#+1
   \       0x46   0xE003             B.N      ??LPLD_ENET_MiiRead_4
    652            
    653            //清除MII中断事件
    654            ENET->EIR = ENET_EIR_MII_MASK;
   \                     ??LPLD_ENET_MiiRead_3: (+1)
   \       0x48   0x602E             STR      R6,[R5, #+0]
    655            
    656            *data = ENET->MMFR & 0x0000FFFF;
   \       0x4A   0x6838             LDR      R0,[R7, #+0]
   \       0x4C   0x8010             STRH     R0,[R2, #+0]
    657            
    658            return 0;
   \       0x4E   0x2000             MOVS     R0,#+0
   \                     ??LPLD_ENET_MiiRead_4: (+1)
   \       0x50   0xBCF0             POP      {R4-R7}
   \       0x52   0x4770             BX       LR               ;; return
    659          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \        0x0   0xE000'E100        DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \        0x0   0x4004'802C        DC32     0x4004802c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \        0x0   0x4000'D000        DC32     0x4000d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_3:
   \        0x0   0x400C'0024        DC32     0x400c0024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_4:
   \        0x0   0x....'....        DC32     g_bus_clock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_5:
   \        0x0   0x000F'4240        DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_6:
   \        0x0   0x....'....        DC32     ENET_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_7:
   \        0x0   0x4004'A000        DC32     0x4004a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_8:
   \        0x0   0x4004'A004        DC32     0x4004a004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_9:
   \        0x0   0x4004'9038        DC32     0x40049038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_10:
   \        0x0   0x4004'9030        DC32     0x40049030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_11:
   \        0x0   0x4004'9034        DC32     0x40049034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_12:
   \        0x0   0x4004'903C        DC32     0x4004903c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_13:
   \        0x0   0x4004'9040        DC32     0x40049040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_14:
   \        0x0   0x4004'9044        DC32     0x40049044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_15:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_16:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_17:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_18:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_19:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_20:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_21:
   \        0x0   0x....'....        DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_22:
   \        0x0   0x....'....        DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_23:
   \        0x0   0x....'....        DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_24:
   \        0x0   0x....'....        DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_25:
   \        0x0   0x400C'011C        DC32     0x400c011c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_26:
   \        0x0   0x400C'0118        DC32     0x400c0118

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_27:
   \        0x0   0x400C'0124        DC32     0x400c0124

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_28:
   \        0x0   0x400C'0120        DC32     0x400c0120

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_29:
   \        0x0   0x400C'0084        DC32     0x400c0084

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_30:
   \        0x0   0x05F0'4104        DC32     0x5f04104

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_31:
   \        0x0   0x400C'00C4        DC32     0x400c00c4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_32:
   \        0x0   0x400C'0188        DC32     0x400c0188

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_33:
   \        0x0   0x....'....        DC32     xENETRxDescriptors

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_34:
   \        0x0   0x400C'0180        DC32     0x400c0180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_35:
   \        0x0   0x....'....        DC32     xENETTxDescriptors

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_36:
   \        0x0   0x400C'0184        DC32     0x400c0184

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_37:
   \        0x0   0x400C'0004        DC32     0x400c0004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_38:
   \        0x0   0x6B78'0000        DC32     0x6b780000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_39:
   \        0x0   0x400C'0008        DC32     0x400c0008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_40:
   \        0x0   0x400C'0010        DC32     0x400c0010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_41:
   \        0x0   0x....'....        DC32     xENETTxDescriptors_unaligned

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_42:
   \        0x0   0x....'....        DC32     xENETRxDescriptors_unaligned

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_43:
   \        0x0   0x....'....        DC32     ucENETRxBuffers

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_44:
   \        0x0   0x....'....        DC32     uxNextRxBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_45:
   \        0x0   0x....'....        DC32     uxNextTxBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_46:
   \        0x0   0x400C'0014        DC32     0x400c0014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_47:
   \        0x0   0xEDB8'8320        DC32     0xedb88320

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_48:
   \        0x0   0x400C'00E4        DC32     0x400c00e4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_49:
   \        0x0   0x400C'00E8        DC32     0x400c00e8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_50:
   \        0x0   0x400C'0044        DC32     0x400c0044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_51:
   \        0x0   0x5002'0000        DC32     0x50020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_52:
   \        0x0   0x400C'0040        DC32     0x400c0040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_53:
   \        0x0   0x0001'FFFF        DC32     0x1ffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_54:
   \        0x0   0x6002'0000        DC32     0x60020000

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x50 0x48          DC8 "PHY_PHYIDR1=0x%X\015\012"
   \              0x59 0x5F    
   \              0x50 0x48    
   \              0x59 0x49    
   \              0x44 0x52    
   \              0x31 0x3D    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x0D 0x0A    
   \              0x00         
   \       0x13   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x50 0x48          DC8 "PHY_PHYIDR2=0x%X\015\012"
   \              0x59 0x5F    
   \              0x50 0x48    
   \              0x59 0x49    
   \              0x44 0x52    
   \              0x32 0x3D    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x0D 0x0A    
   \              0x00         
   \       0x13   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x50 0x48          DC8 "PHY_ANLPAR=0x%X\015\012"
   \              0x59 0x5F    
   \              0x41 0x4E    
   \              0x4C 0x50    
   \              0x41 0x52    
   \              0x3D 0x30    
   \              0x78 0x25    
   \              0x58 0x0D    
   \              0x0A 0x00    
   \       0x12   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x50 0x48          DC8 "PHY_ANLPARNP=0x%X\015\012"
   \              0x59 0x5F    
   \              0x41 0x4E    
   \              0x4C 0x50    
   \              0x41 0x52    
   \              0x4E 0x50    
   \              0x3D 0x30    
   \              0x78 0x25    
   \              0x58 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x50 0x48          DC8 "PHY_PHYSTS=0x%X\015\012"
   \              0x59 0x5F    
   \              0x50 0x48    
   \              0x59 0x53    
   \              0x54 0x53    
   \              0x3D 0x30    
   \              0x78 0x25    
   \              0x58 0x0D    
   \              0x0A 0x00    
   \       0x12   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x50 0x48          DC8 "PHY_MICR=0x%X\015\012"
   \              0x59 0x5F    
   \              0x4D 0x49    
   \              0x43 0x52    
   \              0x3D 0x30    
   \              0x78 0x25    
   \              0x58 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x50 0x48          DC8 "PHY_MISR=0x%X\015\012"
   \              0x59 0x5F    
   \              0x4D 0x49    
   \              0x53 0x52    
   \              0x3D 0x30    
   \              0x78 0x25    
   \              0x58 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x50 0x48          DC8 "PHY_BMCR=0x%X\015\012"
   \              0x59 0x5F    
   \              0x42 0x4D    
   \              0x43 0x52    
   \              0x3D 0x30    
   \              0x78 0x25    
   \              0x58 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x50 0x48          DC8 "PHY_BMSR=0x%X\015\012"
   \              0x59 0x5F    
   \              0x42 0x4D    
   \              0x53 0x52    
   \              0x3D 0x30    
   \              0x78 0x25    
   \              0x58 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_9:
   \        0x0   0x50 0x48          DC8 "PHY_STATUS=0x%X\015\012"
   \              0x59 0x5F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x3D 0x30    
   \              0x78 0x25    
   \              0x58 0x0D    
   \              0x0A 0x00    
   \       0x12   0x00 0x00          DC8 0, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Eth_Err_Misc_IRQHandler
         8   -- Indirect call
       8   Eth_IEEE1588_IRQHandler
         8   -- Indirect call
       8   Eth_RX_IRQHandler
         8   -- Indirect call
       8   Eth_TX_IRQHandler
         8   -- Indirect call
       8   LPLD_ENET_BDInit
       0   LPLD_ENET_Delay
      12   LPLD_ENET_HashAddress
      32   LPLD_ENET_Init
        32   -> LPLD_ENET_BDInit
        32   -> LPLD_ENET_Delay
        32   -> LPLD_ENET_MiiInit
        32   -> LPLD_ENET_MiiRead
        32   -> LPLD_ENET_MiiWrite
        32   -> LPLD_ENET_SetAddress
        32   -> __NVIC_EnableIRQ
        32   -> printf
      24   LPLD_ENET_MacRecv
        24   -> memcpy
      12   LPLD_ENET_MacSend
       0   LPLD_ENET_MiiInit
      16   LPLD_ENET_MiiRead
      16   LPLD_ENET_MiiWrite
      16   LPLD_ENET_SetAddress
        16   -> LPLD_ENET_HashAddress
       0   LPLD_ENET_SetIsr
       0   __NVIC_EnableIRQ


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_10
       4  ??DataTable14_11
       4  ??DataTable14_12
       4  ??DataTable14_13
       4  ??DataTable14_14
       4  ??DataTable14_15
       4  ??DataTable14_16
       4  ??DataTable14_17
       4  ??DataTable14_18
       4  ??DataTable14_19
       4  ??DataTable14_2
       4  ??DataTable14_20
       4  ??DataTable14_21
       4  ??DataTable14_22
       4  ??DataTable14_23
       4  ??DataTable14_24
       4  ??DataTable14_25
       4  ??DataTable14_26
       4  ??DataTable14_27
       4  ??DataTable14_28
       4  ??DataTable14_29
       4  ??DataTable14_3
       4  ??DataTable14_30
       4  ??DataTable14_31
       4  ??DataTable14_32
       4  ??DataTable14_33
       4  ??DataTable14_34
       4  ??DataTable14_35
       4  ??DataTable14_36
       4  ??DataTable14_37
       4  ??DataTable14_38
       4  ??DataTable14_39
       4  ??DataTable14_4
       4  ??DataTable14_40
       4  ??DataTable14_41
       4  ??DataTable14_42
       4  ??DataTable14_43
       4  ??DataTable14_44
       4  ??DataTable14_45
       4  ??DataTable14_46
       4  ??DataTable14_47
       4  ??DataTable14_48
       4  ??DataTable14_49
       4  ??DataTable14_5
       4  ??DataTable14_50
       4  ??DataTable14_51
       4  ??DataTable14_52
       4  ??DataTable14_53
       4  ??DataTable14_54
       4  ??DataTable14_6
       4  ??DataTable14_7
       4  ??DataTable14_8
       4  ??DataTable14_9
      20  ?_0
      20  ?_1
      20  ?_2
      20  ?_3
      20  ?_4
      16  ?_5
      16  ?_6
      16  ?_7
      16  ?_8
      20  ?_9
      16  ENET_ISR
      16  Eth_Err_Misc_IRQHandler
      18  Eth_IEEE1588_IRQHandler
      30  Eth_RX_IRQHandler
      30  Eth_TX_IRQHandler
     178  LPLD_ENET_BDInit
      32  LPLD_ENET_Delay
      74  LPLD_ENET_HashAddress
     674  LPLD_ENET_Init
     126  LPLD_ENET_MacRecv
      80  LPLD_ENET_MacSend
      22  LPLD_ENET_MiiInit
      84  LPLD_ENET_MiiRead
      82  LPLD_ENET_MiiWrite
      88  LPLD_ENET_SetAddress
      30  LPLD_ENET_SetIsr
      32  __NVIC_EnableIRQ
    2064  ucENETRxBuffers
       4  uxNextRxBuffer
       4  uxNextTxBuffer
       4  xENETRxDescriptors
      80  xENETRxDescriptors_unaligned
       4  xENETTxDescriptors
      24  xENETTxDescriptors_unaligned

 
 2 200 bytes in section .bss
   184 bytes in section .rodata
 1 816 bytes in section .text
 
 1 816 bytes of CODE  memory
   184 bytes of CONST memory
 2 200 bytes of DATA  memory

Errors: none
Warnings: 1
