###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.1.169/W32 for ARM         02/Jul/2019  17:59:10
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  G:\AIcar\@@\xiugai\lib\common\alloc.c
#    Command line =  
#        -f C:\Users\admin\AppData\Local\Temp\EW3BFA.tmp
#        (G:\AIcar\@@\xiugai\lib\common\alloc.c -D LPLD_K60 -lCN
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\List"
#        -lB
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\List"
#        -o "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        G:\AIcar\arm\inc\c\DLib_Config_Normal.h -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\app\" -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\CPU\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\common\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\HW\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\DEV\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Ports\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Source\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\option\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\common\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\driver\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\descriptor\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\class\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\Jay\"
#        -On -I G:\AIcar\arm\CMSIS\Core\Include\ -I
#        G:\AIcar\arm\CMSIS\DSP\Include\ -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\List\alloc.lst
#    Object file  =  
#        G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\Obj\alloc.o
#
###############################################################################

G:\AIcar\@@\xiugai\lib\common\alloc.c
      1          /**
      2           * @file alloc.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief 通用 malloc()、free() 函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 该代码提供系统内存分配和释放函数。
     10           * 用户可选片内或片外内存，片外内存需FlexBus支持。
     11           *
     12           * 版权所有:北京拉普兰德电子技术有限公司
     13           * http://www.lpld.cn
     14           * mail:support@lpld.cn
     15           *
     16           * @par
     17           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     18           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     19           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     20           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     21           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     22           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     23           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     24           */
     25          
     26          #include "common.h"
     27          #include "stdlib.h"
     28          
     29          #if defined(__IAR_SYSTEMS_ICC__)
     30            #pragma section = "HEAP"
     31          #endif
     32          
     33          /********************************************************************/
     34          
     35          /*
     36           * This struct forms the minimum block size which is allocated, and
     37           * also forms the linked list for the memory space used with alloc()
     38           * and free().  It is padded so that on a 32-bit machine, all malloc'ed
     39           * pointers are 16-byte aligned.
     40           */
     41          typedef struct ALLOC_HDR
     42          {
     43              struct
     44              {
     45                  struct ALLOC_HDR     *ptr;
     46                  unsigned int size;
     47              } s;
     48              unsigned int align;
     49              unsigned int pad;
     50          } ALLOC_HDR;
     51          

   \                                 In section .bss, align 4
     52          static ALLOC_HDR base;
   \                     base:
   \        0x0                      DS8 16

   \                                 In section .bss, align 4
     53          static ALLOC_HDR *freep = NULL;
   \                     freep:
   \        0x0                      DS8 4
     54          
     55          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     56          void free (void *ap)
     57          {
   \                     free: (+1)
   \        0x0   0xB430             PUSH     {R4,R5}
     58              ALLOC_HDR *bp, *p;
     59          
     60              bp = (ALLOC_HDR *)ap - 1;   /* point to block header */
   \        0x2   0xF1B0 0x0210      SUBS     R2,R0,#+16
     61              for (p = freep; !((bp > p) && (bp < p->s.ptr)) ; p = p->s.ptr)
   \        0x6   0x....             LDR.N    R3,??DataTable1
   \        0x8   0x681C             LDR      R4,[R3, #+0]
   \                     ??free_0: (+1)
   \        0xA   0x4294             CMP      R4,R2
   \        0xC   0xD202             BCS.N    ??free_1
   \        0xE   0x6821             LDR      R1,[R4, #+0]
   \       0x10   0x428A             CMP      R2,R1
   \       0x12   0xD30A             BCC.N    ??free_2
     62              {
     63                  if ((p >= p->s.ptr) && ((bp > p) || (bp < p->s.ptr)))
   \                     ??free_1: (+1)
   \       0x14   0x6821             LDR      R1,[R4, #+0]
   \       0x16   0x428C             CMP      R4,R1
   \       0x18   0xD305             BCC.N    ??free_3
   \       0x1A   0x4294             CMP      R4,R2
   \       0x1C   0xD302             BCC.N    ??free_4
   \       0x1E   0x6821             LDR      R1,[R4, #+0]
   \       0x20   0x428A             CMP      R2,R1
   \       0x22   0xD200             BCS.N    ??free_3
     64                  {
     65                      break; /* freed block at start or end of arena */
   \                     ??free_4: (+1)
   \       0x24   0xE001             B.N      ??free_2
     66                  }
     67              }
   \                     ??free_3: (+1)
   \       0x26   0x6824             LDR      R4,[R4, #+0]
   \       0x28   0xE7EF             B.N      ??free_0
     68          
     69              if ((bp + bp->s.size) == p->s.ptr)
   \                     ??free_2: (+1)
   \       0x2A   0x6851             LDR      R1,[R2, #+4]
   \       0x2C   0x0109             LSLS     R1,R1,#+4
   \       0x2E   0x4411             ADD      R1,R2,R1
   \       0x30   0x6825             LDR      R5,[R4, #+0]
   \       0x32   0x42A9             CMP      R1,R5
   \       0x34   0xD108             BNE.N    ??free_5
     70              {
     71                  bp->s.size += p->s.ptr->s.size;
   \       0x36   0x6855             LDR      R5,[R2, #+4]
   \       0x38   0x6821             LDR      R1,[R4, #+0]
   \       0x3A   0x6849             LDR      R1,[R1, #+4]
   \       0x3C   0x194D             ADDS     R5,R1,R5
   \       0x3E   0x6055             STR      R5,[R2, #+4]
     72                  bp->s.ptr = p->s.ptr->s.ptr;
   \       0x40   0x6821             LDR      R1,[R4, #+0]
   \       0x42   0x6809             LDR      R1,[R1, #+0]
   \       0x44   0x6011             STR      R1,[R2, #+0]
   \       0x46   0xE001             B.N      ??free_6
     73              }
     74              else
     75              {
     76                  bp->s.ptr = p->s.ptr;
   \                     ??free_5: (+1)
   \       0x48   0x6821             LDR      R1,[R4, #+0]
   \       0x4A   0x6011             STR      R1,[R2, #+0]
     77              }
     78          
     79              if ((p + p->s.size) == bp)
   \                     ??free_6: (+1)
   \       0x4C   0x6861             LDR      R1,[R4, #+4]
   \       0x4E   0x0109             LSLS     R1,R1,#+4
   \       0x50   0x4421             ADD      R1,R4,R1
   \       0x52   0x4291             CMP      R1,R2
   \       0x54   0xD106             BNE.N    ??free_7
     80              {
     81                  p->s.size += bp->s.size;
   \       0x56   0x6865             LDR      R5,[R4, #+4]
   \       0x58   0x6851             LDR      R1,[R2, #+4]
   \       0x5A   0x194D             ADDS     R5,R1,R5
   \       0x5C   0x6065             STR      R5,[R4, #+4]
     82                  p->s.ptr = bp->s.ptr;
   \       0x5E   0x6811             LDR      R1,[R2, #+0]
   \       0x60   0x6021             STR      R1,[R4, #+0]
   \       0x62   0xE000             B.N      ??free_8
     83              }
     84              else
     85              {
     86                  p->s.ptr = bp;
   \                     ??free_7: (+1)
   \       0x64   0x6022             STR      R2,[R4, #+0]
     87              }
     88          
     89              freep = p;
   \                     ??free_8: (+1)
   \       0x66   0x601C             STR      R4,[R3, #+0]
     90          }
   \       0x68   0xBC30             POP      {R4,R5}
   \       0x6A   0x4770             BX       LR               ;; return
     91          
     92          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     93          void * malloc (unsigned nbytes)
     94          {
   \                     malloc: (+1)
   \        0x0   0xB4F0             PUSH     {R4-R7}
   \        0x2   0x0002             MOVS     R2,R0
     95              /* Get addresses for the HEAP start and end */
     96              #if defined(__IAR_SYSTEMS_ICC__)
     97                char* __HEAP_START = __section_begin("HEAP");
   \        0x4   0x....             LDR.N    R3,??DataTable1_1
     98                char* __HEAP_END = __section_end("HEAP");
   \        0x6   0x....             LDR.N    R4,??DataTable1_2
     99              #else
    100                #warning 非IAR编译器需确定HEAP起始结束地址
    101                extern char __HEAP_START;
    102                extern char __HEAP_END[];
    103              #endif
    104             
    105              ALLOC_HDR *p, *prevp;
    106              unsigned nunits;
    107          
    108              nunits = ((nbytes+sizeof(ALLOC_HDR)-1) / sizeof(ALLOC_HDR)) + 1;
   \        0x8   0xF112 0x050F      ADDS     R5,R2,#+15
   \        0xC   0x092D             LSRS     R5,R5,#+4
   \        0xE   0x1C6D             ADDS     R5,R5,#+1
    109          
    110              if ((prevp = freep) == NULL)
   \       0x10   0x....             LDR.N    R0,??DataTable1
   \       0x12   0x6801             LDR      R1,[R0, #+0]
   \       0x14   0x2900             CMP      R1,#+0
   \       0x16   0xD10D             BNE.N    ??malloc_0
    111              {
    112                  p = (ALLOC_HDR *)__HEAP_START;
   \       0x18   0x001F             MOVS     R7,R3
    113                  p->s.size = ( ((uint32)__HEAP_END - (uint32)__HEAP_START)
    114                      / sizeof(ALLOC_HDR) );
   \       0x1A   0x1AE6             SUBS     R6,R4,R3
   \       0x1C   0x0936             LSRS     R6,R6,#+4
   \       0x1E   0x607E             STR      R6,[R7, #+4]
    115                  p->s.ptr = &base;
   \       0x20   0x....             LDR.N    R6,??DataTable1_3
   \       0x22   0x603E             STR      R6,[R7, #+0]
    116                  base.s.ptr = p;
   \       0x24   0x6037             STR      R7,[R6, #+0]
    117                  base.s.size = 0;
   \       0x26   0xF05F 0x0C00      MOVS     R12,#+0
   \       0x2A   0xF8C6 0xC004      STR      R12,[R6, #+4]
    118                  prevp = freep = &base;
   \       0x2E   0x6006             STR      R6,[R0, #+0]
   \       0x30   0x6806             LDR      R6,[R0, #+0]
   \       0x32   0x0031             MOVS     R1,R6
    119              }
    120          
    121              for (p = prevp->s.ptr; ; prevp = p, p = p->s.ptr)
   \                     ??malloc_0: (+1)
   \       0x34   0x680E             LDR      R6,[R1, #+0]
    122              {
    123                  if (p->s.size >= nunits)
   \                     ??malloc_1: (+1)
   \       0x36   0x6877             LDR      R7,[R6, #+4]
   \       0x38   0x42AF             CMP      R7,R5
   \       0x3A   0xD310             BCC.N    ??malloc_2
    124                  {
    125                      if (p->s.size == nunits)
   \       0x3C   0x6877             LDR      R7,[R6, #+4]
   \       0x3E   0x42AF             CMP      R7,R5
   \       0x40   0xD102             BNE.N    ??malloc_3
    126                      {
    127                          prevp->s.ptr = p->s.ptr;
   \       0x42   0x6837             LDR      R7,[R6, #+0]
   \       0x44   0x600F             STR      R7,[R1, #+0]
   \       0x46   0xE006             B.N      ??malloc_4
    128                      }
    129                      else
    130                      {
    131                          p->s.size -= nunits;
   \                     ??malloc_3: (+1)
   \       0x48   0x6877             LDR      R7,[R6, #+4]
   \       0x4A   0x1B7F             SUBS     R7,R7,R5
   \       0x4C   0x6077             STR      R7,[R6, #+4]
    132                          p += p->s.size;
   \       0x4E   0x6877             LDR      R7,[R6, #+4]
   \       0x50   0x013F             LSLS     R7,R7,#+4
   \       0x52   0x443E             ADD      R6,R6,R7
    133                          p->s.size = nunits;
   \       0x54   0x6075             STR      R5,[R6, #+4]
    134                      }
    135                      freep = prevp;
   \                     ??malloc_4: (+1)
   \       0x56   0x6001             STR      R1,[R0, #+0]
    136                      return (void *)(p + 1);
   \       0x58   0xF116 0x0010      ADDS     R0,R6,#+16
   \       0x5C   0xE007             B.N      ??malloc_5
    137                  }
    138          
    139                  if (p == freep)
   \                     ??malloc_2: (+1)
   \       0x5E   0x6807             LDR      R7,[R0, #+0]
   \       0x60   0x42BE             CMP      R6,R7
   \       0x62   0xD101             BNE.N    ??malloc_6
    140                      return NULL;
   \       0x64   0x2000             MOVS     R0,#+0
   \       0x66   0xE002             B.N      ??malloc_5
    141              }
   \                     ??malloc_6: (+1)
   \       0x68   0x0031             MOVS     R1,R6
   \       0x6A   0x6836             LDR      R6,[R6, #+0]
   \       0x6C   0xE7E3             B.N      ??malloc_1
   \                     ??malloc_5: (+1)
   \       0x6E   0xBCF0             POP      {R4-R7}
   \       0x70   0x4770             BX       LR               ;; return
    142          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x....'....        DC32     freep

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \        0x0   0x....'....        DC32     SFB(HEAP)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \        0x0   0x....'....        DC32     SFE(HEAP)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \        0x0   0x....'....        DC32     base
    143          
    144          /********************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   free
      16   malloc


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
      16  base
     108  free
       4  freep
     114  malloc

 
  20 bytes in section .bss
 238 bytes in section .text
 
 238 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: 1
