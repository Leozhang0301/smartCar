###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.1.169/W32 for ARM         08/Jul/2019  00:40:54
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  G:\AIcar\@@\xiugai\lib\common\findtrack.c
#    Command line =  
#        -f C:\Users\admin\AppData\Local\Temp\EW5CF5.tmp
#        (G:\AIcar\@@\xiugai\lib\common\findtrack.c -D LPLD_K60 -lCN
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\List"
#        -lB
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\List"
#        -o "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        G:\AIcar\arm\inc\c\DLib_Config_Normal.h -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\app\" -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\CPU\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\common\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\HW\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\DEV\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Ports\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Source\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\option\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\common\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\driver\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\descriptor\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\class\"
#        -I
#        "G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\Jay\"
#        -On -I G:\AIcar\arm\CMSIS\Core\Include\ -I
#        G:\AIcar\arm\CMSIS\DSP\Include\ -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\List\findtrack.lst
#    Object file  =  
#        G:\AIcar\@@\xiugai\project\28-(SDHC)LPLD_SdCard\iar\FLASH\Obj\findtrack.o
#
###############################################################################

G:\AIcar\@@\xiugai\lib\common\findtrack.c
      1          #include "include.h"
      2          
      3          void delay_cheak();
      4          

   \                                 In section .bss, align 4
      5          int WHITE_SUM = 0;//
   \                     WHITE_SUM:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
      6          int BLACK_PICTURE = 0;
   \                     BLACK_PICTURE:
   \        0x0                      DS8 4

   \                                 In section .data, align 4
      7          int WHITE_SUM_LAST = 500;
   \                     WHITE_SUM_LAST:
   \        0x0   0x0000'01F4        DC32 500

   \                                 In section .bss, align 4
      8          int MIDDLE_I = 0;
   \                     MIDDLE_I:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
      9          int MIDDLE_J  = 0;
   \                     MIDDLE_J:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
     10          int MIDDLE_I_LAST = 0;
   \                     MIDDLE_I_LAST:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
     11          int MIDDLE_J_LAST  = 0;
   \                     MIDDLE_J_LAST:
   \        0x0                      DS8 4
     12          

   \                                 In section .data, align 2
     13          int16 BLACK_PICTURE_COUNT = 12; //黑色图片计数最大值
   \                     BLACK_PICTURE_COUNT:
   \        0x0   0x000C             DC16 12

   \                                 In section .data, align 2
     14          int16 i_max = 14; //判断提前拐弯
   \                     i_max:
   \        0x0   0x000E             DC16 14

   \                                 In section .data, align 2
     15          int16 i_min = 18; //判断提前拐弯
   \                     i_min:
   \        0x0   0x0012             DC16 18

   \                                 In section .data, align 2
     16          int16 offset = 5; //目标偏移量
   \                     offset:
   \        0x0   0x0005             DC16 5

   \                                 In section .data, align 4
     17          float offset_k = 2.5f;  //系数
   \                     offset_k:
   \        0x0   0x4020'0000        DC32 40200000H

   \                                 In section .data, align 1
     18          boolean lamp_pass = 1;
   \                     lamp_pass:
   \        0x0   0x01               DC8 1

   \                                 In section .bss, align 1
     19          boolean start = 0;
   \                     start:
   \        0x0                      DS8 1

   \                                 In section .bss, align 1
     20          boolean cheak_start = 0;
   \                     cheak_start:
   \        0x0                      DS8 1

   \                                 In section .bss, align 1
     21          boolean back = 0;
   \                     back:
   \        0x0                      DS8 1

   \                                 In section .bss, align 4
     22          int i_sum = 0;
   \                     i_sum:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
     23          int j_sum = 0;
   \                     j_sum:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
     24          int i_num = 0;
   \                     i_num:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
     25          int j_num = 0;
   \                     j_num:
   \        0x0                      DS8 4
     26          

   \                                 In section .bss, align 4
     27          int GO = 0;
   \                     GO:
   \        0x0                      DS8 4
     28          
     29          

   \                                 In section .rodata, align 4
     30          const int16 target_error[] = 
   \                     target_error:
   \        0x0   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
   \               0x0000 0x000
   \              0 0x0000 0x00
   \              01 0x0001 0x0
   \              001 0x0001 0x
   \              0001 0x0002 0
   \              x0002 0x0002 
   \              0x0002 0x0002
   \               0x0002 0x000
   \              2 0x0002 0x00
   \              02 0x0002 0x0
   \              002 0x0002   
   \       0x2C   0x0002 0x0002      DC16 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
   \               0x0002 0x000
   \              2 0x0002 0x00
   \              02 0x0002 0x0
   \              002 0x0002 0x
   \              0002 0x0002 0
   \              x0002 0x0002 
   \              0x0002 0x0002
   \               0x0002 0x000
   \              2 0x0002 0x00
   \              02 0x0002 0x0
   \              002 0x0002   
   \       0x58   0x0002 0x0002      DC16 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
   \               0x0002 0x000
   \              2 0x0002 0x00
   \              02 0x0002 0x0
   \              002 0x0002 0x
   \              0002 0x0002 0
   \              x0002 0x0002 
   \              0x0002 0x0002
   \               0x0002      
     31          {
     32            0,0,0,0,0,
     33            1,1,1,1,1,
     34            2,2,2,2,2,
     35            2,2,2,2,2,
     36            2,2,2,2,2,
     37            2,2,2,2,2,
     38            2,2,2,2,2,
     39            2,2,2,2,2,
     40            2,2,2,2,2,
     41            2,2,2,2,2,
     42            2,2,2,2,2,
     43            2,2,2,2,2,
     44          };
     45          
     46          
     47          

   \                                 In section .text, align 2, keep-with-next
     48          int target_offset(int y)  //目标偏移
     49          {
   \                     target_offset: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
     50            
     51            int x = 0;
   \        0x4   0x2500             MOVS     R5,#+0
     52            x = (int)(y/offset_k);
   \        0x6   0x0020             MOVS     R0,R4
   \        0x8   0x....'....        BL       __aeabi_i2f
   \        0xC   0x....             LDR.N    R1,??DataTable3
   \        0xE   0x6809             LDR      R1,[R1, #+0]
   \       0x10   0x....'....        BL       __aeabi_fdiv
   \       0x14   0x....'....        BL       __aeabi_f2iz
     53            if(x > offset) x = offset;
   \       0x18   0x....             LDR.N    R1,??DataTable3_1
   \       0x1A   0xF9B1 0x2000      LDRSH    R2,[R1, #+0]
   \       0x1E   0x4282             CMP      R2,R0
   \       0x20   0xDA02             BGE.N    ??target_offset_0
   \       0x22   0xF9B1 0x1000      LDRSH    R1,[R1, #+0]
   \       0x26   0x0008             MOVS     R0,R1
     54            return x;
   \                     ??target_offset_0: (+1)
   \       0x28   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     55          }
     56          

   \                                 In section .text, align 2, keep-with-next
     57          void findtrack()
     58          {
   \                     findtrack: (+1)
   \        0x0   0xB430             PUSH     {R4,R5}
     59            for (int i = 1; i < IMG_ROWS - 1; i ++)
   \        0x2   0x2101             MOVS     R1,#+1
   \                     ??findtrack_0: (+1)
   \        0x4   0x293B             CMP      R1,#+59
   \        0x6   0xF280 0x808F      BGE.W    ??findtrack_1
     60            {
     61              for (int j = 1; j < IMG_COLS  - 1; j ++)
   \        0xA   0x2201             MOVS     R2,#+1
   \                     ??findtrack_2: (+1)
   \        0xC   0x2A4F             CMP      R2,#+79
   \        0xE   0xF280 0x8089      BGE.W    ??findtrack_3
     62              {
     63                if( imgbuff[i][j] == WHITE )
   \       0x12   0x2350             MOVS     R3,#+80
   \       0x14   0x....             LDR.N    R4,??DataTable3_2
   \       0x16   0xFB03 0xF001      MUL      R0,R3,R1
   \       0x1A   0x4420             ADD      R0,R4,R0
   \       0x1C   0x5C80             LDRB     R0,[R0, R2]
   \       0x1E   0x28FF             CMP      R0,#+255
   \       0x20   0xD103             BNE.N    ??findtrack_4
     64                {
     65                  WHITE_SUM ++; //白点列统计
   \       0x22   0x....             LDR.N    R0,??DataTable3_3
   \       0x24   0x6805             LDR      R5,[R0, #+0]
   \       0x26   0x1C6D             ADDS     R5,R5,#+1
   \       0x28   0x6005             STR      R5,[R0, #+0]
     66                }
     67                if(imgbuff[i][j] == BLACK && imgbuff[i][j+1] == WHITE )
   \                     ??findtrack_4: (+1)
   \       0x2A   0xFB03 0xF001      MUL      R0,R3,R1
   \       0x2E   0x4420             ADD      R0,R4,R0
   \       0x30   0x5C80             LDRB     R0,[R0, R2]
   \       0x32   0x2800             CMP      R0,#+0
   \       0x34   0xD117             BNE.N    ??findtrack_5
   \       0x36   0xFB03 0xF001      MUL      R0,R3,R1
   \       0x3A   0x4420             ADD      R0,R4,R0
   \       0x3C   0x4410             ADD      R0,R0,R2
   \       0x3E   0x7840             LDRB     R0,[R0, #+1]
   \       0x40   0x28FF             CMP      R0,#+255
   \       0x42   0xD110             BNE.N    ??findtrack_5
     68                {
     69                  i_sum += i;
   \       0x44   0x....             LDR.N    R0,??DataTable3_4
   \       0x46   0x6803             LDR      R3,[R0, #+0]
   \       0x48   0x18CB             ADDS     R3,R1,R3
   \       0x4A   0x6003             STR      R3,[R0, #+0]
     70                  j_sum += j;
   \       0x4C   0x....             LDR.N    R0,??DataTable3_5
   \       0x4E   0x6803             LDR      R3,[R0, #+0]
   \       0x50   0x18D3             ADDS     R3,R2,R3
   \       0x52   0x6003             STR      R3,[R0, #+0]
     71                  i_num ++;
   \       0x54   0x....             LDR.N    R0,??DataTable3_6
   \       0x56   0x6803             LDR      R3,[R0, #+0]
   \       0x58   0x1C5B             ADDS     R3,R3,#+1
   \       0x5A   0x6003             STR      R3,[R0, #+0]
     72                  j_num ++;
   \       0x5C   0x....             LDR.N    R0,??DataTable3_7
   \       0x5E   0x6803             LDR      R3,[R0, #+0]
   \       0x60   0x1C5B             ADDS     R3,R3,#+1
   \       0x62   0x6003             STR      R3,[R0, #+0]
   \       0x64   0xE05C             B.N      ??findtrack_6
     73                }
     74                else if(imgbuff[i][j] == BLACK && imgbuff[i][j-1] == WHITE )
   \                     ??findtrack_5: (+1)
   \       0x66   0xFB03 0xF001      MUL      R0,R3,R1
   \       0x6A   0x4420             ADD      R0,R4,R0
   \       0x6C   0x5C80             LDRB     R0,[R0, R2]
   \       0x6E   0x2800             CMP      R0,#+0
   \       0x70   0xD118             BNE.N    ??findtrack_7
   \       0x72   0xFB03 0xF001      MUL      R0,R3,R1
   \       0x76   0x4420             ADD      R0,R4,R0
   \       0x78   0x4410             ADD      R0,R0,R2
   \       0x7A   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \       0x7E   0x28FF             CMP      R0,#+255
   \       0x80   0xD110             BNE.N    ??findtrack_7
     75                {
     76                  i_sum += i;
   \       0x82   0x....             LDR.N    R0,??DataTable3_4
   \       0x84   0x6803             LDR      R3,[R0, #+0]
   \       0x86   0x18CB             ADDS     R3,R1,R3
   \       0x88   0x6003             STR      R3,[R0, #+0]
     77                  j_sum += j;
   \       0x8A   0x....             LDR.N    R0,??DataTable3_5
   \       0x8C   0x6803             LDR      R3,[R0, #+0]
   \       0x8E   0x18D3             ADDS     R3,R2,R3
   \       0x90   0x6003             STR      R3,[R0, #+0]
     78                  i_num ++;
   \       0x92   0x....             LDR.N    R0,??DataTable3_6
   \       0x94   0x6803             LDR      R3,[R0, #+0]
   \       0x96   0x1C5B             ADDS     R3,R3,#+1
   \       0x98   0x6003             STR      R3,[R0, #+0]
     79                  j_num ++;
   \       0x9A   0x....             LDR.N    R0,??DataTable3_7
   \       0x9C   0x6803             LDR      R3,[R0, #+0]
   \       0x9E   0x1C5B             ADDS     R3,R3,#+1
   \       0xA0   0x6003             STR      R3,[R0, #+0]
   \       0xA2   0xE03D             B.N      ??findtrack_6
     80                }
     81                else if(imgbuff[i][j] == BLACK && imgbuff[i+1][j] == WHITE )
   \                     ??findtrack_7: (+1)
   \       0xA4   0xFB03 0xF001      MUL      R0,R3,R1
   \       0xA8   0x4420             ADD      R0,R4,R0
   \       0xAA   0x5C80             LDRB     R0,[R0, R2]
   \       0xAC   0x2800             CMP      R0,#+0
   \       0xAE   0xD118             BNE.N    ??findtrack_8
   \       0xB0   0xFB03 0xF001      MUL      R0,R3,R1
   \       0xB4   0x4420             ADD      R0,R4,R0
   \       0xB6   0x4410             ADD      R0,R0,R2
   \       0xB8   0xF890 0x0050      LDRB     R0,[R0, #+80]
   \       0xBC   0x28FF             CMP      R0,#+255
   \       0xBE   0xD110             BNE.N    ??findtrack_8
     82                {
     83                  i_sum += i;
   \       0xC0   0x....             LDR.N    R0,??DataTable3_4
   \       0xC2   0x6803             LDR      R3,[R0, #+0]
   \       0xC4   0x18CB             ADDS     R3,R1,R3
   \       0xC6   0x6003             STR      R3,[R0, #+0]
     84                  j_sum += j;
   \       0xC8   0x....             LDR.N    R0,??DataTable3_5
   \       0xCA   0x6803             LDR      R3,[R0, #+0]
   \       0xCC   0x18D3             ADDS     R3,R2,R3
   \       0xCE   0x6003             STR      R3,[R0, #+0]
     85                  i_num ++;
   \       0xD0   0x....             LDR.N    R0,??DataTable3_6
   \       0xD2   0x6803             LDR      R3,[R0, #+0]
   \       0xD4   0x1C5B             ADDS     R3,R3,#+1
   \       0xD6   0x6003             STR      R3,[R0, #+0]
     86                  j_num ++;
   \       0xD8   0x....             LDR.N    R0,??DataTable3_7
   \       0xDA   0x6803             LDR      R3,[R0, #+0]
   \       0xDC   0x1C5B             ADDS     R3,R3,#+1
   \       0xDE   0x6003             STR      R3,[R0, #+0]
   \       0xE0   0xE01E             B.N      ??findtrack_6
     87                }
     88                else if(imgbuff[i][j] == BLACK && imgbuff[i-1][j] == WHITE )
   \                     ??findtrack_8: (+1)
   \       0xE2   0xFB03 0xF001      MUL      R0,R3,R1
   \       0xE6   0x4420             ADD      R0,R4,R0
   \       0xE8   0x5C80             LDRB     R0,[R0, R2]
   \       0xEA   0x2800             CMP      R0,#+0
   \       0xEC   0xD118             BNE.N    ??findtrack_6
   \       0xEE   0xFB03 0xF301      MUL      R3,R3,R1
   \       0xF2   0xEB04 0x0003      ADD      R0,R4,R3
   \       0xF6   0x4410             ADD      R0,R0,R2
   \       0xF8   0xF810 0x0C50      LDRB     R0,[R0, #-80]
   \       0xFC   0x28FF             CMP      R0,#+255
   \       0xFE   0xD10F             BNE.N    ??findtrack_6
     89                {
     90                  i_sum += i;
   \      0x100   0x....             LDR.N    R0,??DataTable3_4
   \      0x102   0x6803             LDR      R3,[R0, #+0]
   \      0x104   0x18CB             ADDS     R3,R1,R3
   \      0x106   0x6003             STR      R3,[R0, #+0]
     91                  j_sum += j;
   \      0x108   0x....             LDR.N    R0,??DataTable3_5
   \      0x10A   0x6803             LDR      R3,[R0, #+0]
   \      0x10C   0x18D3             ADDS     R3,R2,R3
   \      0x10E   0x6003             STR      R3,[R0, #+0]
     92                  i_num ++;
   \      0x110   0x....             LDR.N    R0,??DataTable3_6
   \      0x112   0x6803             LDR      R3,[R0, #+0]
   \      0x114   0x1C5B             ADDS     R3,R3,#+1
   \      0x116   0x6003             STR      R3,[R0, #+0]
     93                  j_num ++;
   \      0x118   0x....             LDR.N    R0,??DataTable3_7
   \      0x11A   0x6803             LDR      R3,[R0, #+0]
   \      0x11C   0x1C5B             ADDS     R3,R3,#+1
   \      0x11E   0x6003             STR      R3,[R0, #+0]
     94                }
     95              }
   \                     ??findtrack_6: (+1)
   \      0x120   0x1C52             ADDS     R2,R2,#+1
   \      0x122   0xE773             B.N      ??findtrack_2
     96            }
   \                     ??findtrack_3: (+1)
   \      0x124   0x1C49             ADDS     R1,R1,#+1
   \      0x126   0xE76D             B.N      ??findtrack_0
     97            
     98            if(WHITE_SUM != 0)
   \                     ??findtrack_1: (+1)
   \      0x128   0x....             LDR.N    R0,??DataTable3_3
   \      0x12A   0x6800             LDR      R0,[R0, #+0]
   \      0x12C   0x2800             CMP      R0,#+0
   \      0x12E   0xD01F             BEQ.N    ??findtrack_9
     99            {
    100              if(i_num == 0)                 //分母不能为0
   \      0x130   0x....             LDR.N    R1,??DataTable3_6
   \      0x132   0x6808             LDR      R0,[R1, #+0]
   \      0x134   0x2800             CMP      R0,#+0
   \      0x136   0xD104             BNE.N    ??findtrack_10
    101                
    102              {
    103                MIDDLE_I = (int)i_sum;
   \      0x138   0x....             LDR.N    R0,??DataTable3_4
   \      0x13A   0x6800             LDR      R0,[R0, #+0]
   \      0x13C   0x....             LDR.N    R1,??DataTable3_8
   \      0x13E   0x6008             STR      R0,[R1, #+0]
   \      0x140   0xE006             B.N      ??findtrack_11
    104              }
    105              else
    106              {
    107                MIDDLE_I = (int)(i_sum/i_num); 
   \                     ??findtrack_10: (+1)
   \      0x142   0x....             LDR.N    R0,??DataTable3_4
   \      0x144   0x6800             LDR      R0,[R0, #+0]
   \      0x146   0x6809             LDR      R1,[R1, #+0]
   \      0x148   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \      0x14C   0x....             LDR.N    R1,??DataTable3_8
   \      0x14E   0x6008             STR      R0,[R1, #+0]
    108              }
    109              if(j_num == 0 )
   \                     ??findtrack_11: (+1)
   \      0x150   0x....             LDR.N    R1,??DataTable3_7
   \      0x152   0x6808             LDR      R0,[R1, #+0]
   \      0x154   0x2800             CMP      R0,#+0
   \      0x156   0xD104             BNE.N    ??findtrack_12
    110              {
    111                MIDDLE_J =  j_sum;
   \      0x158   0x....             LDR.N    R0,??DataTable3_5
   \      0x15A   0x6800             LDR      R0,[R0, #+0]
   \      0x15C   0x....             LDR.N    R1,??DataTable3_9
   \      0x15E   0x6008             STR      R0,[R1, #+0]
   \      0x160   0xE006             B.N      ??findtrack_9
    112              }
    113              else 
    114              {
    115                MIDDLE_J = (j_sum/j_num);
   \                     ??findtrack_12: (+1)
   \      0x162   0x....             LDR.N    R0,??DataTable3_5
   \      0x164   0x6800             LDR      R0,[R0, #+0]
   \      0x166   0x6809             LDR      R1,[R1, #+0]
   \      0x168   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \      0x16C   0x....             LDR.N    R1,??DataTable3_9
   \      0x16E   0x6008             STR      R0,[R1, #+0]
    116              }
    117              
    118              /*if(MIDDLE_I - MIDDLE_I_LAST > target_error[MIDDLE_I_LAST] || MIDDLE_I - MIDDLE_I_LAST <= -target_error[MIDDLE_I_LAST] 
    119                 || MIDDLE_J - MIDDLE_J_LAST > target_error[MIDDLE_I_LAST] || MIDDLE_J - MIDDLE_J_LAST <= -target_error[MIDDLE_I_LAST])
    120              { 
    121                MIDDLE_I_LAST = MIDDLE_I;
    122                MIDDLE_J_LAST = MIDDLE_J;
    123              }
    124              else
    125              {
    126                MIDDLE_I = MIDDLE_I_LAST;
    127                MIDDLE_J = MIDDLE_J_LAST;
    128              }*/
    129            } 
    130            i_sum = 0;
   \                     ??findtrack_9: (+1)
   \      0x170   0x2000             MOVS     R0,#+0
   \      0x172   0x....             LDR.N    R1,??DataTable3_4
   \      0x174   0x6008             STR      R0,[R1, #+0]
    131            i_num = 0;   
   \      0x176   0x2000             MOVS     R0,#+0
   \      0x178   0x....             LDR.N    R1,??DataTable3_6
   \      0x17A   0x6008             STR      R0,[R1, #+0]
    132            j_sum = 0;
   \      0x17C   0x2000             MOVS     R0,#+0
   \      0x17E   0x....             LDR.N    R1,??DataTable3_5
   \      0x180   0x6008             STR      R0,[R1, #+0]
    133            j_num = 0;
   \      0x182   0x2000             MOVS     R0,#+0
   \      0x184   0x....             LDR.N    R1,??DataTable3_7
   \      0x186   0x6008             STR      R0,[R1, #+0]
    134          }
   \      0x188   0xBC30             POP      {R4,R5}
   \      0x18A   0x4770             BX       LR               ;; return
    135          
    136          

   \                                 In section .text, align 2, keep-with-next
    137          void ifpass(void)            //  是否通过
    138          {
    139            for(int i = 0; i < IMG_ROWS; i ++)
   \                     ifpass: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \                     ??ifpass_0: (+1)
   \        0x2   0x283C             CMP      R0,#+60
   \        0x4   0xDA12             BGE.N    ??ifpass_1
    140            {
    141              for (int j = 0; j < IMG_COLS; j ++)
   \        0x6   0x2100             MOVS     R1,#+0
   \                     ??ifpass_2: (+1)
   \        0x8   0x2950             CMP      R1,#+80
   \        0xA   0xDA0D             BGE.N    ??ifpass_3
    142              {
    143                if(imgbuff[i][j] == WHITE)
   \        0xC   0x....             LDR.N    R2,??DataTable3_2
   \        0xE   0x2350             MOVS     R3,#+80
   \       0x10   0xFB03 0xF300      MUL      R3,R3,R0
   \       0x14   0x441A             ADD      R2,R2,R3
   \       0x16   0x5C52             LDRB     R2,[R2, R1]
   \       0x18   0x2AFF             CMP      R2,#+255
   \       0x1A   0xD103             BNE.N    ??ifpass_4
    144                {
    145                  BLACK_PICTURE = 0;
   \       0x1C   0x2200             MOVS     R2,#+0
   \       0x1E   0x....             LDR.N    R3,??DataTable3_10
   \       0x20   0x601A             STR      R2,[R3, #+0]
    146                  return;
   \       0x22   0xE007             B.N      ??ifpass_5
    147                }
    148              }
   \                     ??ifpass_4: (+1)
   \       0x24   0x1C49             ADDS     R1,R1,#+1
   \       0x26   0xE7EF             B.N      ??ifpass_2
    149            }
   \                     ??ifpass_3: (+1)
   \       0x28   0x1C40             ADDS     R0,R0,#+1
   \       0x2A   0xE7EA             B.N      ??ifpass_0
    150            BLACK_PICTURE ++;
   \                     ??ifpass_1: (+1)
   \       0x2C   0x....             LDR.N    R0,??DataTable3_10
   \       0x2E   0x6801             LDR      R1,[R0, #+0]
   \       0x30   0x1C49             ADDS     R1,R1,#+1
   \       0x32   0x6001             STR      R1,[R0, #+0]
    151          }
   \                     ??ifpass_5: (+1)
   \       0x34   0x4770             BX       LR               ;; return
    152          

   \                                 In section .text, align 2, keep-with-next
    153          void find_next(void)          // 寻找下一个信标
    154          {
    155            for(int i = 0; i < IMG_ROWS; i ++)
   \                     find_next: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \                     ??find_next_0: (+1)
   \        0x2   0x283C             CMP      R0,#+60
   \        0x4   0xDA2E             BGE.N    ??find_next_1
    156            {
    157              for (int j = 0; j < IMG_COLS; j ++)
   \        0x6   0x2100             MOVS     R1,#+0
   \                     ??find_next_2: (+1)
   \        0x8   0x2950             CMP      R1,#+80
   \        0xA   0xDA29             BGE.N    ??find_next_3
    158              {
    159                if(imgbuff[i][j] == WHITE)
   \        0xC   0x....             LDR.N    R2,??DataTable3_2
   \        0xE   0x2350             MOVS     R3,#+80
   \       0x10   0xFB03 0xF300      MUL      R3,R3,R0
   \       0x14   0x441A             ADD      R2,R2,R3
   \       0x16   0x5C52             LDRB     R2,[R2, R1]
   \       0x18   0x2AFF             CMP      R2,#+255
   \       0x1A   0xD11F             BNE.N    ??find_next_4
    160                {
    161                  WHITE_SUM++;
   \       0x1C   0x....             LDR.N    R2,??DataTable3_3
   \       0x1E   0x6813             LDR      R3,[R2, #+0]
   \       0x20   0x1C5B             ADDS     R3,R3,#+1
   \       0x22   0x6013             STR      R3,[R2, #+0]
    162                  if(WHITE_SUM > 0)
   \       0x24   0x6812             LDR      R2,[R2, #+0]
   \       0x26   0x2A01             CMP      R2,#+1
   \       0x28   0xDB18             BLT.N    ??find_next_4
    163                  {
    164                    lamp_pass = 0;
   \       0x2A   0x2200             MOVS     R2,#+0
   \       0x2C   0x....             LDR.N    R3,??DataTable3_11
   \       0x2E   0x701A             STRB     R2,[R3, #+0]
    165                    start = 1;
   \       0x30   0x2201             MOVS     R2,#+1
   \       0x32   0x....             LDR.N    R3,??DataTable3_12
   \       0x34   0x701A             STRB     R2,[R3, #+0]
    166                    BLACK_PICTURE = 0;
   \       0x36   0x2200             MOVS     R2,#+0
   \       0x38   0x....             LDR.N    R3,??DataTable3_10
   \       0x3A   0x601A             STR      R2,[R3, #+0]
    167                    MIDDLE_I = 0;
   \       0x3C   0x2200             MOVS     R2,#+0
   \       0x3E   0x....             LDR.N    R3,??DataTable3_8
   \       0x40   0x601A             STR      R2,[R3, #+0]
    168                    MIDDLE_J  = 0;
   \       0x42   0x2200             MOVS     R2,#+0
   \       0x44   0x....             LDR.N    R3,??DataTable3_9
   \       0x46   0x601A             STR      R2,[R3, #+0]
    169                    MIDDLE_I_LAST = 0;
   \       0x48   0x2200             MOVS     R2,#+0
   \       0x4A   0x....             LDR.N    R3,??DataTable3_13
   \       0x4C   0x601A             STR      R2,[R3, #+0]
    170                    MIDDLE_J_LAST  = 0;         
   \       0x4E   0x2200             MOVS     R2,#+0
   \       0x50   0x....             LDR.N    R3,??DataTable3_14
   \       0x52   0x601A             STR      R2,[R3, #+0]
    171                    GO = SpeedHigh;  //找到灯加速    
   \       0x54   0x....             LDR.N    R2,??DataTable3_15
   \       0x56   0x6812             LDR      R2,[R2, #+0]
   \       0x58   0x....             LDR.N    R3,??DataTable3_16
   \       0x5A   0x601A             STR      R2,[R3, #+0]
    172                  }
    173                }
    174              }
   \                     ??find_next_4: (+1)
   \       0x5C   0x1C49             ADDS     R1,R1,#+1
   \       0x5E   0xE7D3             B.N      ??find_next_2
    175            } 
   \                     ??find_next_3: (+1)
   \       0x60   0x1C40             ADDS     R0,R0,#+1
   \       0x62   0xE7CE             B.N      ??find_next_0
    176          }
   \                     ??find_next_1: (+1)
   \       0x64   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0x....'....        DC32     offset_k

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0x....'....        DC32     offset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0x....'....        DC32     imgbuff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \        0x0   0x....'....        DC32     WHITE_SUM

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \        0x0   0x....'....        DC32     i_sum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \        0x0   0x....'....        DC32     j_sum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \        0x0   0x....'....        DC32     i_num

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \        0x0   0x....'....        DC32     j_num

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \        0x0   0x....'....        DC32     MIDDLE_I

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \        0x0   0x....'....        DC32     MIDDLE_J

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \        0x0   0x....'....        DC32     BLACK_PICTURE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \        0x0   0x....'....        DC32     lamp_pass

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \        0x0   0x....'....        DC32     start

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \        0x0   0x....'....        DC32     MIDDLE_I_LAST

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \        0x0   0x....'....        DC32     MIDDLE_J_LAST

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \        0x0   0x....'....        DC32     SpeedHigh

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_16:
   \        0x0   0x....'....        DC32     GO
    177          
    178          
    179          
    180          //int Calculate()
    181          //{ 
    182          //  int16 target = 0;
    183          //  if(lamp_pass == 0)   // 找灯
    184          //  {
    185          //    if(BLACK_PICTURE < BLACK_PICTURE_COUNT)//小于count不判断过灯
    186          //    {
    187          //      ifpass();
    188          //      findtrack();
    189          //    }
    190          //    else
    191          //    {
    192          //      lamp_pass = 1;
    193          //      
    194          //      MIDDLE_J = 0;
    195          //      
    196          //      GO = SpeedLow;   //过弯减速
    197          //    }   
    198          //  }
    199          //  
    200          //  if(lamp_pass == 1)   //判断过灯
    201          //  {
    202          //    if(start == 0)   //未启动初始化
    203          //    {
    204          //      MIDDLE_J = 39;
    205          //    }
    206          //    if(BLACK_PICTURE < BLACK_PICTURE_COUNT)//小于count不判断过灯
    207          //    {
    208          //      ifpass();
    209          //    }
    210          //    else  
    211          //    {
    212          //      find_next(); 
    213          //    }
    214          //  }
    215          //  if(right_getSpeed() < 40 || left_getSpeed() < 40)
    216          //  {
    217          //    if (MIDDLE_I > i_min)     // 速度小灯近拐弯
    218          //    {
    219          //      lamp_pass = 1;
    220          //      
    221          //      MIDDLE_J = 0;
    222          //      
    223          //      GO = SpeedLow; //过弯减速
    224          //    }
    225          //  }
    226          //  else
    227          //  {
    228          //    if (MIDDLE_I > i_max)     // 速度大灯近拐弯
    229          //    {
    230          //      lamp_pass = 1;
    231          //      
    232          //      MIDDLE_J = 0;
    233          //      GO = SpeedLow; //过弯减速
    234          //    }
    235          //  }
    236          //  
    237          //  if(MIDDLE_J >= 0)
    238          //  {
    239          //    target = MIDDLE_J - target_offset(MIDDLE_I);
    240          //    if(target < 0) target = 0;   
    241          //  }
    242          //  return target;
    243          //}
    244          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   find_next
       8   findtrack
       0   ifpass
      16   target_offset
        16   -> __aeabi_f2iz
        16   -> __aeabi_fdiv
        16   -> __aeabi_i2f


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_16
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
       4  BLACK_PICTURE
       2  BLACK_PICTURE_COUNT
       4  GO
       4  MIDDLE_I
       4  MIDDLE_I_LAST
       4  MIDDLE_J
       4  MIDDLE_J_LAST
       4  WHITE_SUM
       4  WHITE_SUM_LAST
       1  back
       1  cheak_start
     102  find_next
     396  findtrack
       2  i_max
       2  i_min
       4  i_num
       4  i_sum
      54  ifpass
       4  j_num
       4  j_sum
       1  lamp_pass
       2  offset
       4  offset_k
       1  start
     120  target_error
      42  target_offset

 
  47 bytes in section .bss
  17 bytes in section .data
 120 bytes in section .rodata
 662 bytes in section .text
 
 662 bytes of CODE  memory
 120 bytes of CONST memory
  64 bytes of DATA  memory

Errors: none
Warnings: 1
