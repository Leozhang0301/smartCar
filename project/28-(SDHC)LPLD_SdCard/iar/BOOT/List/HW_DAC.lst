###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.1.169/W32 for ARM         23/Apr/2019  21:09:44
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  G:\AIcar\@@\k60_144\smartcar\lib\LPLD\HW\HW_DAC.c
#    Command line =  
#        -f C:\Users\admin\AppData\Local\Temp\EW2F74.tmp
#        (G:\AIcar\@@\k60_144\smartcar\lib\LPLD\HW\HW_DAC.c -D LPLD_K60
#        -lCN
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\BOOT\List"
#        -lB
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\BOOT\List"
#        -o
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\BOOT\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        G:\AIcar\arm\inc\c\DLib_Config_Normal.h -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\app\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\CPU\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\common\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\HW\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\DEV\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Ports\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Source\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\option\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\common\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\driver\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\descriptor\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\class\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\Jay\"
#        -Ol -I G:\AIcar\arm\CMSIS\Core\Include\ -I
#        G:\AIcar\arm\CMSIS\DSP\Include\ -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\BOOT\List\HW_DAC.lst
#    Object file  =  
#        G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\BOOT\Obj\HW_DAC.o
#
###############################################################################

G:\AIcar\@@\k60_144\smartcar\lib\LPLD\HW\HW_DAC.c
      1          /**
      2           * @file HW_DAC.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief DAC底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_EnableIRQ(IRQn_Type)
   \                     __NVIC_EnableIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD409             BMI.N    ??__NVIC_EnableIRQ_0
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0xE   0x408A             LSLS     R2,R2,R1
   \       0x10   0x....'....        LDR.W    R1,??DataTable9  ;; 0xe000e100
   \       0x14   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \       0x16   0x0940             LSRS     R0,R0,#+5
   \       0x18   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \       0x1C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_DisableIRQ(IRQn_Type)
   \                     __NVIC_DisableIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD40D             BMI.N    ??__NVIC_DisableIRQ_0
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0xE   0x408A             LSLS     R2,R2,R1
   \       0x10   0x....'....        LDR.W    R1,??DataTable9_1  ;; 0xe000e180
   \       0x14   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \       0x16   0x0940             LSRS     R0,R0,#+5
   \       0x18   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \       0x1C   0xF3BF 0x8F4F      DSB      SY
   \       0x20   0xF3BF 0x8F6F      ISB      SY
   \                     ??__NVIC_DisableIRQ_0: (+1)
   \       0x24   0x4770             BX       LR               ;; return
     23          #include "HW_DAC.h"
     24          
     25          //用户自定义中断服务函数数组

   \                                 In section .bss, align 4
     26          DAC_ISR_CALLBACK DAC_RDPTBOT_ISR[2];
   \                     DAC_RDPTBOT_ISR:
   \        0x0                      DS8 8

   \                                 In section .bss, align 4
     27          DAC_ISR_CALLBACK DAC_RDPTTOP_ISR[2];
   \                     DAC_RDPTTOP_ISR:
   \        0x0                      DS8 8

   \                                 In section .bss, align 4
     28          DAC_ISR_CALLBACK DAC_WATERMK_ISR[2];
   \                     DAC_WATERMK_ISR:
   \        0x0                      DS8 8
     29          
     30          
     31          /*
     32           * LPLD_DAC_Init
     33           * DAC初始化函数，使能DAC各项功能
     34           * 
     35           * 参数:
     36           *    dac_init_struct--DAC初始化结构体，
     37           *                        具体定义见DAC_InitTypeDef
     38           *
     39           * 输出:
     40           *    0--配置错误
     41           *    1--配置成功
     42           */

   \                                 In section .text, align 2, keep-with-next
     43          uint8 LPLD_DAC_Init(DAC_InitTypeDef dac_init_struct)
     44          {
   \                     LPLD_DAC_Init: (+1)
   \        0x0   0xB40F             PUSH     {R0-R3}
   \        0x2   0xE92D 0x47F0      PUSH     {R4-R10,LR}
     45            uint8 x;
     46            DAC_Type *dacx = dac_init_struct.DAC_Dacx;
   \        0x6   0x9C08             LDR      R4,[SP, #+32]
     47            uint8 work_mode = dac_init_struct.DAC_BufferWorkMode;
   \        0x8   0xF89D 0x5025      LDRB     R5,[SP, #+37]
     48            uint8 watermark = dac_init_struct.DAC_BufferWatermarkSel;
   \        0xC   0xF89D 0x6026      LDRB     R6,[SP, #+38]
     49            uint8 upper = dac_init_struct.DAC_BufferUpperLimit;
   \       0x10   0xF89D 0xA028      LDRB     R10,[SP, #+40]
     50            DAC_ISR_CALLBACK rdptbot_isr = dac_init_struct.DAC_ReadPointerBottomIsr;
   \       0x14   0x9F0C             LDR      R7,[SP, #+48]
     51            DAC_ISR_CALLBACK rdpttop_isr = dac_init_struct.DAC_ReadPointerTopIsr;
   \       0x16   0xF8DD 0x8034      LDR      R8,[SP, #+52]
     52            DAC_ISR_CALLBACK watermk_isr = dac_init_struct.DAC_BufferWatermarkIsr;
   \       0x1A   0xF8DD 0x9038      LDR      R9,[SP, #+56]
     53            
     54            upper = (upper==NULL?1:upper);
   \       0x1E   0x4650             MOV      R0,R10
   \       0x20   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD102             BNE.N    ??LPLD_DAC_Init_0
   \       0x26   0xF05F 0x0A01      MOVS     R10,#+1
   \       0x2A   0xE7FF             B.N      ??LPLD_DAC_Init_1
     55              
     56            //参数检查
     57            ASSERT( work_mode <= BUFFER_MODE_ONETIMESCAN );  //判断模式选择
   \                     ??LPLD_DAC_Init_0: (+1)
   \                     ??LPLD_DAC_Init_1: (+1)
   \       0x2C   0x0028             MOVS     R0,R5
   \       0x2E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x30   0x2803             CMP      R0,#+3
   \       0x32   0xDB04             BLT.N    ??LPLD_DAC_Init_2
   \       0x34   0x2139             MOVS     R1,#+57
   \       0x36   0x....'....        LDR.W    R0,??DataTable9_2
   \       0x3A   0x....'....        BL       assert_failed
     58            ASSERT( watermark <= WATERMARK_4WORDS );      //判断缓冲区水印选择
   \                     ??LPLD_DAC_Init_2: (+1)
   \       0x3E   0x0030             MOVS     R0,R6
   \       0x40   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x42   0x2804             CMP      R0,#+4
   \       0x44   0xDB04             BLT.N    ??LPLD_DAC_Init_3
   \       0x46   0x213A             MOVS     R1,#+58
   \       0x48   0x....'....        LDR.W    R0,??DataTable9_2
   \       0x4C   0x....'....        BL       assert_failed
     59            ASSERT( upper <= 16);         //判断缓冲区上限数值
   \                     ??LPLD_DAC_Init_3: (+1)
   \       0x50   0x4650             MOV      R0,R10
   \       0x52   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x54   0x2811             CMP      R0,#+17
   \       0x56   0xDB04             BLT.N    ??LPLD_DAC_Init_4
   \       0x58   0x213B             MOVS     R1,#+59
   \       0x5A   0x....'....        LDR.W    R0,??DataTable9_2
   \       0x5E   0x....'....        BL       assert_failed
     60              
     61            //配置DAC时钟
     62            if(dacx == DAC0)
   \                     ??LPLD_DAC_Init_4: (+1)
   \       0x62   0x....'....        LDR.W    R0,??DataTable9_3  ;; 0x400cc000
   \       0x66   0x4284             CMP      R4,R0
   \       0x68   0xF040 0x8087      BNE.W    ??LPLD_DAC_Init_5
     63            {
     64              x = 0;
   \       0x6C   0x2000             MOVS     R0,#+0
     65              SIM->SCGC2 |= SIM_SCGC2_DAC0_MASK;   //开启DAC0时钟
   \       0x6E   0x....'....        LDR.W    R1,??DataTable9_4  ;; 0x4004802c
   \       0x72   0x680A             LDR      R2,[R1, #+0]
   \       0x74   0xF452 0x5280      ORRS     R2,R2,#0x1000
   \       0x78   0x600A             STR      R2,[R1, #+0]
     66            }
     67            else if(dacx == DAC1)
     68            {
     69              x = 1;
     70              SIM->SCGC2 |= SIM_SCGC2_DAC1_MASK;   //开启DAC1时钟
     71            }
     72            else 
     73            {
     74              return 0;
     75            }
     76            
     77            //配置C2寄存器
     78            dacx->C2 = DAC_C2_DACBFUP(upper - 1);     //配置缓冲区上限数值
   \                     ??LPLD_DAC_Init_6: (+1)
   \       0x7A   0xF1BA 0x0101      SUBS     R1,R10,#+1
   \       0x7E   0xF011 0x010F      ANDS     R1,R1,#0xF
   \       0x82   0xF884 0x1023      STRB     R1,[R4, #+35]
     79            
     80            //配置C1寄存器
     81            dacx->C1 = 0;
   \       0x86   0x2100             MOVS     R1,#+0
   \       0x88   0xF884 0x1022      STRB     R1,[R4, #+34]
     82            if(dac_init_struct.DAC_BufferEnable == TRUE)
   \       0x8C   0xF89D 0x1024      LDRB     R1,[SP, #+36]
   \       0x90   0x2901             CMP      R1,#+1
   \       0x92   0xD105             BNE.N    ??LPLD_DAC_Init_7
     83            {
     84              dacx->C1 |= DAC_C1_DACBFEN_MASK;    //使能缓冲区 
   \       0x94   0xF894 0x1022      LDRB     R1,[R4, #+34]
   \       0x98   0xF051 0x0101      ORRS     R1,R1,#0x1
   \       0x9C   0xF884 0x1022      STRB     R1,[R4, #+34]
     85            }
     86            dacx->C1 |= DAC_C1_DACBFMD(work_mode);        //缓冲区工作模式配置
   \                     ??LPLD_DAC_Init_7: (+1)
   \       0xA0   0xF894 0x1022      LDRB     R1,[R4, #+34]
   \       0xA4   0x006D             LSLS     R5,R5,#+1
   \       0xA6   0xF015 0x0506      ANDS     R5,R5,#0x6
   \       0xAA   0x430D             ORRS     R5,R5,R1
   \       0xAC   0xF884 0x5022      STRB     R5,[R4, #+34]
     87            dacx->C1 |= DAC_C1_DACBFWM(watermark);        //缓冲区水印选择配置
   \       0xB0   0xF894 0x1022      LDRB     R1,[R4, #+34]
   \       0xB4   0x00F6             LSLS     R6,R6,#+3
   \       0xB6   0xF016 0x0618      ANDS     R6,R6,#0x18
   \       0xBA   0x430E             ORRS     R6,R6,R1
   \       0xBC   0xF884 0x6022      STRB     R6,[R4, #+34]
     88            if(dac_init_struct.DAC_DmaEnable == TRUE)
   \       0xC0   0xF89D 0x1027      LDRB     R1,[SP, #+39]
   \       0xC4   0x2901             CMP      R1,#+1
   \       0xC6   0xD105             BNE.N    ??LPLD_DAC_Init_8
     89            {
     90              dacx->C1 |= DAC_C1_DMAEN_MASK;      //使能DMA
   \       0xC8   0xF894 0x1022      LDRB     R1,[R4, #+34]
   \       0xCC   0xF051 0x0180      ORRS     R1,R1,#0x80
   \       0xD0   0xF884 0x1022      STRB     R1,[R4, #+34]
     91            }
     92            
     93            //配置C0寄存器
     94            dacx->C0 = 0;
   \                     ??LPLD_DAC_Init_8: (+1)
   \       0xD4   0x2100             MOVS     R1,#+0
   \       0xD6   0xF884 0x1021      STRB     R1,[R4, #+33]
     95            if(dac_init_struct.DAC_ReadPointerBottomIntEnable == TRUE && rdptbot_isr != NULL)
   \       0xDA   0xF89D 0x102A      LDRB     R1,[SP, #+42]
   \       0xDE   0x2901             CMP      R1,#+1
   \       0xE0   0xD10D             BNE.N    ??LPLD_DAC_Init_9
   \       0xE2   0x0039             MOVS     R1,R7
   \       0xE4   0x2900             CMP      R1,#+0
   \       0xE6   0xD00A             BEQ.N    ??LPLD_DAC_Init_9
     96            {
     97              dacx->C0 |= DAC_C0_DACBBIEN_MASK;   //使能缓冲区底部中断
   \       0xE8   0xF894 0x1021      LDRB     R1,[R4, #+33]
   \       0xEC   0xF051 0x0101      ORRS     R1,R1,#0x1
   \       0xF0   0xF884 0x1021      STRB     R1,[R4, #+33]
     98              DAC_RDPTBOT_ISR[x] = rdptbot_isr;
   \       0xF4   0x....             LDR.N    R1,??DataTable9_5
   \       0xF6   0x0002             MOVS     R2,R0
   \       0xF8   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \       0xFA   0xF841 0x7022      STR      R7,[R1, R2, LSL #+2]
     99            }
    100            if(dac_init_struct.DAC_ReadPointerTopIntEnable == TRUE && rdpttop_isr != NULL)
   \                     ??LPLD_DAC_Init_9: (+1)
   \       0xFE   0xF89D 0x102B      LDRB     R1,[SP, #+43]
   \      0x102   0x2901             CMP      R1,#+1
   \      0x104   0xD10D             BNE.N    ??LPLD_DAC_Init_10
   \      0x106   0x4641             MOV      R1,R8
   \      0x108   0x2900             CMP      R1,#+0
   \      0x10A   0xD00A             BEQ.N    ??LPLD_DAC_Init_10
    101            {
    102              dacx->C0 |= DAC_C0_DACBTIEN_MASK;   //使能缓冲区顶部中断
   \      0x10C   0xF894 0x1021      LDRB     R1,[R4, #+33]
   \      0x110   0xF051 0x0102      ORRS     R1,R1,#0x2
   \      0x114   0xF884 0x1021      STRB     R1,[R4, #+33]
    103              DAC_RDPTTOP_ISR[x] = rdpttop_isr;
   \      0x118   0x....             LDR.N    R1,??DataTable9_6
   \      0x11A   0x0002             MOVS     R2,R0
   \      0x11C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \      0x11E   0xF841 0x8022      STR      R8,[R1, R2, LSL #+2]
    104            }
    105            if(dac_init_struct.DAC_BufferWatermarkIntEnable == TRUE && watermk_isr != NULL)
   \                     ??LPLD_DAC_Init_10: (+1)
   \      0x122   0xF89D 0x102C      LDRB     R1,[SP, #+44]
   \      0x126   0x2901             CMP      R1,#+1
   \      0x128   0xD10C             BNE.N    ??LPLD_DAC_Init_11
   \      0x12A   0x4649             MOV      R1,R9
   \      0x12C   0x2900             CMP      R1,#+0
   \      0x12E   0xD009             BEQ.N    ??LPLD_DAC_Init_11
    106            {
    107              dacx->C0 |= DAC_C0_DACBWIEN_MASK;   //使能缓冲区水印中断
   \      0x130   0xF894 0x1021      LDRB     R1,[R4, #+33]
   \      0x134   0xF051 0x0104      ORRS     R1,R1,#0x4
   \      0x138   0xF884 0x1021      STRB     R1,[R4, #+33]
    108              DAC_WATERMK_ISR[x] = watermk_isr;
   \      0x13C   0x....             LDR.N    R1,??DataTable9_7
   \      0x13E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x140   0xF841 0x9020      STR      R9,[R1, R0, LSL #+2]
    109            }
    110            if(dac_init_struct.DAC_SoftTrgEnable == TRUE)
   \                     ??LPLD_DAC_Init_11: (+1)
   \      0x144   0xF89D 0x0029      LDRB     R0,[SP, #+41]
   \      0x148   0x2801             CMP      R0,#+1
   \      0x14A   0xD105             BNE.N    ??LPLD_DAC_Init_12
    111            {
    112              dacx->C0 |= DAC_C0_DACTRGSEL_MASK;  //使能软件触发缓冲区
   \      0x14C   0xF894 0x0021      LDRB     R0,[R4, #+33]
   \      0x150   0xF050 0x0020      ORRS     R0,R0,#0x20
   \      0x154   0xF884 0x0021      STRB     R0,[R4, #+33]
    113            }
    114            dacx->C0 |= DAC_C0_DACRFS_MASK;       //使能DACREF_2(VDDA)为参考电压
   \                     ??LPLD_DAC_Init_12: (+1)
   \      0x158   0xF894 0x0021      LDRB     R0,[R4, #+33]
   \      0x15C   0xF050 0x0040      ORRS     R0,R0,#0x40
   \      0x160   0xF884 0x0021      STRB     R0,[R4, #+33]
    115            
    116            //使能DAC模块，可编程参考发生器开始工作
    117            dacx->C0 |= DAC_C0_DACEN_MASK;
   \      0x164   0xF894 0x0021      LDRB     R0,[R4, #+33]
   \      0x168   0xF050 0x0080      ORRS     R0,R0,#0x80
   \      0x16C   0xF884 0x0021      STRB     R0,[R4, #+33]
    118            
    119            return 1;
   \      0x170   0x2001             MOVS     R0,#+1
   \                     ??LPLD_DAC_Init_13: (+1)
   \      0x172   0xE8BD 0x07F0      POP      {R4-R10}
   \      0x176   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
   \                     ??LPLD_DAC_Init_5: (+1)
   \      0x17A   0x....             LDR.N    R0,??DataTable9_8  ;; 0x400cd000
   \      0x17C   0x4284             CMP      R4,R0
   \      0x17E   0xD106             BNE.N    ??LPLD_DAC_Init_14
   \      0x180   0x2001             MOVS     R0,#+1
   \      0x182   0x....             LDR.N    R1,??DataTable9_4  ;; 0x4004802c
   \      0x184   0x680A             LDR      R2,[R1, #+0]
   \      0x186   0xF452 0x5200      ORRS     R2,R2,#0x2000
   \      0x18A   0x600A             STR      R2,[R1, #+0]
   \      0x18C   0xE775             B.N      ??LPLD_DAC_Init_6
   \                     ??LPLD_DAC_Init_14: (+1)
   \      0x18E   0x2000             MOVS     R0,#+0
   \      0x190   0xE7EF             B.N      ??LPLD_DAC_Init_13
    120          }
    121          
    122          /*
    123           * LPLD_DAC_Deinit
    124           * DAC反初始化函数，禁用DAC模块
    125           * 
    126           * 参数:
    127           *    dac_init_struct--DAC初始化结构体，
    128           *                        具体定义见DAC_InitTypeDef
    129           *
    130           * 输出:
    131           *    0--配置错误
    132           *    1--配置成功
    133           */

   \                                 In section .text, align 2, keep-with-next
    134          uint8 LPLD_DAC_Deinit(DAC_InitTypeDef dac_init_struct)
    135          {
   \                     LPLD_DAC_Deinit: (+1)
   \        0x0   0xB40F             PUSH     {R0-R3}
   \        0x2   0xB580             PUSH     {R7,LR}
    136            uint8 x;
    137            DAC_Type *dacx = dac_init_struct.DAC_Dacx;
   \        0x4   0x9802             LDR      R0,[SP, #+8]
    138          
    139            //关闭DAC模块
    140            dacx->C0 &= ~(DAC_C0_DACEN_MASK);
   \        0x6   0xF890 0x1021      LDRB     R1,[R0, #+33]
   \        0xA   0xF011 0x017F      ANDS     R1,R1,#0x7F
   \        0xE   0xF880 0x1021      STRB     R1,[R0, #+33]
    141            
    142            //关闭DAC时钟
    143            if(dacx == DAC0)
   \       0x12   0x....             LDR.N    R1,??DataTable9_3  ;; 0x400cc000
   \       0x14   0x4288             CMP      R0,R1
   \       0x16   0xD10D             BNE.N    ??LPLD_DAC_Deinit_0
    144            {
    145              x = 0;
   \       0x18   0x2000             MOVS     R0,#+0
    146              SIM->SCGC2 &= ~(SIM_SCGC2_DAC0_MASK);   
   \       0x1A   0x....             LDR.N    R1,??DataTable9_4  ;; 0x4004802c
   \       0x1C   0x680A             LDR      R2,[R1, #+0]
   \       0x1E   0xF432 0x5280      BICS     R2,R2,#0x1000
   \       0x22   0x600A             STR      R2,[R1, #+0]
    147            }
    148            else if(dacx == DAC1)
    149            {
    150              x = 1;
    151              SIM->SCGC2 &= ~(SIM_SCGC2_DAC1_MASK);   
    152            }
    153            else 
    154            {
    155              return 0;
    156            }
    157          
    158            disable_irq((IRQn_Type)(DAC0_IRQn + x));
   \                     ??LPLD_DAC_Deinit_1: (+1)
   \       0x24   0x3051             ADDS     R0,R0,#+81
   \       0x26   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \       0x28   0x....'....        BL       __NVIC_DisableIRQ
    159            
    160            return 1;
   \       0x2C   0x2001             MOVS     R0,#+1
   \                     ??LPLD_DAC_Deinit_2: (+1)
   \       0x2E   0xBC02             POP      {R1}
   \       0x30   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
   \                     ??LPLD_DAC_Deinit_0: (+1)
   \       0x34   0x....             LDR.N    R1,??DataTable9_8  ;; 0x400cd000
   \       0x36   0x4288             CMP      R0,R1
   \       0x38   0xD106             BNE.N    ??LPLD_DAC_Deinit_3
   \       0x3A   0x2001             MOVS     R0,#+1
   \       0x3C   0x....             LDR.N    R1,??DataTable9_4  ;; 0x4004802c
   \       0x3E   0x680A             LDR      R2,[R1, #+0]
   \       0x40   0xF432 0x5200      BICS     R2,R2,#0x2000
   \       0x44   0x600A             STR      R2,[R1, #+0]
   \       0x46   0xE7ED             B.N      ??LPLD_DAC_Deinit_1
   \                     ??LPLD_DAC_Deinit_3: (+1)
   \       0x48   0x2000             MOVS     R0,#+0
   \       0x4A   0xE7F0             B.N      ??LPLD_DAC_Deinit_2
    161          }
    162          
    163          /*
    164           * LPLD_DAC_EnableIrq
    165           * 使能DACx中断
    166           * 
    167           * 参数:
    168           *    dac_init_struct--DAC初始化结构体，
    169           *                        具体定义见DAC_InitTypeDef
    170           *
    171           * 输出:
    172           *    0--配置错误
    173           *    1--配置成功
    174           */

   \                                 In section .text, align 2, keep-with-next
    175          uint8 LPLD_DAC_EnableIrq(DAC_InitTypeDef dac_init_struct)
    176          {
   \                     LPLD_DAC_EnableIrq: (+1)
   \        0x0   0xB40F             PUSH     {R0-R3}
   \        0x2   0xB580             PUSH     {R7,LR}
    177            uint8 x;
    178            DAC_Type *dacx = dac_init_struct.DAC_Dacx;
   \        0x4   0x9802             LDR      R0,[SP, #+8]
    179            
    180            if(dacx == DAC0)
   \        0x6   0x....             LDR.N    R1,??DataTable9_3  ;; 0x400cc000
   \        0x8   0x4288             CMP      R0,R1
   \        0xA   0xD108             BNE.N    ??LPLD_DAC_EnableIrq_0
    181              x = 0;
   \        0xC   0x2000             MOVS     R0,#+0
    182            else if(dacx == DAC1)
    183              x = 1;
    184            else
    185              return 0;
    186          
    187            enable_irq((IRQn_Type)(DAC0_IRQn + x));
   \                     ??LPLD_DAC_EnableIrq_1: (+1)
   \        0xE   0x3051             ADDS     R0,R0,#+81
   \       0x10   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \       0x12   0x....'....        BL       __NVIC_EnableIRQ
    188            
    189            return 1;
   \       0x16   0x2001             MOVS     R0,#+1
   \                     ??LPLD_DAC_EnableIrq_2: (+1)
   \       0x18   0xBC02             POP      {R1}
   \       0x1A   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
   \                     ??LPLD_DAC_EnableIrq_0: (+1)
   \       0x1E   0x....             LDR.N    R1,??DataTable9_8  ;; 0x400cd000
   \       0x20   0x4288             CMP      R0,R1
   \       0x22   0xD101             BNE.N    ??LPLD_DAC_EnableIrq_3
   \       0x24   0x2001             MOVS     R0,#+1
   \       0x26   0xE7F2             B.N      ??LPLD_DAC_EnableIrq_1
   \                     ??LPLD_DAC_EnableIrq_3: (+1)
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0xE7F5             B.N      ??LPLD_DAC_EnableIrq_2
    190          }
    191          
    192          /*
    193           * LPLD_DAC_DisableIrq
    194           * 禁用DACx中断
    195           * 
    196           * 参数:
    197           *    dac_init_struct--DAC初始化结构体，
    198           *                        具体定义见DAC_InitTypeDef
    199           *
    200           * 输出:
    201           *    0--配置错误
    202           *    1--配置成功
    203           */

   \                                 In section .text, align 2, keep-with-next
    204          uint8 LPLD_DAC_DisableIrq(DAC_InitTypeDef dac_init_struct)
    205          {
   \                     LPLD_DAC_DisableIrq: (+1)
   \        0x0   0xB40F             PUSH     {R0-R3}
   \        0x2   0xB580             PUSH     {R7,LR}
    206            uint8 x;
    207            DAC_Type *dacx = dac_init_struct.DAC_Dacx;
   \        0x4   0x9802             LDR      R0,[SP, #+8]
    208            
    209            if(dacx == DAC0)
   \        0x6   0x....             LDR.N    R1,??DataTable9_3  ;; 0x400cc000
   \        0x8   0x4288             CMP      R0,R1
   \        0xA   0xD108             BNE.N    ??LPLD_DAC_DisableIrq_0
    210              x = 0;
   \        0xC   0x2000             MOVS     R0,#+0
    211            else if(dacx == DAC1)
    212              x = 1;
    213            else
    214              return 0;
    215          
    216            disable_irq((IRQn_Type)(DAC0_IRQn + x));
   \                     ??LPLD_DAC_DisableIrq_1: (+1)
   \        0xE   0x3051             ADDS     R0,R0,#+81
   \       0x10   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \       0x12   0x....'....        BL       __NVIC_DisableIRQ
    217            
    218            return 1;
   \       0x16   0x2001             MOVS     R0,#+1
   \                     ??LPLD_DAC_DisableIrq_2: (+1)
   \       0x18   0xBC02             POP      {R1}
   \       0x1A   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
   \                     ??LPLD_DAC_DisableIrq_0: (+1)
   \       0x1E   0x....             LDR.N    R1,??DataTable9_8  ;; 0x400cd000
   \       0x20   0x4288             CMP      R0,R1
   \       0x22   0xD101             BNE.N    ??LPLD_DAC_DisableIrq_3
   \       0x24   0x2001             MOVS     R0,#+1
   \       0x26   0xE7F2             B.N      ??LPLD_DAC_DisableIrq_1
   \                     ??LPLD_DAC_DisableIrq_3: (+1)
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0xE7F5             B.N      ??LPLD_DAC_DisableIrq_2
    219          }
    220          
    221          /*
    222           * LPLD_DAC_SetBufferDataN
    223           * 设置DAC缓存区单个数据n
    224           * 
    225           * 参数:
    226           *    dacx--DACx模块号
    227           *      |__DAC0          --DAC0
    228           *      |__DAC1          --DAC1
    229           *    data--缓冲区输出数据
    230           *      |__0~4095        --12位数据
    231           *    num--指定缓冲区位置
    232           *      |__1~16          --缓冲区第1至16个字
    233           *
    234           * 输出:
    235           *    无
    236           */

   \                                 In section .text, align 2, keep-with-next
    237          void LPLD_DAC_SetBufferDataN(DAC_Type *dacx, uint16 data, uint8 num)
    238          {
   \                     LPLD_DAC_SetBufferDataN: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
    239            //参数检查
    240            ASSERT( (num <= 16)&&(num > 0) );  //判断数据序号
   \        0x8   0x0030             MOVS     R0,R6
   \        0xA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \        0xC   0x2811             CMP      R0,#+17
   \        0xE   0xDA03             BGE.N    ??LPLD_DAC_SetBufferDataN_0
   \       0x10   0x0030             MOVS     R0,R6
   \       0x12   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD103             BNE.N    ??LPLD_DAC_SetBufferDataN_1
   \                     ??LPLD_DAC_SetBufferDataN_0: (+1)
   \       0x18   0x21F0             MOVS     R1,#+240
   \       0x1A   0x....             LDR.N    R0,??DataTable9_2
   \       0x1C   0x....'....        BL       assert_failed
    241          
    242            dacx->DAT[num-1].DATL = data & 0x0FF;
   \                     ??LPLD_DAC_SetBufferDataN_1: (+1)
   \       0x20   0x0030             MOVS     R0,R6
   \       0x22   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x24   0xEB04 0x0040      ADD      R0,R4,R0, LSL #+1
   \       0x28   0xF800 0x5C02      STRB     R5,[R0, #-2]
    243            dacx->DAT[num-1].DATH = (data & 0xF00)>>8;
   \       0x2C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \       0x2E   0x122D             ASRS     R5,R5,#+8
   \       0x30   0xF015 0x050F      ANDS     R5,R5,#0xF
   \       0x34   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \       0x36   0xEB04 0x0046      ADD      R0,R4,R6, LSL #+1
   \       0x3A   0xF800 0x5C01      STRB     R5,[R0, #-1]
    244          }
   \       0x3E   0xBD70             POP      {R4-R6,PC}       ;; return
    245          
    246          /*
    247           * LPLD_DAC_SetBufferData
    248           * 设置DAC缓存区所有数据
    249           * 
    250           * 参数:
    251           *    dacx--DACx模块号
    252           *      |__DAC0          --DAC0
    253           *      |__DAC1          --DAC1
    254           *    *data--缓冲区输出数据数组指针
    255           *      |__*0~4095       --12位数据数组
    256           *    len--数据数组长度
    257           *      |__1~16          --长度为1~16
    258           *
    259           * 输出:
    260           *    无
    261           */

   \                                 In section .text, align 2, keep-with-next
    262          void LPLD_DAC_SetBufferData(DAC_Type *dacx, uint16 *data, uint8 len)
    263          {
   \                     LPLD_DAC_SetBufferData: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0005             MOVS     R5,R0
   \        0x4   0x000E             MOVS     R6,R1
   \        0x6   0x0014             MOVS     R4,R2
    264            //参数检查
    265            ASSERT( (len <= 16)&&(len > 0) );  //判断数据长度
   \        0x8   0x0020             MOVS     R0,R4
   \        0xA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \        0xC   0x2811             CMP      R0,#+17
   \        0xE   0xDA03             BGE.N    ??LPLD_DAC_SetBufferData_0
   \       0x10   0x0020             MOVS     R0,R4
   \       0x12   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD104             BNE.N    ??LPLD_DAC_SetBufferData_1
   \                     ??LPLD_DAC_SetBufferData_0: (+1)
   \       0x18   0xF240 0x1109      MOVW     R1,#+265
   \       0x1C   0x....             LDR.N    R0,??DataTable9_2
   \       0x1E   0x....'....        BL       assert_failed
    266            
    267            for(uint8 i=0; i < len; i++)
   \                     ??LPLD_DAC_SetBufferData_1: (+1)
   \       0x22   0x2000             MOVS     R0,#+0
   \       0x24   0xE014             B.N      ??LPLD_DAC_SetBufferData_2
    268            {
    269              dacx->DAT[i].DATL = data[i] & 0x0FF;
   \                     ??LPLD_DAC_SetBufferData_3: (+1)
   \       0x26   0x0001             MOVS     R1,R0
   \       0x28   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x2A   0xF836 0x1011      LDRH     R1,[R6, R1, LSL #+1]
   \       0x2E   0x0002             MOVS     R2,R0
   \       0x30   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \       0x32   0xF805 0x1012      STRB     R1,[R5, R2, LSL #+1]
    270              dacx->DAT[i].DATH = (data[i] & 0xF00)>>8;
   \       0x36   0x0001             MOVS     R1,R0
   \       0x38   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x3A   0xF836 0x1011      LDRH     R1,[R6, R1, LSL #+1]
   \       0x3E   0x1209             ASRS     R1,R1,#+8
   \       0x40   0xF011 0x010F      ANDS     R1,R1,#0xF
   \       0x44   0x0002             MOVS     R2,R0
   \       0x46   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \       0x48   0xEB05 0x0242      ADD      R2,R5,R2, LSL #+1
   \       0x4C   0x7051             STRB     R1,[R2, #+1]
    271            }
   \       0x4E   0x1C40             ADDS     R0,R0,#+1
   \                     ??LPLD_DAC_SetBufferData_2: (+1)
   \       0x50   0x0001             MOVS     R1,R0
   \       0x52   0x0022             MOVS     R2,R4
   \       0x54   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x56   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \       0x58   0x4291             CMP      R1,R2
   \       0x5A   0xD3E4             BCC.N    ??LPLD_DAC_SetBufferData_3
    272          }
   \       0x5C   0xBD70             POP      {R4-R6,PC}       ;; return
    273          
    274          /*
    275           * LPLD_DAC_SoftwareTrigger
    276           * 软件触发DAC缓冲区工作
    277           * 
    278           * 参数:
    279           *    dacx--DACx模块号
    280           *      |__DAC0          --DAC0
    281           *      |__DAC1          --DAC1
    282           *
    283           * 输出:
    284           *    无
    285           */

   \                                 In section .text, align 2, keep-with-next
    286          void LPLD_DAC_SoftwareTrigger(DAC_Type *dacx)
    287          {
    288            dacx->C0 |= DAC_C0_DACSWTRG_MASK;
   \                     LPLD_DAC_SoftwareTrigger: (+1)
   \        0x0   0xF890 0x1021      LDRB     R1,[R0, #+33]
   \        0x4   0xF051 0x0110      ORRS     R1,R1,#0x10
   \        0x8   0xF880 0x1021      STRB     R1,[R0, #+33]
    289          }
   \        0xC   0x4770             BX       LR               ;; return
    290          
    291          /*
    292           * DAC0--DAC1中断处理函数
    293           * 与启动文件startup_K60.s中的中断向量表关联
    294           * 用户无需修改，程序自动进入对应通道中断函数
    295           */
    296          

   \                                 In section .text, align 2, keep-with-next
    297          void DAC0_IRQHandler(void)
    298          {
   \                     DAC0_IRQHandler: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    299          #if (UCOS_II > 0u)
    300            OS_CPU_SR  cpu_sr = 0u;
    301            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    302            OSIntEnter();
    303            OS_EXIT_CRITICAL();
    304          #endif
    305            
    306            //是否为指针底部中断
    307            if((DAC0->SR & DAC_SR_DACBFRPBF_MASK) && (DAC0->C0 & DAC_C0_DACBBIEN_MASK))
   \        0x2   0x....             LDR.N    R4,??DataTable9_9  ;; 0x400cc020
   \        0x4   0x7820             LDRB     R0,[R4, #+0]
   \        0x6   0x07C0             LSLS     R0,R0,#+31
   \        0x8   0xD50A             BPL.N    ??DAC0_IRQHandler_0
   \        0xA   0x....             LDR.N    R0,??DataTable9_10  ;; 0x400cc021
   \        0xC   0x7800             LDRB     R0,[R0, #+0]
   \        0xE   0x07C0             LSLS     R0,R0,#+31
   \       0x10   0xD506             BPL.N    ??DAC0_IRQHandler_0
    308            {
    309              //调用用户自定义中断服务
    310              DAC_RDPTBOT_ISR[0]();  
   \       0x12   0x....             LDR.N    R0,??DataTable9_5
   \       0x14   0x6800             LDR      R0,[R0, #+0]
   \       0x16   0x4780             BLX      R0
    311              DAC0->SR &= ~(DAC_SR_DACBFRPBF_MASK);
   \       0x18   0x7820             LDRB     R0,[R4, #+0]
   \       0x1A   0xF010 0x00FE      ANDS     R0,R0,#0xFE
   \       0x1E   0x7020             STRB     R0,[R4, #+0]
    312            }
    313            //是否为指针顶部中断
    314            if((DAC0->SR & DAC_SR_DACBFRPTF_MASK) && (DAC0->C0 & DAC_C0_DACBTIEN_MASK))
   \                     ??DAC0_IRQHandler_0: (+1)
   \       0x20   0x7820             LDRB     R0,[R4, #+0]
   \       0x22   0x0780             LSLS     R0,R0,#+30
   \       0x24   0xD50A             BPL.N    ??DAC0_IRQHandler_1
   \       0x26   0x....             LDR.N    R0,??DataTable9_10  ;; 0x400cc021
   \       0x28   0x7800             LDRB     R0,[R0, #+0]
   \       0x2A   0x0780             LSLS     R0,R0,#+30
   \       0x2C   0xD506             BPL.N    ??DAC0_IRQHandler_1
    315            {
    316              //调用用户自定义中断服务
    317              DAC_RDPTTOP_ISR[0]();  
   \       0x2E   0x....             LDR.N    R0,??DataTable9_6
   \       0x30   0x6800             LDR      R0,[R0, #+0]
   \       0x32   0x4780             BLX      R0
    318              DAC0->SR &= ~(DAC_SR_DACBFRPTF_MASK);
   \       0x34   0x7820             LDRB     R0,[R4, #+0]
   \       0x36   0xF010 0x00FD      ANDS     R0,R0,#0xFD
   \       0x3A   0x7020             STRB     R0,[R4, #+0]
    319            }
    320            //是否为水印中断
    321            if((DAC0->SR & DAC_SR_DACBFWMF_MASK) && (DAC0->C0 & DAC_C0_DACBWIEN_MASK))
   \                     ??DAC0_IRQHandler_1: (+1)
   \       0x3C   0x7820             LDRB     R0,[R4, #+0]
   \       0x3E   0x0740             LSLS     R0,R0,#+29
   \       0x40   0xD50A             BPL.N    ??DAC0_IRQHandler_2
   \       0x42   0x....             LDR.N    R0,??DataTable9_10  ;; 0x400cc021
   \       0x44   0x7800             LDRB     R0,[R0, #+0]
   \       0x46   0x0740             LSLS     R0,R0,#+29
   \       0x48   0xD506             BPL.N    ??DAC0_IRQHandler_2
    322            {
    323              //调用用户自定义中断服务
    324              DAC_WATERMK_ISR[0]();  
   \       0x4A   0x....             LDR.N    R0,??DataTable9_7
   \       0x4C   0x6800             LDR      R0,[R0, #+0]
   \       0x4E   0x4780             BLX      R0
    325              DAC0->SR &= ~(DAC_SR_DACBFWMF_MASK);
   \       0x50   0x7820             LDRB     R0,[R4, #+0]
   \       0x52   0xF010 0x00FB      ANDS     R0,R0,#0xFB
   \       0x56   0x7020             STRB     R0,[R4, #+0]
    326            }
    327            
    328          #if (UCOS_II > 0u)
    329            OSIntExit();          //告知系统此时即将离开中断服务子函数
    330          #endif
    331          }
   \                     ??DAC0_IRQHandler_2: (+1)
   \       0x58   0xBD10             POP      {R4,PC}          ;; return
    332          

   \                                 In section .text, align 2, keep-with-next
    333          void DAC1_IRQHandler(void)
    334          {
   \                     DAC1_IRQHandler: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    335          #if (UCOS_II > 0u)
    336            OS_CPU_SR  cpu_sr = 0u;
    337            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    338            OSIntEnter();
    339            OS_EXIT_CRITICAL();
    340          #endif
    341            
    342            //是否为指针底部中断
    343            if((DAC1->SR & DAC_SR_DACBFRPBF_MASK) && (DAC1->C0 & DAC_C0_DACBBIEN_MASK))
   \        0x2   0x....             LDR.N    R4,??DataTable9_11  ;; 0x400cd020
   \        0x4   0x7820             LDRB     R0,[R4, #+0]
   \        0x6   0x07C0             LSLS     R0,R0,#+31
   \        0x8   0xD50A             BPL.N    ??DAC1_IRQHandler_0
   \        0xA   0x....             LDR.N    R0,??DataTable9_12  ;; 0x400cd021
   \        0xC   0x7800             LDRB     R0,[R0, #+0]
   \        0xE   0x07C0             LSLS     R0,R0,#+31
   \       0x10   0xD506             BPL.N    ??DAC1_IRQHandler_0
    344            {
    345              //调用用户自定义中断服务
    346              DAC_RDPTBOT_ISR[1]();  
   \       0x12   0x....             LDR.N    R0,??DataTable9_5
   \       0x14   0x6840             LDR      R0,[R0, #+4]
   \       0x16   0x4780             BLX      R0
    347              DAC1->SR &= ~(DAC_SR_DACBFRPBF_MASK);
   \       0x18   0x7820             LDRB     R0,[R4, #+0]
   \       0x1A   0xF010 0x00FE      ANDS     R0,R0,#0xFE
   \       0x1E   0x7020             STRB     R0,[R4, #+0]
    348            }
    349            //是否为指针顶部中断
    350            if((DAC1->SR & DAC_SR_DACBFRPTF_MASK) && (DAC1->C0 & DAC_C0_DACBTIEN_MASK))
   \                     ??DAC1_IRQHandler_0: (+1)
   \       0x20   0x7820             LDRB     R0,[R4, #+0]
   \       0x22   0x0780             LSLS     R0,R0,#+30
   \       0x24   0xD50A             BPL.N    ??DAC1_IRQHandler_1
   \       0x26   0x....             LDR.N    R0,??DataTable9_12  ;; 0x400cd021
   \       0x28   0x7800             LDRB     R0,[R0, #+0]
   \       0x2A   0x0780             LSLS     R0,R0,#+30
   \       0x2C   0xD506             BPL.N    ??DAC1_IRQHandler_1
    351            {
    352              //调用用户自定义中断服务
    353              DAC_RDPTTOP_ISR[1]();  
   \       0x2E   0x....             LDR.N    R0,??DataTable9_6
   \       0x30   0x6840             LDR      R0,[R0, #+4]
   \       0x32   0x4780             BLX      R0
    354              DAC1->SR &= ~(DAC_SR_DACBFRPTF_MASK);
   \       0x34   0x7820             LDRB     R0,[R4, #+0]
   \       0x36   0xF010 0x00FD      ANDS     R0,R0,#0xFD
   \       0x3A   0x7020             STRB     R0,[R4, #+0]
    355            }
    356            //是否为水印中断
    357            if((DAC1->SR & DAC_SR_DACBFWMF_MASK) && (DAC1->C0 & DAC_C0_DACBWIEN_MASK))
   \                     ??DAC1_IRQHandler_1: (+1)
   \       0x3C   0x7820             LDRB     R0,[R4, #+0]
   \       0x3E   0x0740             LSLS     R0,R0,#+29
   \       0x40   0xD50A             BPL.N    ??DAC1_IRQHandler_2
   \       0x42   0x....             LDR.N    R0,??DataTable9_12  ;; 0x400cd021
   \       0x44   0x7800             LDRB     R0,[R0, #+0]
   \       0x46   0x0740             LSLS     R0,R0,#+29
   \       0x48   0xD506             BPL.N    ??DAC1_IRQHandler_2
    358            {
    359              //调用用户自定义中断服务
    360              DAC_WATERMK_ISR[1]();  
   \       0x4A   0x....             LDR.N    R0,??DataTable9_7
   \       0x4C   0x6840             LDR      R0,[R0, #+4]
   \       0x4E   0x4780             BLX      R0
    361              DAC1->SR &= ~(DAC_SR_DACBFWMF_MASK);
   \       0x50   0x7820             LDRB     R0,[R4, #+0]
   \       0x52   0xF010 0x00FB      ANDS     R0,R0,#0xFB
   \       0x56   0x7020             STRB     R0,[R4, #+0]
    362            }
    363            
    364          #if (UCOS_II > 0u)
    365            OSIntExit();          //告知系统此时即将离开中断服务子函数
    366          #endif
    367          }
   \                     ??DAC1_IRQHandler_2: (+1)
   \       0x58   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \        0x0   0xE000'E100        DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \        0x0   0xE000'E180        DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \        0x0   0x400C'C000        DC32     0x400cc000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \        0x0   0x4004'802C        DC32     0x4004802c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \        0x0   0x....'....        DC32     DAC_RDPTBOT_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \        0x0   0x....'....        DC32     DAC_RDPTTOP_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \        0x0   0x....'....        DC32     DAC_WATERMK_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \        0x0   0x400C'D000        DC32     0x400cd000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \        0x0   0x400C'C020        DC32     0x400cc020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_10:
   \        0x0   0x400C'C021        DC32     0x400cc021

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_11:
   \        0x0   0x400C'D020        DC32     0x400cd020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_12:
   \        0x0   0x400C'D021        DC32     0x400cd021

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x47 0x3A          DC8 47H, 3AH, 5CH, 41H, 49H, 63H, 61H, 72H
   \              0x5C 0x41    
   \              0x49 0x63    
   \              0x61 0x72    
   \        0x8   0x5C 0xE4          DC8 5CH, 0E4H, 0BFH, 0A1H, 0E6H, 0A0H, 87H, 5CH
   \              0xBF 0xA1    
   \              0xE6 0xA0    
   \              0x87 0x5C    
   \       0x10   0x6B 0x36          DC8 6BH, 36H, 30H, 5FH, 31H, 34H, 34H, 5CH
   \              0x30 0x5F    
   \              0x31 0x34    
   \              0x34 0x5C    
   \       0x18   0x73 0x6D          DC8 73H, 6DH, 61H, 72H, 74H, 63H, 61H, 72H
   \              0x61 0x72    
   \              0x74 0x63    
   \              0x61 0x72    
   \       0x20   0x5C 0x6C          DC8 5CH, 6CH, 69H, 62H, 5CH, 4CH, 50H, 4CH
   \              0x69 0x62    
   \              0x5C 0x4C    
   \              0x50 0x4C    
   \       0x28   0x44 0x5C          DC8 44H, 5CH, 48H, 57H, 5CH, 48H, 57H, 5FH
   \              0x48 0x57    
   \              0x5C 0x48    
   \              0x57 0x5F    
   \       0x30   0x44 0x41          DC8 44H, 41H, 43H, 2EH, 63H, 0
   \              0x43 0x2E    
   \              0x63 0x00    
   \       0x36   0x00 0x00          DC8 0, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   DAC0_IRQHandler
         8   -- Indirect call
       8   DAC1_IRQHandler
         8   -- Indirect call
      24   LPLD_DAC_Deinit
        24   -> __NVIC_DisableIRQ
      24   LPLD_DAC_DisableIrq
        24   -> __NVIC_DisableIRQ
      24   LPLD_DAC_EnableIrq
        24   -> __NVIC_EnableIRQ
      48   LPLD_DAC_Init
        48   -> assert_failed
      16   LPLD_DAC_SetBufferData
        16   -> assert_failed
      16   LPLD_DAC_SetBufferDataN
        16   -> assert_failed
       0   LPLD_DAC_SoftwareTrigger
       0   __NVIC_DisableIRQ
       0   __NVIC_EnableIRQ


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_10
       4  ??DataTable9_11
       4  ??DataTable9_12
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
      56  ?_0
      90  DAC0_IRQHandler
      90  DAC1_IRQHandler
       8  DAC_RDPTBOT_ISR
       8  DAC_RDPTTOP_ISR
       8  DAC_WATERMK_ISR
      76  LPLD_DAC_Deinit
      44  LPLD_DAC_DisableIrq
      44  LPLD_DAC_EnableIrq
     402  LPLD_DAC_Init
      94  LPLD_DAC_SetBufferData
      64  LPLD_DAC_SetBufferDataN
      14  LPLD_DAC_SoftwareTrigger
      38  __NVIC_DisableIRQ
      30  __NVIC_EnableIRQ

 
    24 bytes in section .bss
    56 bytes in section .rodata
 1 038 bytes in section .text
 
 1 038 bytes of CODE  memory
    56 bytes of CONST memory
    24 bytes of DATA  memory

Errors: none
Warnings: 1
