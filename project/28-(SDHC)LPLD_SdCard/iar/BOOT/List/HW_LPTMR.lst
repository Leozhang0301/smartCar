###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.1.169/W32 for ARM         23/Apr/2019  21:09:46
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  G:\AIcar\@@\k60_144\smartcar\lib\LPLD\HW\HW_LPTMR.c
#    Command line =  
#        -f C:\Users\admin\AppData\Local\Temp\EW370E.tmp
#        (G:\AIcar\@@\k60_144\smartcar\lib\LPLD\HW\HW_LPTMR.c -D LPLD_K60
#        -lCN
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\BOOT\List"
#        -lB
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\BOOT\List"
#        -o
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\BOOT\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        G:\AIcar\arm\inc\c\DLib_Config_Normal.h -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\app\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\CPU\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\common\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\HW\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\DEV\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Ports\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Source\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\option\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\common\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\driver\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\descriptor\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\class\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\Jay\"
#        -Ol -I G:\AIcar\arm\CMSIS\Core\Include\ -I
#        G:\AIcar\arm\CMSIS\DSP\Include\ -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\BOOT\List\HW_LPTMR.lst
#    Object file  =  
#        G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\BOOT\Obj\HW_LPTMR.o
#
###############################################################################

G:\AIcar\@@\k60_144\smartcar\lib\LPLD\HW\HW_LPTMR.c
      1          /**
      2           * @file HW_LPTMR.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief LPTMR底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          
     23          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_EnableIRQ(IRQn_Type)
   \                     __NVIC_EnableIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD408             BMI.N    ??__NVIC_EnableIRQ_0
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0xE   0x408A             LSLS     R2,R2,R1
   \       0x10   0x....             LDR.N    R1,??DataTable7  ;; 0xe000e100
   \       0x12   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \       0x14   0x0940             LSRS     R0,R0,#+5
   \       0x16   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \       0x1A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_DisableIRQ(IRQn_Type)
   \                     __NVIC_DisableIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD40C             BMI.N    ??__NVIC_DisableIRQ_0
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0xE   0x408A             LSLS     R2,R2,R1
   \       0x10   0x....             LDR.N    R1,??DataTable7_1  ;; 0xe000e180
   \       0x12   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \       0x14   0x0940             LSRS     R0,R0,#+5
   \       0x16   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \       0x1A   0xF3BF 0x8F4F      DSB      SY
   \       0x1E   0xF3BF 0x8F6F      ISB      SY
   \                     ??__NVIC_DisableIRQ_0: (+1)
   \       0x22   0x4770             BX       LR               ;; return
     24          #include "HW_LPTMR.h"
     25          

   \                                 In section .bss, align 4
     26          LPTMR_ISR_CALLBACK LPTMR_ISR[1];
   \                     LPTMR_ISR:
   \        0x0                      DS8 4
     27          
     28          /*
     29           * LPLD_LPTMR_Init
     30           * LPTMR初始化函数
     31           * 
     32           * 参数:
     33           *    lptmr_init_structure--LPTMR初始化结构体，
     34           *                         具体定义见LPTMR_InitTypeDef 
     35           * 输出:
     36           *    0--配置错误
     37           *    1--配置成功
     38           */

   \                                 In section .text, align 2, keep-with-next
     39          uint8 LPLD_LPTMR_Init(LPTMR_InitTypeDef lptmr_init_structure)
     40          {
   \                     LPLD_LPTMR_Init: (+1)
   \        0x0   0xB5F7             PUSH     {R0-R2,R4-R7,LR}
     41            uint8  mode = lptmr_init_structure.LPTMR_Mode; 
   \        0x2   0xF89D 0x7000      LDRB     R7,[SP, #+0]
     42            uint16 period_ms = lptmr_init_structure.LPTMR_PeriodMs;
   \        0x6   0xF8BD 0x4002      LDRH     R4,[SP, #+2]
     43            uint8  pluseacc_input = lptmr_init_structure.LPTMR_PluseAccInput;
   \        0xA   0xF89D 0x5004      LDRB     R5,[SP, #+4]
     44            LPTMR_ISR_CALLBACK isr_func = lptmr_init_structure.LPTMR_Isr;
   \        0xE   0x9E02             LDR      R6,[SP, #+8]
     45          
     46            ASSERT(mode <= LPTMR_MODE_PLACC );
   \       0x10   0x0038             MOVS     R0,R7
   \       0x12   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x14   0x2802             CMP      R0,#+2
   \       0x16   0xDB03             BLT.N    ??LPLD_LPTMR_Init_0
   \       0x18   0x212E             MOVS     R1,#+46
   \       0x1A   0x....             LDR.N    R0,??DataTable7_2
   \       0x1C   0x....'....        BL       assert_failed
     47            ASSERT(pluseacc_input <= LPTMR_ALT2 );
   \                     ??LPLD_LPTMR_Init_0: (+1)
   \       0x20   0x0028             MOVS     R0,R5
   \       0x22   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x24   0x2803             CMP      R0,#+3
   \       0x26   0xDB03             BLT.N    ??LPLD_LPTMR_Init_1
   \       0x28   0x212F             MOVS     R1,#+47
   \       0x2A   0x....             LDR.N    R0,??DataTable7_2
   \       0x2C   0x....'....        BL       assert_failed
     48          
     49            //初始化LPTMR时钟
     50            SIM->SCGC5|=SIM_SCGC5_LPTIMER_MASK;  
   \                     ??LPLD_LPTMR_Init_1: (+1)
   \       0x30   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40048038
   \       0x32   0x6801             LDR      R1,[R0, #+0]
   \       0x34   0xF051 0x0101      ORRS     R1,R1,#0x1
   \       0x38   0x6001             STR      R1,[R0, #+0]
     51             
     52            //清空寄存器
     53            LPTMR0->CSR = 0x00;                   
   \       0x3A   0x....             LDR.N    R0,??DataTable7_4  ;; 0x40040000
   \       0x3C   0x2100             MOVS     R1,#+0
   \       0x3E   0x6001             STR      R1,[R0, #+0]
     54            LPTMR0->PSR = 0x00;
   \       0x40   0x....             LDR.N    R1,??DataTable7_5  ;; 0x40040004
   \       0x42   0x2200             MOVS     R2,#+0
   \       0x44   0x600A             STR      R2,[R1, #+0]
     55            LPTMR0->CMR = 0x00;
   \       0x46   0x....             LDR.N    R2,??DataTable7_6  ;; 0x40040008
   \       0x48   0x2300             MOVS     R3,#+0
   \       0x4A   0x6013             STR      R3,[R2, #+0]
     56             
     57            if(mode == LPTMR_MODE_TIMER)          // 配置成低功耗定时器功能
   \       0x4C   0x003B             MOVS     R3,R7
   \       0x4E   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0x50   0x2B00             CMP      R3,#+0
   \       0x52   0xD104             BNE.N    ??LPLD_LPTMR_Init_2
     58            {    
     59              /* 配置LPTMR */
     60              // LPO 1Khz
     61              //设置比较的值
     62              //使用内部时钟 分频系数Prescale为 2^(X+1)
     63              //定时器的一个计数周期=时钟源(Clk_Src)/ 预分频值(Prescale)
     64              //定时器的定时值=设置的比较值(compare_value)/定时器的一个计数周期
     65              LPTMR0->CMR = LPTMR_CMR_COMPARE(period_ms);                 //设置比较值
   \       0x54   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \       0x56   0x6014             STR      R4,[R2, #+0]
     66              LPTMR0->PSR = LPTMR_PSR_PCS(0x1)|LPTMR_PSR_PBYP_MASK;       //采用LPO时钟旁路使能
   \       0x58   0x2205             MOVS     R2,#+5
   \       0x5A   0x600A             STR      R2,[R1, #+0]
   \       0x5C   0xE022             B.N      ??LPLD_LPTMR_Init_3
     67                  
     68            }
     69            else if(mode == LPTMR_MODE_PLACC)             //配置成脉冲捕获模式
   \                     ??LPLD_LPTMR_Init_2: (+1)
   \       0x5E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \       0x60   0x2F01             CMP      R7,#+1
   \       0x62   0xD11F             BNE.N    ??LPLD_LPTMR_Init_3
     70            {
     71              
     72              if(pluseacc_input == LPTMR_ALT1)            //PTA19引脚
   \       0x64   0x002A             MOVS     R2,R5
   \       0x66   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \       0x68   0x2A01             CMP      R2,#+1
   \       0x6A   0xD104             BNE.N    ??LPLD_LPTMR_Init_4
     73              {
     74                PORTA->PCR[19] = PORT_PCR_MUX(0x6);       //设置PTA19为脉冲累加
   \       0x6C   0xF44F 0x62C0      MOV      R2,#+1536
   \       0x70   0x....             LDR.N    R3,??DataTable7_7  ;; 0x4004904c
   \       0x72   0x601A             STR      R2,[R3, #+0]
   \       0x74   0xE007             B.N      ??LPLD_LPTMR_Init_5
     75              }
     76              else if(pluseacc_input == LPTMR_ALT2)       //PTC5引脚
   \                     ??LPLD_LPTMR_Init_4: (+1)
   \       0x76   0x002A             MOVS     R2,R5
   \       0x78   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \       0x7A   0x2A02             CMP      R2,#+2
   \       0x7C   0xD103             BNE.N    ??LPLD_LPTMR_Init_5
     77              {
     78                PORTC->PCR[5] = PORT_PCR_MUX(0x4);        //设置PTC5为脉冲累加  
   \       0x7E   0xF44F 0x6280      MOV      R2,#+1024
   \       0x82   0x....             LDR.N    R3,??DataTable7_8  ;; 0x4004b014
   \       0x84   0x601A             STR      R2,[R3, #+0]
     79              }
     80                         
     81              //与所用的内部时钟无关
     82              //外部输入的信号作为计数时钟
     83              LPTMR0->PSR = LPTMR_PSR_PCS(0x1)|LPTMR_PSR_PBYP_MASK; 
   \                     ??LPLD_LPTMR_Init_5: (+1)
   \       0x86   0x2205             MOVS     R2,#+5
   \       0x88   0x600A             STR      R2,[R1, #+0]
     84              LPTMR0->CSR = LPTMR_CSR_TPS(pluseacc_input);
   \       0x8A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \       0x8C   0x012D             LSLS     R5,R5,#+4
   \       0x8E   0xF015 0x0530      ANDS     R5,R5,#0x30
   \       0x92   0x6005             STR      R5,[R0, #+0]
     85              LPTMR0->CSR |= LPTMR_CSR_TMS_MASK; //捕获模式
   \       0x94   0x6801             LDR      R1,[R0, #+0]
   \       0x96   0xF051 0x0102      ORRS     R1,R1,#0x2
   \       0x9A   0x6001             STR      R1,[R0, #+0]
     86              LPTMR0->CSR |= LPTMR_CSR_TFC_MASK; //自由计数模式
   \       0x9C   0x6801             LDR      R1,[R0, #+0]
   \       0x9E   0xF051 0x0104      ORRS     R1,R1,#0x4
   \       0xA2   0x6001             STR      R1,[R0, #+0]
     87            }
     88            
     89            if(lptmr_init_structure.LPTMR_IntEnable == TRUE && isr_func != NULL)
   \                     ??LPLD_LPTMR_Init_3: (+1)
   \       0xA4   0xF89D 0x1005      LDRB     R1,[SP, #+5]
   \       0xA8   0x2901             CMP      R1,#+1
   \       0xAA   0xD108             BNE.N    ??LPLD_LPTMR_Init_6
   \       0xAC   0x0031             MOVS     R1,R6
   \       0xAE   0x2900             CMP      R1,#+0
   \       0xB0   0xD005             BEQ.N    ??LPLD_LPTMR_Init_6
     90            {
     91              LPTMR_ISR[0] = isr_func;
   \       0xB2   0x....             LDR.N    R1,??DataTable7_9
   \       0xB4   0x600E             STR      R6,[R1, #+0]
     92              LPTMR0->CSR |= LPTMR_CSR_TIE_MASK;
   \       0xB6   0x6801             LDR      R1,[R0, #+0]
   \       0xB8   0xF051 0x0140      ORRS     R1,R1,#0x40
   \       0xBC   0x6001             STR      R1,[R0, #+0]
     93            }
     94          
     95            LPTMR0->CSR |= LPTMR_CSR_TEN_MASK; //开启LPTMR
   \                     ??LPLD_LPTMR_Init_6: (+1)
   \       0xBE   0x6801             LDR      R1,[R0, #+0]
   \       0xC0   0xF051 0x0101      ORRS     R1,R1,#0x1
   \       0xC4   0x6001             STR      R1,[R0, #+0]
     96            return 1;
   \       0xC6   0x2001             MOVS     R0,#+1
   \       0xC8   0xBDFE             POP      {R1-R7,PC}       ;; return
     97          }
     98          
     99          /*
    100           * LPLD_LPTMR_DeInit
    101           * LPTMR反初始化函数，关闭lptmrx
    102           * 
    103           * 参数:
    104           *    无
    105           *
    106           * 输出:
    107           *    0--配置错误
    108           *    1--配置成功
    109           */

   \                                 In section .text, align 2, keep-with-next
    110          uint8 LPLD_LPTMR_Deinit(void)
    111          {
   \                     LPLD_LPTMR_Deinit: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    112            //清空CSR寄存器
    113            LPTMR0->CSR=0x00;  
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x....             LDR.N    R1,??DataTable7_4  ;; 0x40040000
   \        0x6   0x6008             STR      R0,[R1, #+0]
    114            //清空PSR寄存器
    115            LPTMR0->PSR=0x00;
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0x....             LDR.N    R1,??DataTable7_5  ;; 0x40040004
   \        0xC   0x6008             STR      R0,[R1, #+0]
    116            //清空CMR寄存器
    117            LPTMR0->CMR=0x00;
   \        0xE   0x2000             MOVS     R0,#+0
   \       0x10   0x....             LDR.N    R1,??DataTable7_6  ;; 0x40040008
   \       0x12   0x6008             STR      R0,[R1, #+0]
    118            //禁止LPTimer中断
    119            disable_irq(LPTimer_IRQn);
   \       0x14   0x2055             MOVS     R0,#+85
   \       0x16   0x....'....        BL       __NVIC_DisableIRQ
    120            
    121             //关闭LPTMR时钟
    122            SIM->SCGC5 &= ~(SIM_SCGC5_LPTIMER_MASK);  
   \       0x1A   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40048038
   \       0x1C   0x6801             LDR      R1,[R0, #+0]
   \       0x1E   0x0849             LSRS     R1,R1,#+1
   \       0x20   0x0049             LSLS     R1,R1,#+1
   \       0x22   0x6001             STR      R1,[R0, #+0]
    123            
    124            return 1;
   \       0x24   0x2001             MOVS     R0,#+1
   \       0x26   0xBD02             POP      {R1,PC}          ;; return
    125          }
    126          
    127          /*
    128           *  LPLD_LPTMR_Reset
    129           *  低功耗定时器复位，复位以后清空低功耗定时器Counter
    130           * 
    131           *  参数:
    132           *      无
    133           *  输出:
    134           *      无
    135           */

   \                                 In section .text, align 2, keep-with-next
    136          void  LPLD_LPTMR_ResetCounter(void)
    137          {
    138            
    139            LPTMR0->CSR&=(~LPTMR_CSR_TEN_MASK);       //Reset LPTMR0 Counter
   \                     LPLD_LPTMR_ResetCounter: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable7_4  ;; 0x40040000
   \        0x2   0x6801             LDR      R1,[R0, #+0]
   \        0x4   0x0849             LSRS     R1,R1,#+1
   \        0x6   0x0049             LSLS     R1,R1,#+1
   \        0x8   0x6001             STR      R1,[R0, #+0]
    140          }
   \        0xA   0x4770             BX       LR               ;; return
    141          /*
    142           * LPLD_LPTMR_EnableIrq
    143           * 使能LPTMR中断功能，在该函数中使能TIE位和LPTMR模块中断
    144           * 
    145           * 参数:
    146           *    无
    147           *
    148           * 输出:
    149           *    0--配置错误
    150           *    1--配置成功
    151           *
    152           */

   \                                 In section .text, align 2, keep-with-next
    153          uint8 LPLD_LPTMR_EnableIrq(void)
    154          {
   \                     LPLD_LPTMR_EnableIrq: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    155            enable_irq(LPTimer_IRQn);
   \        0x2   0x2055             MOVS     R0,#+85
   \        0x4   0x....'....        BL       __NVIC_EnableIRQ
    156            return 1;
   \        0x8   0x2001             MOVS     R0,#+1
   \        0xA   0xBD02             POP      {R1,PC}          ;; return
    157          }
    158          
    159          /*
    160           * LPLD_LPTMR_DisableIrq
    161           * 禁止LPTMR中断
    162           * 
    163           * 参数:
    164           *    无
    165           *
    166           * 输出:
    167           *    0--配置错误
    168           *    1--配置成功
    169           *
    170           */

   \                                 In section .text, align 2, keep-with-next
    171          uint8 LPLD_LPTMR_DisableIrq(void)
    172          {
   \                     LPLD_LPTMR_DisableIrq: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    173            disable_irq(LPTimer_IRQn); 
   \        0x2   0x2055             MOVS     R0,#+85
   \        0x4   0x....'....        BL       __NVIC_DisableIRQ
    174            return 1;
   \        0x8   0x2001             MOVS     R0,#+1
   \        0xA   0xBD02             POP      {R1,PC}          ;; return
    175          }
    176          
    177          /*
    178           *  LPLD_LPTMR_GetPulseAcc
    179           *  得到脉冲累加的值
    180           * 
    181           *  参数:
    182           *      无
    183           *  输出:
    184           *      脉冲累加值
    185           */

   \                                 In section .text, align 2, keep-with-next
    186          uint16 LPLD_LPTMR_GetPulseAcc(void)
    187          {
    188             LPTMR0->CNR = 0X00;
   \                     LPLD_LPTMR_GetPulseAcc: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable7_10  ;; 0x4004000c
   \        0x2   0x2100             MOVS     R1,#+0
   \        0x4   0x6001             STR      R1,[R0, #+0]
    189             return (uint16)LPTMR0->CNR;
   \        0x6   0x6800             LDR      R0,[R0, #+0]
   \        0x8   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \        0xA   0x4770             BX       LR               ;; return
    190          }
    191          
    192          /*
    193           *  LPLD_LPTMR_DelayMs
    194           *  低功耗定时器延时n个ms
    195           * 
    196           * 参数:
    197           *    period_ms--设定定时器的定时值 单位ms
    198           *    最大65535ms
    199           *
    200           *  输出:
    201           *      无
    202           */

   \                                 In section .text, align 2, keep-with-next
    203          void LPLD_LPTMR_DelayMs(uint16 period_ms)
    204          {
    205            if(!period_ms)
   \                     LPLD_LPTMR_DelayMs: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD016             BEQ.N    ??LPLD_LPTMR_DelayMs_0
    206              return;
    207            
    208            /* 开启LPTMR时钟 */
    209            SIM->SCGC5|=SIM_SCGC5_LPTIMER_MASK; 
   \                     ??LPLD_LPTMR_DelayMs_1: (+1)
   \        0x8   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40048038
   \        0xA   0x680A             LDR      R2,[R1, #+0]
   \        0xC   0xF052 0x0201      ORRS     R2,R2,#0x1
   \       0x10   0x600A             STR      R2,[R1, #+0]
    210            
    211            /* 设置毫秒延时计数 */
    212            LPTMR0->CMR = period_ms; 
   \       0x12   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \       0x14   0x....             LDR.N    R1,??DataTable7_6  ;; 0x40040008
   \       0x16   0x6008             STR      R0,[R1, #+0]
    213            
    214            /* 设置LPTMR不分频采用1kHz LPO为时钟源 */
    215            LPTMR0->PSR = 0|LPTMR_PSR_PCS(1)|LPTMR_PSR_PBYP_MASK; 
   \       0x18   0x2005             MOVS     R0,#+5
   \       0x1A   0x....             LDR.N    R1,??DataTable7_5  ;; 0x40040004
   \       0x1C   0x6008             STR      R0,[R1, #+0]
    216            
    217            /* 开启定时器 */
    218            LPTMR0->CSR |= LPTMR_CSR_TEN_MASK; 
   \       0x1E   0x....             LDR.N    R0,??DataTable7_4  ;; 0x40040000
   \       0x20   0x6801             LDR      R1,[R0, #+0]
   \       0x22   0xF051 0x0101      ORRS     R1,R1,#0x1
   \       0x26   0x6001             STR      R1,[R0, #+0]
    219          
    220            /* 等待计数达到设定值 */
    221            while (!(LPTMR0->CSR & LPTMR_CSR_TCF_MASK));
   \                     ??LPLD_LPTMR_DelayMs_2: (+1)
   \       0x28   0x6801             LDR      R1,[R0, #+0]
   \       0x2A   0x0609             LSLS     R1,R1,#+24
   \       0x2C   0xD5FC             BPL.N    ??LPLD_LPTMR_DelayMs_2
    222            
    223            /*清除定时比较标志 */
    224            LPTMR0->CSR &= ~LPTMR_CSR_TEN_MASK;
   \       0x2E   0x6801             LDR      R1,[R0, #+0]
   \       0x30   0x0849             LSRS     R1,R1,#+1
   \       0x32   0x0049             LSLS     R1,R1,#+1
   \       0x34   0x6001             STR      R1,[R0, #+0]
    225            
    226          }
   \                     ??LPLD_LPTMR_DelayMs_0: (+1)
   \       0x36   0x4770             BX       LR               ;; return
    227          
    228          
    229          /*
    230           * LPTMR中断处理函数
    231           * 与启动文件startup_K60.s中的中断向量表关联
    232           * 用户无需修改，程序自动进入对应通道中断函数
    233           */

   \                                 In section .text, align 2, keep-with-next
    234          void LPT_IRQHandler(void)
    235          {
   \                     LPT_IRQHandler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    236            LPTMR0->CSR|=LPTMR_CSR_TCF_MASK;  //清除LPT比较标志
   \        0x2   0x....             LDR.N    R0,??DataTable7_4  ;; 0x40040000
   \        0x4   0x6801             LDR      R1,[R0, #+0]
   \        0x6   0xF051 0x0180      ORRS     R1,R1,#0x80
   \        0xA   0x6001             STR      R1,[R0, #+0]
    237            LPTMR_ISR[0]();
   \        0xC   0x....             LDR.N    R0,??DataTable7_9
   \        0xE   0x6800             LDR      R0,[R0, #+0]
   \       0x10   0x4780             BLX      R0
    238          }
   \       0x12   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \        0x0   0xE000'E100        DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \        0x0   0xE000'E180        DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \        0x0   0x4004'8038        DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \        0x0   0x4004'0000        DC32     0x40040000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \        0x0   0x4004'0004        DC32     0x40040004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \        0x0   0x4004'0008        DC32     0x40040008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \        0x0   0x4004'904C        DC32     0x4004904c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \        0x0   0x4004'B014        DC32     0x4004b014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \        0x0   0x....'....        DC32     LPTMR_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \        0x0   0x4004'000C        DC32     0x4004000c

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x47 0x3A          DC8 47H, 3AH, 5CH, 41H, 49H, 63H, 61H, 72H
   \              0x5C 0x41    
   \              0x49 0x63    
   \              0x61 0x72    
   \        0x8   0x5C 0xE4          DC8 5CH, 0E4H, 0BFH, 0A1H, 0E6H, 0A0H, 87H, 5CH
   \              0xBF 0xA1    
   \              0xE6 0xA0    
   \              0x87 0x5C    
   \       0x10   0x6B 0x36          DC8 6BH, 36H, 30H, 5FH, 31H, 34H, 34H, 5CH
   \              0x30 0x5F    
   \              0x31 0x34    
   \              0x34 0x5C    
   \       0x18   0x73 0x6D          DC8 73H, 6DH, 61H, 72H, 74H, 63H, 61H, 72H
   \              0x61 0x72    
   \              0x74 0x63    
   \              0x61 0x72    
   \       0x20   0x5C 0x6C          DC8 5CH, 6CH, 69H, 62H, 5CH, 4CH, 50H, 4CH
   \              0x69 0x62    
   \              0x5C 0x4C    
   \              0x50 0x4C    
   \       0x28   0x44 0x5C          DC8 44H, 5CH, 48H, 57H, 5CH, 48H, 57H, 5FH
   \              0x48 0x57    
   \              0x5C 0x48    
   \              0x57 0x5F    
   \       0x30   0x4C 0x50          DC8 4CH, 50H, 54H, 4DH, 52H, 2EH, 63H, 0
   \              0x54 0x4D    
   \              0x52 0x2E    
   \              0x63 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   LPLD_LPTMR_Deinit
         8   -> __NVIC_DisableIRQ
       0   LPLD_LPTMR_DelayMs
       8   LPLD_LPTMR_DisableIrq
         8   -> __NVIC_DisableIRQ
       8   LPLD_LPTMR_EnableIrq
         8   -> __NVIC_EnableIRQ
       0   LPLD_LPTMR_GetPulseAcc
      32   LPLD_LPTMR_Init
        32   -> assert_failed
       0   LPLD_LPTMR_ResetCounter
       8   LPT_IRQHandler
         8   -- Indirect call
       0   __NVIC_DisableIRQ
       0   __NVIC_EnableIRQ


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
      56  ?_0
      40  LPLD_LPTMR_Deinit
      56  LPLD_LPTMR_DelayMs
      12  LPLD_LPTMR_DisableIrq
      12  LPLD_LPTMR_EnableIrq
      12  LPLD_LPTMR_GetPulseAcc
     202  LPLD_LPTMR_Init
      12  LPLD_LPTMR_ResetCounter
       4  LPTMR_ISR
      20  LPT_IRQHandler
      36  __NVIC_DisableIRQ
      28  __NVIC_EnableIRQ

 
   4 bytes in section .bss
  56 bytes in section .rodata
 474 bytes in section .text
 
 474 bytes of CODE  memory
  56 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: 1
