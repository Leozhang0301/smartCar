###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.1.169/W32 for ARM         23/Apr/2019  21:09:42
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  G:\AIcar\@@\k60_144\smartcar\lib\common\encoder.c
#    Command line =  
#        -f C:\Users\admin\AppData\Local\Temp\EW2934.tmp
#        (G:\AIcar\@@\k60_144\smartcar\lib\common\encoder.c -D LPLD_K60
#        -lCN
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\BOOT\List"
#        -lB
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\BOOT\List"
#        -o
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\BOOT\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        G:\AIcar\arm\inc\c\DLib_Config_Normal.h -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\app\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\CPU\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\common\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\HW\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\DEV\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Ports\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Source\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\option\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\common\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\driver\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\descriptor\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\class\"
#        -I
#        "G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\Jay\"
#        -Ol -I G:\AIcar\arm\CMSIS\Core\Include\ -I
#        G:\AIcar\arm\CMSIS\DSP\Include\ -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\BOOT\List\encoder.lst
#    Object file  =  
#        G:\AIcar\@@\k60_144\smartcar\project\28-(SDHC)LPLD_SdCard\iar\BOOT\Obj\encoder.o
#
###############################################################################

G:\AIcar\@@\k60_144\smartcar\lib\common\encoder.c
      1          /**
      2          * --------------基于"拉普兰德K60底层库V3"的工程（LPLD_QuadratureDecoder）-----------------
      3          * @file LPLD_QuadratureDecoder.c
      4          * @version 0.1
      5          * @date 2013-9-29
      6          * @BRIEF 利用FTM模块的正交解码功能，实现编码器的正反转测速。
      7          *
      8          * 版权所有:北京拉普兰德电子技术有限公司
      9          * http://www.lpld.cn
     10          * mail:support@lpld.cn
     11          * 硬件平台:  LPLD K60 Card / LPLD K60 Nano
     12          *
     13          * 本工程基于"拉普兰德K60底层库V3"开发，
     14          * 所有开源代码均在"lib"文件夹下，用户不必更改该目录下代码，
     15          * 所有用户工程需保存在"project"文件夹下，以工程名定义文件夹名，
     16          * 底层库使用方法见相关文档。
     17          *
     18          */
     19          #include "include.h"
     20          
     21          
     22          
     23          /****************************************
     24          说明：
     25          *分别将编码器的AB相信号接入PTB0、PTB1引脚
     26          *将MiniUSB线插入RUSH Kinetis开发板的USB
     27          插座，并连接至电脑USB接口。
     28          *使用串口调试助手波特率设置为115200
     29          *使用串口调试助手查看运行结果。
     30          *使编码器产生正反转，查看运行结果。
     31          ****************************************/
     32          
     33          //函数声明
     34          void L1_init();
     35          void L2_init();
     36          void R1_init();
     37          void R2_init();
     38          
     39          
     40          
     41          //变量定义
     42          int left_getSpeed();
     43          int right_getSpeed();

   \                                 In section .bss, align 4
     44          int left_reSpeed;
   \                     left_reSpeed:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
     45          int right_reSpeed;
   \                     right_reSpeed:
   \        0x0                      DS8 4
     46          

   \                                 In section .bss, align 4
     47          FTM_InitTypeDef ftm1_init_struct; 
   \                     ftm1_init_struct:
   \        0x0                      DS8 28

   \                                 In section .bss, align 4
     48          LPTMR_InitTypeDef lptmr_init_structure;
   \                     lptmr_init_structure:
   \        0x0                      DS8 12

   \                                 In section .bss, align 4
     49          GPIO_InitTypeDef gpio_init_struct;
   \                     gpio_init_struct:
   \        0x0                      DS8 20
     50          

   \                                 In section .text, align 2, keep-with-next
     51          void ic_init()
     52          {
   \                     ic_init: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     53            L1_init();
   \        0x2   0x....'....        BL       L1_init
     54            L2_init();
   \        0x6   0x....'....        BL       L2_init
     55            R1_init();
   \        0xA   0x....'....        BL       R1_init
     56            R2_init();
   \        0xE   0x....'....        BL       R2_init
     57          }
   \       0x12   0xBD01             POP      {R0,PC}          ;; return
     58          
     59          /*********************************
     60          编码器R1
     61          **********************************/ 

   \                                 In section .text, align 2, keep-with-next
     62          void R1_init(void)
     63          {
   \                     R1_init: (+1)
   \        0x0   0xB51F             PUSH     {R0-R4,LR}
     64            
     65            //配置正交解码功能参数
     66            ftm1_init_struct.FTM_Ftmx = FTM1;              //只有FTM1和FTM2有正交解码功能
   \        0x2   0x....             LDR.N    R1,??DataTable6
   \        0x4   0x....             LDR.N    R4,??DataTable6_1  ;; 0x40039000
   \        0x6   0x600C             STR      R4,[R1, #+0]
     67            ftm1_init_struct.FTM_Mode = FTM_MODE_QD;       //使能输入捕获模式
   \        0x8   0x2004             MOVS     R0,#+4
   \        0xA   0x7108             STRB     R0,[R1, #+4]
     68            ftm1_init_struct.FTM_QdMode = QD_MODE_CNTDIR;    //计数和方向解码模式
   \        0xC   0x2008             MOVS     R0,#+8
   \        0xE   0x7488             STRB     R0,[R1, #+18]
     69            //初始化FTM
     70            LPLD_FTM_Init(ftm1_init_struct);
   \       0x10   0xB084             SUB      SP,SP,#+16
   \       0x12   0x4668             MOV      R0,SP
   \       0x14   0x221C             MOVS     R2,#+28
   \       0x16   0x....'....        BL       __aeabi_memcpy4
   \       0x1A   0xBC0F             POP      {R0-R3}
   \       0x1C   0x....'....        BL       LPLD_FTM_Init
     71            //PTB0引脚接A相输入、PTB1引脚接B相输入
     72            LPLD_FTM_QD_Enable(FTM1, PTB18, PTB19);
   \       0x20   0x2233             MOVS     R2,#+51
   \       0x22   0x2132             MOVS     R1,#+50
   \       0x24   0x0020             MOVS     R0,R4
   \       0x26   0x....'....        BL       LPLD_FTM_QD_Enable
     73            
     74          }
   \       0x2A   0xBD1F             POP      {R0-R4,PC}       ;; return
     75          
     76          /*********************************
     77          编码器R2
     78          **********************************/ 

   \                                 In section .text, align 2, keep-with-next
     79          void R2_init(void)
     80          {
   \                     R2_init: (+1)
   \        0x0   0xB51F             PUSH     {R0-R4,LR}
     81            
     82            //配置正交解码功能参数
     83            ftm1_init_struct.FTM_Ftmx = FTM1;              //只有FTM1和FTM2有正交解码功能
   \        0x2   0x....             LDR.N    R1,??DataTable6
   \        0x4   0x....             LDR.N    R4,??DataTable6_1  ;; 0x40039000
   \        0x6   0x600C             STR      R4,[R1, #+0]
     84            ftm1_init_struct.FTM_Mode = FTM_MODE_QD;       //使能输入捕获模式
   \        0x8   0x2004             MOVS     R0,#+4
   \        0xA   0x7108             STRB     R0,[R1, #+4]
     85            ftm1_init_struct.FTM_QdMode = QD_MODE_CNTDIR;    //计数和方向解码模式
   \        0xC   0x2008             MOVS     R0,#+8
   \        0xE   0x7488             STRB     R0,[R1, #+18]
     86            //初始化FTM
     87            LPLD_FTM_Init(ftm1_init_struct);
   \       0x10   0xB084             SUB      SP,SP,#+16
   \       0x12   0x4668             MOV      R0,SP
   \       0x14   0x221C             MOVS     R2,#+28
   \       0x16   0x....'....        BL       __aeabi_memcpy4
   \       0x1A   0xBC0F             POP      {R0-R3}
   \       0x1C   0x....'....        BL       LPLD_FTM_Init
     88            //PTB0引脚接A相输入、PTB1引脚接B相输入
     89            LPLD_FTM_QD_Enable(FTM1, PTB0, PTB1);
   \       0x20   0x2221             MOVS     R2,#+33
   \       0x22   0x2120             MOVS     R1,#+32
   \       0x24   0x0020             MOVS     R0,R4
   \       0x26   0x....'....        BL       LPLD_FTM_QD_Enable
     90            
     91          }
   \       0x2A   0xBD1F             POP      {R0-R4,PC}       ;; return
     92          
     93          /*********************************
     94          编码器L2
     95          **********************************/ 

   \                                 In section .text, align 2, keep-with-next
     96          void L2_init(void)
     97          {
   \                     L2_init: (+1)
   \        0x0   0xB51F             PUSH     {R0-R4,LR}
     98            
     99            //配置正交解码功能参数
    100            ftm1_init_struct.FTM_Ftmx = FTM1;              //只有FTM1和FTM2有正交解码功能
   \        0x2   0x....             LDR.N    R1,??DataTable6
   \        0x4   0x....             LDR.N    R4,??DataTable6_1  ;; 0x40039000
   \        0x6   0x600C             STR      R4,[R1, #+0]
    101            ftm1_init_struct.FTM_Mode = FTM_MODE_QD;       //使能输入捕获模式
   \        0x8   0x2004             MOVS     R0,#+4
   \        0xA   0x7108             STRB     R0,[R1, #+4]
    102            ftm1_init_struct.FTM_QdMode = QD_MODE_CNTDIR;    //计数和方向解码模式
   \        0xC   0x2008             MOVS     R0,#+8
   \        0xE   0x7488             STRB     R0,[R1, #+18]
    103            //初始化FTM
    104            LPLD_FTM_Init(ftm1_init_struct);
   \       0x10   0xB084             SUB      SP,SP,#+16
   \       0x12   0x4668             MOV      R0,SP
   \       0x14   0x221C             MOVS     R2,#+28
   \       0x16   0x....'....        BL       __aeabi_memcpy4
   \       0x1A   0xBC0F             POP      {R0-R3}
   \       0x1C   0x....'....        BL       LPLD_FTM_Init
    105            //PTB0引脚接A相输入、PTB1引脚接B相输入
    106            LPLD_FTM_QD_Enable(FTM1, PTA9, PTA8);
   \       0x20   0x2208             MOVS     R2,#+8
   \       0x22   0x2109             MOVS     R1,#+9
   \       0x24   0x0020             MOVS     R0,R4
   \       0x26   0x....'....        BL       LPLD_FTM_QD_Enable
    107            
    108          }
   \       0x2A   0xBD1F             POP      {R0-R4,PC}       ;; return
    109          
    110          /*********************************
    111          编码器L1
    112          **********************************/ 
    113          

   \                                 In section .text, align 2, keep-with-next
    114          void L1_init(void)
    115          {
   \                     L1_init: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    116            lptmr_init_structure.LPTMR_Mode = LPTMR_MODE_PLACC;
   \        0x2   0x....             LDR.N    R0,??DataTable6_2
   \        0x4   0x2101             MOVS     R1,#+1
   \        0x6   0x7001             STRB     R1,[R0, #+0]
    117            lptmr_init_structure.LPTMR_PluseAccInput = LPTMR_ALT1;
   \        0x8   0x2101             MOVS     R1,#+1
   \        0xA   0x7101             STRB     R1,[R0, #+4]
    118            lptmr_init_structure.LPTMR_Isr = NULL;
   \        0xC   0x2100             MOVS     R1,#+0
   \        0xE   0x6081             STR      R1,[R0, #+8]
    119            LPLD_LPTMR_Init(lptmr_init_structure); 
   \       0x10   0xC807             LDM      R0,{R0-R2}
   \       0x12   0x....'....        BL       LPLD_LPTMR_Init
    120            //初始化IO口
    121            gpio_init_struct.GPIO_PTx = PTC;
   \       0x16   0x....             LDR.N    R1,??DataTable6_3
   \       0x18   0x....             LDR.N    R0,??DataTable6_4  ;; 0x400ff080
   \       0x1A   0x6008             STR      R0,[R1, #+0]
    122            gpio_init_struct.GPIO_Dir =DIR_INPUT;
   \       0x1C   0x2000             MOVS     R0,#+0
   \       0x1E   0x7308             STRB     R0,[R1, #+12]
    123            gpio_init_struct.GPIO_PinControl = INPUT_PULL_UP;
   \       0x20   0x2003             MOVS     R0,#+3
   \       0x22   0x6088             STR      R0,[R1, #+8]
    124            gpio_init_struct.GPIO_Pins = GPIO_Pin5;
   \       0x24   0x2020             MOVS     R0,#+32
   \       0x26   0x6048             STR      R0,[R1, #+4]
    125            LPLD_GPIO_Init(gpio_init_struct);
   \       0x28   0xB084             SUB      SP,SP,#+16
   \       0x2A   0x4668             MOV      R0,SP
   \       0x2C   0x2214             MOVS     R2,#+20
   \       0x2E   0x....'....        BL       __aeabi_memcpy4
   \       0x32   0xBC0F             POP      {R0-R3}
   \       0x34   0x....'....        BL       LPLD_GPIO_Init
    126          }
   \       0x38   0xBD01             POP      {R0,PC}          ;; return
    127          
    128          
    129          

   \                                 In section .text, align 2, keep-with-next
    130          int right_getSpeed()
    131          {
   \                     right_getSpeed: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    132            int16 val=0;
   \        0x2   0x2000             MOVS     R0,#+0
    133            val=LPLD_LPTMR_GetPulseAcc();
   \        0x4   0x....'....        BL       LPLD_LPTMR_GetPulseAcc
   \        0x8   0x0004             MOVS     R4,R0
    134            LPLD_LPTMR_ResetCounter();
   \        0xA   0x....'....        BL       LPLD_LPTMR_ResetCounter
    135            LPLD_LPTMR_Init(lptmr_init_structure);
   \        0xE   0x....             LDR.N    R0,??DataTable6_2
   \       0x10   0xC807             LDM      R0,{R0-R2}
   \       0x12   0x....'....        BL       LPLD_LPTMR_Init
    136            if(1==PTC5_I)
   \       0x16   0x....             LDR.N    R0,??DataTable6_5  ;; 0x43fe1214
   \       0x18   0x6801             LDR      R1,[R0, #+0]
   \       0x1A   0x2901             CMP      R1,#+1
   \       0x1C   0xD102             BNE.N    ??right_getSpeed_0
    137            {return val;}
   \       0x1E   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \       0x20   0x0020             MOVS     R0,R4
   \       0x22   0xE007             B.N      ??right_getSpeed_1
    138            else if(0==PTC5_I)
   \                     ??right_getSpeed_0: (+1)
   \       0x24   0x6800             LDR      R0,[R0, #+0]
   \       0x26   0x2800             CMP      R0,#+0
   \       0x28   0xD103             BNE.N    ??right_getSpeed_2
    139            {return -val;}
   \       0x2A   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \       0x2C   0x4264             RSBS     R4,R4,#+0
   \       0x2E   0x0020             MOVS     R0,R4
   \       0x30   0xE000             B.N      ??right_getSpeed_1
    140            return 0;
   \                     ??right_getSpeed_2: (+1)
   \       0x32   0x2000             MOVS     R0,#+0
   \                     ??right_getSpeed_1: (+1)
   \       0x34   0xBD10             POP      {R4,PC}          ;; return
    141          }
    142          

   \                                 In section .text, align 2, keep-with-next
    143          int left_getSpeed()
    144          {
   \                     left_getSpeed: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
    145            
    146            int16 val=0;
   \        0x2   0x2000             MOVS     R0,#+0
    147            val=LPLD_FTM_GetCounter(FTM1);
   \        0x4   0x....             LDR.N    R5,??DataTable6_1  ;; 0x40039000
   \        0x6   0x0028             MOVS     R0,R5
   \        0x8   0x....'....        BL       LPLD_FTM_GetCounter
   \        0xC   0x0004             MOVS     R4,R0
    148            LPLD_FTM_ClearCounter(FTM1);
   \        0xE   0x0028             MOVS     R0,R5
   \       0x10   0x....'....        BL       LPLD_FTM_ClearCounter
    149            return val;
   \       0x14   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \       0x16   0x0020             MOVS     R0,R4
   \       0x18   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    150          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \        0x0   0x....'....        DC32     ftm1_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \        0x0   0x4003'9000        DC32     0x40039000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \        0x0   0x....'....        DC32     lptmr_init_structure

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \        0x0   0x....'....        DC32     gpio_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \        0x0   0x400F'F080        DC32     0x400ff080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \        0x0   0x43FE'1214        DC32     0x43fe1214
    151          
    152            
    153          
    154          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   L1_init
         8   -> LPLD_GPIO_Init
         8   -> LPLD_LPTMR_Init
        24   -> __aeabi_memcpy4
      40   L2_init
        24   -> LPLD_FTM_Init
        24   -> LPLD_FTM_QD_Enable
        40   -> __aeabi_memcpy4
      40   R1_init
        24   -> LPLD_FTM_Init
        24   -> LPLD_FTM_QD_Enable
        40   -> __aeabi_memcpy4
      40   R2_init
        24   -> LPLD_FTM_Init
        24   -> LPLD_FTM_QD_Enable
        40   -> __aeabi_memcpy4
       8   ic_init
         8   -> L1_init
         8   -> L2_init
         8   -> R1_init
         8   -> R2_init
      16   left_getSpeed
        16   -> LPLD_FTM_ClearCounter
        16   -> LPLD_FTM_GetCounter
       8   right_getSpeed
         8   -> LPLD_LPTMR_GetPulseAcc
         8   -> LPLD_LPTMR_Init
         8   -> LPLD_LPTMR_ResetCounter


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
      58  L1_init
      44  L2_init
      44  R1_init
      44  R2_init
      28  ftm1_init_struct
      20  gpio_init_struct
      20  ic_init
      26  left_getSpeed
       4  left_reSpeed
      12  lptmr_init_structure
      54  right_getSpeed
       4  right_reSpeed

 
  68 bytes in section .bss
 314 bytes in section .text
 
 314 bytes of CODE memory
  68 bytes of DATA memory

Errors: none
Warnings: 3
