///////////////////////////////////////////////////////////////////////////////
//
// IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM       08/Jul/2017  01:22:38
// Copyright 1999-2014 IAR Systems AB.
//
//    Cpu mode     =  thumb
//    Endian       =  little
//    Source file  =  
//        D:\smartcar\backups\双车备份\7-3\测试工程\测试专用\7.13 -
//        比赛\lib\Jay\LQ12864.c
//    Command line =  
//        "D:\smartcar\backups\双车备份\7-3\测试工程\测试专用\7.13 -
//        比赛\lib\Jay\LQ12864.c" -D LPLD_K60 -lCN
//        "D:\smartcar\backups\双车备份\7-3\测试工程\测试专用\7.13 -
//        比赛\project\28-(SDHC)LPLD_SdCard\iar\BOOT\List\" -lB
//        "D:\smartcar\backups\双车备份\7-3\测试工程\测试专用\7.13 -
//        比赛\project\28-(SDHC)LPLD_SdCard\iar\BOOT\List\" -o
//        "D:\smartcar\backups\双车备份\7-3\测试工程\测试专用\7.13 -
//        比赛\project\28-(SDHC)LPLD_SdCard\iar\BOOT\Obj\" --no_cse --no_unroll
//        --no_inline --no_code_motion --no_tbaa --no_clustering
//        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
//        --dlib_config D:\IAR\arm\INC\c\DLib_Config_Normal.h -I
//        "D:\smartcar\backups\双车备份\7-3\测试工程\测试专用\7.13 -
//        比赛\project\28-(SDHC)LPLD_SdCard\iar\..\app\" -I
//        "D:\smartcar\backups\双车备份\7-3\测试工程\测试专用\7.13 -
//        比赛\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\CPU\" -I
//        "D:\smartcar\backups\双车备份\7-3\测试工程\测试专用\7.13 -
//        比赛\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\common\" -I
//        "D:\smartcar\backups\双车备份\7-3\测试工程\测试专用\7.13 -
//        比赛\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\" -I
//        "D:\smartcar\backups\双车备份\7-3\测试工程\测试专用\7.13 -
//        比赛\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\HW\" -I
//        "D:\smartcar\backups\双车备份\7-3\测试工程\测试专用\7.13 -
//        比赛\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\DEV\" -I
//        "D:\smartcar\backups\双车备份\7-3\测试工程\测试专用\7.13 -
//        比赛\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Ports\" -I
//        "D:\smartcar\backups\双车备份\7-3\测试工程\测试专用\7.13 -
//        比赛\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Source\"
//        -I "D:\smartcar\backups\双车备份\7-3\测试工程\测试专用\7.13 -
//        比赛\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\" -I
//        "D:\smartcar\backups\双车备份\7-3\测试工程\测试专用\7.13 -
//        比赛\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\option\" -I
//        "D:\smartcar\backups\双车备份\7-3\测试工程\测试专用\7.13 -
//        比赛\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\common\" -I
//        "D:\smartcar\backups\双车备份\7-3\测试工程\测试专用\7.13 -
//        比赛\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\driver\" -I
//        "D:\smartcar\backups\双车备份\7-3\测试工程\测试专用\7.13 -
//        比赛\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\descriptor\"
//        -I "D:\smartcar\backups\双车备份\7-3\测试工程\测试专用\7.13 -
//        比赛\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\class\" -I
//        "D:\smartcar\backups\双车备份\7-3\测试工程\测试专用\7.13 -
//        比赛\lib\Jay\" -Ol -I D:\IAR\arm\CMSIS\Include\ -D ARM_MATH_CM4
//    List file    =  
//        D:\smartcar\backups\双车备份\7-3\测试工程\测试专用\7.13 -
//        比赛\project\28-(SDHC)LPLD_SdCard\iar\BOOT\List\LQ12864.s
//
///////////////////////////////////////////////////////////////////////////////

        #define SHT_PROGBITS 0x1

        EXTERN LPLD_GPIO_Init
        EXTERN __aeabi_cfcmple
        EXTERN __aeabi_cfrcmple
        EXTERN __aeabi_d2iz
        EXTERN __aeabi_dadd
        EXTERN __aeabi_ddiv
        EXTERN __aeabi_dmul
        EXTERN __aeabi_f2d
        EXTERN __aeabi_f2iz
        EXTERN __aeabi_f2uiz
        EXTERN __aeabi_fmul
        EXTERN __aeabi_fsub
        EXTERN __aeabi_i2f
        EXTERN __aeabi_memcpy4
        EXTERN __aeabi_ui2d
        EXTERN __aeabi_ui2f
        EXTERN sprintf

        PUBLIC Change_To_Bit
        PUBLIC Delay_temp
        PUBLIC Draw_BMP
        PUBLIC Draw_LQLogo
        PUBLIC Draw_LibLogo
        PUBLIC F14x16
        PUBLIC F14x16_Idx
        PUBLIC F6x8
        PUBLIC F8X16
        PUBLIC Float_To_String
        PUBLIC LCD_CLS
        PUBLIC LCD_DLY_ms
        PUBLIC LCD_Fill
        PUBLIC LCD_Fill_Line
        PUBLIC LCD_Init
        PUBLIC LCD_P14x16Str
        PUBLIC LCD_P14x16Str2
        PUBLIC LCD_P6x8Str
        PUBLIC LCD_P6x8Str2
        PUBLIC LCD_P8x16Str
        PUBLIC LCD_P8x16Str2
        PUBLIC LCD_PaintTSL1401_Bulk
        PUBLIC LCD_PaintTSL1401_Line
        PUBLIC LCD_Print
        PUBLIC LCD_PutPixel
        PUBLIC LCD_Rectangle
        PUBLIC LCD_Set_Pos
        PUBLIC LCD_WrCmd
        PUBLIC LCD_WrDat
        PUBLIC LCD_Write_Float
        PUBLIC LCD_Write_Float_Dot
        PUBLIC LCD_Write_Float_Dot2
        PUBLIC LCD_Write_Float_Dot_Chinese
        PUBLIC LED_PrintImag2
        PUBLIC LED_PrintImage
        PUBLIC LIBLOGO60x58
        PUBLIC List_Move
        PUBLIC List_Paint
        PUBLIC OLED_Write_Data
        PUBLIC Paint_Angle
        PUBLIC Paint_List
        PUBLIC SetAddressingMode
        PUBLIC SetColumnAddress
        PUBLIC SetContrastControl
        PUBLIC SetPageAddress
        PUBLIC SetStartColumn
        PUBLIC SetStartLine
        PUBLIC SetStartPage
        PUBLIC Set_Charge_Pump
        PUBLIC Set_Common_Config
        PUBLIC Set_Common_Remap
        PUBLIC Set_Display_Clock
        PUBLIC Set_Display_Offset
        PUBLIC Set_Display_On_Off
        PUBLIC Set_Entire_Display
        PUBLIC Set_Inverse_Display
        PUBLIC Set_Multiplex_Ratio
        PUBLIC Set_NOP
        PUBLIC Set_Precharge_Period
        PUBLIC Set_Segment_Remap
        PUBLIC Set_VCOMH
        PUBLIC Temp_List
        PUBLIC adjust
        PUBLIC floatToInt
        PUBLIC floatToInt2
        PUBLIC gpio_init_struct_OLED
        PUBLIC init_gpio_OLED
        PUBLIC longqiu96x64
        PUBLIC str1
        PUBLIC str2
        PUBLIC str3
        PUBLIC str4
        PUBLIC str5
        PUBLIC str6

// D:\smartcar\backups\双车备份\7-3\测试工程\测试专用\7.13 - 比赛\lib\Jay\LQ12864.c
//    1 /*
//    2  *  液晶显示
//    3  *  测试
//    4  *  @JayLin林杰 @厦门大学嘉庚学院 @博学队
//    5  */
//    6 #include  "common.h"
//    7 #include "include.h"
//    8 
//    9 #define HIGH  1u
//   10 #define LOW   0u
//   11 
//   12 #define LED_IMAGE_WHITE       1
//   13 #define LED_IMAGE_BLACK       0
//   14 

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//   15 GPIO_InitTypeDef gpio_init_struct_OLED;
gpio_init_struct_OLED:
        DS8 20

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//   16 void init_gpio_OLED()
//   17 {
init_gpio_OLED:
        PUSH     {R7,LR}
//   18  /*
//   19   *配置 PTC16~PTC19 为GPIO功能,输出,高电平，禁用中断
//   20   */
//   21   gpio_init_struct_OLED.GPIO_PTx = PTC;//没改前，PTA
        LDR.W    R0,??DataTable13  ;; 0x400ff080
        LDR.W    R1,??DataTable13_1
        STR      R0,[R1, #+0]
//   22   gpio_init_struct_OLED.GPIO_Pins = GPIO_Pin10|GPIO_Pin9;//没改前GPIO_Pin14|GPIO_Pin16
        MOV      R0,#+1536
        LDR.W    R1,??DataTable13_1
        STR      R0,[R1, #+4]
//   23   gpio_init_struct_OLED.GPIO_Dir = DIR_OUTPUT;
        MOVS     R0,#+1
        LDR.W    R1,??DataTable13_1
        STRB     R0,[R1, #+12]
//   24   gpio_init_struct_OLED.GPIO_Output = OUTPUT_H;
        MOVS     R0,#+1
        LDR.W    R1,??DataTable13_1
        STRB     R0,[R1, #+13]
//   25   gpio_init_struct_OLED.GPIO_PinControl = IRQC_DIS;
        MOVS     R0,#+0
        LDR.W    R1,??DataTable13_1
        STR      R0,[R1, #+8]
//   26   LPLD_GPIO_Init(gpio_init_struct_OLED);
        LDR.W    R1,??DataTable13_1
        SUB      SP,SP,#+16
        MOV      R0,SP
        MOVS     R2,#+20
        BL       __aeabi_memcpy4
        POP      {R0-R3}
        BL       LPLD_GPIO_Init
//   27   
//   28   gpio_init_struct_OLED.GPIO_PTx = PTC;//PTB
        LDR.W    R0,??DataTable13  ;; 0x400ff080
        LDR.W    R1,??DataTable13_1
        STR      R0,[R1, #+0]
//   29   gpio_init_struct_OLED.GPIO_Pins = GPIO_Pin8|GPIO_Pin7;//GPIO_Pin20|GPIO_Pin21
        MOV      R0,#+384
        LDR.W    R1,??DataTable13_1
        STR      R0,[R1, #+4]
//   30   LPLD_GPIO_Init(gpio_init_struct_OLED);
        LDR.W    R1,??DataTable13_1
        SUB      SP,SP,#+16
        MOV      R0,SP
        MOVS     R2,#+20
        BL       __aeabi_memcpy4
        POP      {R0-R3}
        BL       LPLD_GPIO_Init
//   31 }
        POP      {R0,PC}          ;; return

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_0:
        DATA
        DC8 25H, 64H, 2EH, 25H, 64H, 0, 0
        DC8 0
//   32 
//   33 //======================================

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//   34 const byte F6x8[][6] =
F6x8:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 7, 0, 7, 0, 0, 20, 127
        DC8 20, 127, 20, 0, 36, 42, 127, 42, 18, 0, 98, 100, 8, 19, 35, 0, 54
        DC8 73, 85, 34, 80, 0, 0, 5, 3, 0, 0, 0, 0, 28, 34, 65, 0, 0, 0, 65, 34
        DC8 28, 0, 0, 20, 8, 62, 8, 20, 0, 8, 8, 62, 8, 8, 0, 0, 0, 160, 96, 0
        DC8 0, 8, 8, 8, 8, 8, 0, 0, 96, 96, 0, 0, 0, 32, 16, 8, 4, 2, 0, 62, 81
        DC8 73, 69, 62, 0, 0, 66, 127, 64, 0, 0, 66, 97, 81, 73, 70, 0, 33, 65
        DC8 69, 75, 49, 0, 24, 20, 18, 127, 16, 0, 39, 69, 69, 69, 57, 0, 60
        DC8 74, 73, 73, 48, 0, 1, 113, 9, 5, 3, 0, 54, 73, 73, 73, 54, 0, 6, 73
        DC8 73, 41, 30, 0, 0, 54, 54, 0, 0, 0, 0, 86, 54, 0, 0, 0, 8, 20, 34
        DC8 65, 0, 0, 20, 20, 20, 20, 20, 0, 0, 65, 34, 20, 8, 0, 2, 1, 81, 9
        DC8 6, 0, 50, 73, 89, 81, 62, 0, 124, 18, 17, 18, 124, 0, 127, 73, 73
        DC8 73, 54, 0, 62, 65, 65, 65, 34, 0, 127, 65, 65, 34, 28, 0, 127, 73
        DC8 73, 73, 65, 0, 127, 9, 9, 9, 1, 0, 62, 65, 73, 73, 122, 0, 127, 8
        DC8 8, 8, 127, 0, 0, 65, 127, 65, 0, 0, 32, 64, 65, 63, 1, 0, 127, 8
        DC8 20, 34, 65, 0, 127, 64, 64, 64, 64, 0, 127, 2, 12, 2, 127, 0, 127
        DC8 4, 8, 16, 127, 0, 62, 65, 65, 65, 62, 0, 127, 9, 9, 9, 6, 0, 62, 65
        DC8 81, 33, 94, 0, 127, 9, 25, 41, 70, 0, 70, 73, 73, 73, 49, 0, 1, 1
        DC8 127, 1, 1, 0, 63, 64, 64, 64, 63, 0, 31, 32, 64, 32, 31, 0, 63, 64
        DC8 56, 64, 63, 0, 99, 20, 8, 20, 99, 0, 7, 8, 112, 8, 7, 0, 97, 81, 73
        DC8 69, 67, 0, 0, 127, 65, 65, 0, 0, 85, 42, 85, 42, 85, 0, 0, 65, 65
        DC8 127, 0, 0, 4, 2, 1, 2, 4, 0, 64, 64, 64, 64, 64, 0, 0, 1, 2, 4, 0
        DC8 0, 32, 84, 84, 84, 120, 0, 127, 72, 68, 68, 56, 0, 56, 68, 68, 68
        DC8 32, 0, 56, 68, 68, 72, 127, 0, 56, 84, 84, 84, 24, 0, 8, 126, 9, 1
        DC8 2, 0, 24, 164, 164, 164, 124, 0, 127, 8, 4, 4, 120, 0, 0, 68, 125
        DC8 64, 0, 0, 64, 128, 132, 125, 0, 0, 127, 16, 40, 68, 0, 0, 0, 65
        DC8 127, 64, 0, 0, 124, 4, 24, 4, 120, 0, 124, 8, 4, 4, 120, 0, 56, 68
        DC8 68, 68, 56, 0, 252, 36, 36, 36, 24, 0, 24, 36, 36, 24, 252, 0, 124
        DC8 8, 4, 4, 8, 0, 72, 84, 84, 84, 32, 0, 4, 63, 68, 64, 32, 0, 60, 64
        DC8 64, 32, 124, 0, 28, 32, 64, 32, 28, 0, 60, 64, 48, 64, 60, 0, 68
        DC8 40, 16, 40, 68, 0, 28, 160, 160, 160, 124, 0, 68, 100, 84, 76, 68
        DC8 20, 20, 20, 20, 20, 20
//   35 {
//   36     { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
//   37     { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
//   38     { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
//   39     { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
//   40     { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
//   41     { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
//   42     { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
//   43     { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
//   44     { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
//   45     { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
//   46     { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
//   47     { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
//   48     { 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
//   49     { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
//   50     { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
//   51     { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
//   52     { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
//   53     { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
//   54     { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
//   55     { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
//   56     { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
//   57     { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
//   58     { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
//   59     { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
//   60     { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
//   61     { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
//   62     { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
//   63     { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
//   64     { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
//   65     { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
//   66     { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
//   67     { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
//   68     { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
//   69     { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
//   70     { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
//   71     { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
//   72     { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
//   73     { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
//   74     { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
//   75     { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
//   76     { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
//   77     { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
//   78     { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
//   79     { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
//   80     { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
//   81     { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
//   82     { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
//   83     { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
//   84     { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
//   85     { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
//   86     { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
//   87     { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
//   88     { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
//   89     { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
//   90     { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
//   91     { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
//   92     { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
//   93     { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
//   94     { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
//   95     { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
//   96     { 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
//   97     { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
//   98     { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
//   99     { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
//  100     { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
//  101     { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
//  102     { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
//  103     { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
//  104     { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
//  105     { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
//  106     { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
//  107     { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
//  108     { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
//  109     { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
//  110     { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
//  111     { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
//  112     { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
//  113     { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
//  114     { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
//  115     { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
//  116     { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
//  117     { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
//  118     { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
//  119     { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
//  120     { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
//  121     { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
//  122     { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
//  123     { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
//  124     { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
//  125     { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
//  126     { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
//  127     { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
//  128 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  129 const byte F14x16_Idx[] = 
F14x16_Idx:
        DATA
        DC8 0B1H, 0B1H, 0BEH, 0A9H, 0C1H, 0FAH, 0C7H, 0F0H
        DC8 0C7H, 0F1H, 0BFH, 0C6H, 0BCH, 0BCH, 0BFH, 0AAH
        DC8 0B7H, 0A2H, 0B0H, 0E5H, 0D6H, 0C7H, 0C4H, 0DCH
        DC8 0B3H, 0B5H, 0CAH, 0D7H, 0D1H, 0A1H, 0D2H, 0BAH
        DC8 0BEH, 0A7H, 0CAH, 0D2H, 0CEH, 0C2H, 0B6H, 0C8H
        DC8 0B0H, 0B4H, 0BCH, 0FCH, 0B4H, 0CEH, 0B5H, 0E7H
        DC8 0D1H, 0B9H, 0E3H, 0D0H, 0D6H, 0B5H, 0C9H, 0CFH
        DC8 0CFH, 0C2H, 0D7H, 0F3H, 0D3H, 0D2H, 0CBH, 0D9H
        DC8 0B6H, 0C8H, 0B7H, 0BDH, 0CFH, 0F2H, 0BFH, 0D8H
        DC8 0BDH, 0C7H, 0B4H, 0F3H, 0D0H, 0A1H, 0B8H, 0DFH
        DC8 0B5H, 0CDH, 0B6H, 0C1H, 0D0H, 0B4H, 0CDH, 0CBH
        DC8 0B3H, 0F6H, 0CFH, 0DEH, 0D6H, 0C6H, 0D7H, 0B4H
        DC8 0CCH, 0ACH, 0A3H, 0BAH, 0CAH, 0BCH, 0BDH, 0E1H
        DC8 0CAH, 0F8H, 0D5H, 0FDH, 0B7H, 0B4H, 0D5H, 0BCH
        DC8 0BFH, 0D5H, 0B1H, 0C8H, 0B8H, 0B4H, 0CEH, 0BBH
        DC8 0D6H, 0D0H, 0B9H, 0D8H, 0B1H, 0D5H, 0B3H, 0F5H
        DC8 0BBH, 0AFH, 0C9H, 0E8H, 0D6H, 0C3H, 0B6H, 0E6H
        DC8 0BBH, 0FAH, 0CBH, 0C0H, 0C7H, 0F8H, 0C7H, 0B0H
        DC8 0D5H, 0B0H, 0BEH, 0E0H, 0C0H, 0EBH, 0D4H, 0A4H
        DC8 0C9H, 0E8H, 0BCH, 0ECH, 0B2H, 0E2H, 0B5H, 0C6H
        DC8 0B1H, 0C8H, 0C0H, 0FDH, 0CEH, 0A2H, 0B7H, 0D6H
        DC8 0BBH, 0FDH, 0B2H, 0EEH, 0C0H, 0B6H, 0D1H, 0C0H
        DC8 0CEH, 0DEH, 0CFH, 0DFH, 0CFH, 0D4H, 0CAH, 0BEH
        DC8 0CBH, 0ABH, 0
        DC8 0
//  130 {
//  131 	"北京龙丘邱科技开发板智能车首选液晶室温度按键次电压阈值上下左右速度方向控角大小高低读写退出限制状态：始结束正反占空比复位中关闭初化设置舵机死区前瞻距离预设检测灯比例微分积差蓝牙无线显示双"
//  132 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  133 const byte F14x16[] = {  
F14x16:
        DATA
        DC8 0, 0, 64, 64, 64, 254, 0, 0, 254, 128, 64, 32, 32, 0, 0, 48, 16, 16
        DC8 8, 127, 0, 0, 127, 64, 64, 64, 120, 0, 0, 8, 8, 232, 72, 72, 74, 76
        DC8 72, 72, 232, 8, 8, 0, 0, 64, 32, 19, 10, 66, 254, 2, 2, 10, 19, 96
        DC8 0, 0, 0, 0, 32, 32, 32, 254, 34, 32, 224, 36, 168, 160, 16, 0, 0
        DC8 64, 32, 16, 12, 35, 16, 8, 127, 66, 65, 64, 120, 0, 0, 0, 0, 248
        DC8 136, 136, 136, 136, 132, 132, 134, 192, 0, 0, 0, 0, 32, 63, 32, 32
        DC8 32, 32, 63, 32, 32, 32, 32, 0, 0, 0, 252, 68, 68, 196, 66, 64, 252
        DC8 4, 196, 52, 12, 0, 0, 48, 31, 16, 16, 15, 16, 16, 127, 0, 16, 17
        DC8 30, 0, 0, 0, 72, 252, 68, 66, 0, 136, 16, 0, 254, 2, 0, 0, 0, 12, 2
        DC8 127, 1, 3, 8, 8, 5, 4, 255, 4, 2, 0, 0, 16, 16, 254, 16, 144, 144
        DC8 144, 144, 254, 144, 144, 16, 0, 0, 2, 65, 127, 129, 128, 64, 39, 40
        DC8 24, 38, 65, 64, 0, 0, 132, 132, 132, 252, 132, 132, 132, 132, 252
        DC8 132, 134, 128, 0, 0, 64, 32, 16, 15, 0, 0, 0, 0, 127, 0, 0, 0, 0, 0
        DC8 0, 24, 36, 160, 124, 34, 32, 34, 36, 172, 32, 0, 0, 0, 64, 48, 140
        DC8 131, 65, 39, 25, 25, 39, 97, 64, 64, 0, 0, 0, 224, 254, 144, 32
        DC8 248, 200, 72, 68, 196, 98, 0, 0, 0, 6, 1, 127, 65, 184, 71, 33, 22
        DC8 28, 35, 96, 64, 0, 0, 48, 44, 170, 120, 168, 164, 32, 252, 136, 136
        DC8 120, 0, 0, 0, 2, 2, 1, 126, 82, 83, 83, 82, 82, 126, 0, 0, 0, 0
        DC8 112, 168, 164, 162, 232, 48, 0, 126, 144, 136, 184, 64, 0, 0, 0
        DC8 127, 10, 74, 127, 0, 0, 126, 72, 68, 66, 112, 0, 0, 0, 8, 200, 56
        DC8 12, 10, 232, 8, 8, 136, 8, 0, 0, 0, 8, 8, 9, 9, 9, 9, 127, 9, 9, 8
        DC8 8, 8, 0, 0, 16, 16, 208, 82, 76, 112, 80, 76, 82, 208, 16, 0, 0, 0
        DC8 0, 0, 127, 74, 74, 74, 74, 74, 74, 127, 0, 0, 0, 0, 0, 132, 72, 192
        DC8 160, 156, 144, 254, 144, 144, 144, 128, 0, 0, 32, 31, 16, 32, 80
        DC8 78, 65, 64, 95, 80, 88, 80, 0, 0, 64, 132, 224, 16, 200, 56, 152
        DC8 238, 88, 72, 200, 8, 0, 0, 8, 126, 1, 2, 255, 129, 65, 38, 27, 62
        DC8 97, 64, 0, 0, 0, 0, 128, 124, 84, 84, 84, 84, 84, 126, 0, 0, 0, 0
        DC8 0, 127, 73, 73, 127, 0, 0, 127, 73, 73, 63, 1, 0, 0, 32, 88, 72, 72
        DC8 200, 74, 76, 72, 200, 40, 24, 0, 0, 0, 64, 64, 75, 75, 74, 126, 74
        DC8 74, 74, 75, 64, 64, 0, 0, 32, 4, 248, 16, 252, 148, 148, 148, 148
        DC8 252, 0, 0, 0, 0, 0, 126, 65, 126, 66, 126, 66, 66, 126, 66, 126, 64
        DC8 0, 0, 0, 248, 72, 72, 232, 88, 70, 72, 248, 72, 40, 0, 0, 64, 56
        DC8 135, 128, 128, 68, 77, 53, 53, 77, 66, 64, 64, 0, 0, 0, 32, 254
        DC8 144, 32, 24, 144, 106, 20, 16, 48, 24, 0, 0, 2, 65, 127, 128, 129
        DC8 71, 73, 49, 25, 23, 33, 64, 0, 0, 112, 206, 80, 72, 232, 152, 168
        DC8 168, 254, 168, 248, 32, 0, 0, 2, 127, 178, 66, 36, 30, 41, 74, 127
        DC8 74, 73, 68, 0, 0, 0, 4, 248, 16, 192, 48, 46, 224, 32, 32, 32, 16
        DC8 0, 0, 0, 63, 128, 65, 32, 16, 14, 1, 14, 16, 96, 64, 0, 0, 0, 240
        DC8 144, 144, 144, 254, 144, 144, 144, 240, 16, 0, 0, 0, 0, 15, 4, 4, 4
        DC8 127, 68, 68, 68, 79, 80, 96, 0, 0, 0, 252, 4, 4, 4, 4, 252, 4, 4, 4
        DC8 134, 4, 0, 0, 32, 95, 64, 64, 65, 65, 63, 65, 67, 77, 64, 32, 0, 0
        DC8 0, 240, 68, 196, 192, 36, 220, 52, 180, 68, 252, 4, 0, 0, 0, 127
        DC8 19, 20, 47, 25, 11, 14, 17, 124, 127, 0, 0, 0, 128, 240, 12, 8, 200
        DC8 72, 40, 94, 72, 232, 8, 8, 0, 0, 0, 127, 0, 0, 111, 149, 149, 149
        DC8 149, 127, 128, 64, 0, 0, 0, 0, 0, 0, 0, 254, 64, 64, 64, 64, 64, 0
        DC8 0, 0, 64, 64, 64, 64, 64, 63, 64, 64, 64, 64, 64, 32, 0, 0, 0, 8, 8
        DC8 8, 8, 248, 72, 136, 136, 8, 4, 4, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0
        DC8 1, 0, 0, 0, 0, 0, 16, 16, 208, 62, 16, 16, 16, 16, 16, 8, 0, 0, 0
        DC8 16, 8, 70, 65, 65, 65, 127, 65, 65, 65, 96, 64, 0, 0, 16, 16, 16
        DC8 144, 112, 14, 16, 16, 16, 16, 16, 0, 0, 0, 8, 4, 2, 63, 65, 65, 65
        DC8 65, 65, 127, 1, 0, 0, 0, 132, 136, 128, 8, 232, 40, 40, 254, 40, 40
        DC8 232, 8, 0, 0, 32, 16, 31, 48, 73, 69, 67, 127, 69, 69, 73, 64, 0, 0
        DC8 0, 248, 72, 72, 232, 88, 70, 72, 248, 72, 40, 0, 0, 64, 56, 135
        DC8 128, 128, 68, 77, 53, 53, 77, 66, 64, 64, 0, 0, 16, 16, 16, 16, 16
        DC8 242, 156, 144, 144, 144, 16, 24, 0, 0, 0, 64, 48, 8, 7, 64, 64, 64
        DC8 120, 7, 0, 0, 0, 0, 0, 240, 16, 144, 140, 146, 144, 144, 16, 16
        DC8 248, 0, 0, 0, 0, 127, 0, 7, 8, 8, 8, 15, 0, 64, 127, 0, 0, 0, 16
        DC8 16, 254, 144, 48, 144, 80, 12, 20, 80, 176, 24, 0, 0, 66, 65, 127
        DC8 0, 1, 66, 66, 62, 66, 66, 67, 32, 0, 0, 0, 64, 240, 44, 42, 40, 248
        DC8 40, 32, 32, 224, 0, 0, 0, 64, 32, 31, 5, 5, 5, 127, 5, 69, 69, 127
        DC8 0, 0, 0, 32, 32, 32, 32, 32, 254, 162, 32, 32, 32, 32, 32, 0, 0
        DC8 128, 64, 32, 16, 12, 3, 3, 4, 8, 48, 96, 64, 0, 0, 0, 0, 128, 96, 0
        DC8 0, 254, 0, 64, 128, 0, 0, 0, 0, 4, 2, 1, 0, 64, 64, 63, 0, 0, 0, 3
        DC8 6, 0, 0, 8, 8, 8, 232, 168, 166, 168, 168, 248, 8, 8, 4, 0, 0, 0
        DC8 127, 2, 46, 18, 18, 18, 62, 66, 66, 127, 0, 0, 0, 192, 240, 12, 0
        DC8 248, 136, 136, 248, 132, 132, 132, 128, 0, 0, 0, 127, 0, 0, 63, 32
        DC8 48, 81, 14, 16, 32, 112, 0, 64, 64, 196, 0, 32, 104, 168, 168, 126
        DC8 168, 40, 96, 32, 0, 0, 0, 63, 32, 152, 137, 74, 41, 24, 39, 40, 72
        DC8 0, 0, 0, 0, 14, 140, 116, 68, 68, 68, 68, 68, 52, 12, 4, 0, 0, 8, 8
        DC8 9, 9, 9, 9, 9, 9, 73, 113, 15, 0, 0, 0, 0, 132, 200, 0, 0, 252, 164
        DC8 164, 164, 252, 4, 0, 0, 0, 32, 16, 31, 32, 32, 95, 74, 66, 66, 70
        DC8 73, 0, 0, 0, 0, 240, 128, 128, 128, 252, 128, 128, 128, 240, 8, 0
        DC8 0, 0, 0, 126, 64, 64, 64, 63, 64, 64, 64, 67, 124, 0, 0, 0, 0, 252
        DC8 244, 12, 0, 252, 36, 36, 36, 36, 252, 0, 0, 0, 0, 127, 8, 15, 0
        DC8 127, 33, 7, 9, 53, 99, 2, 0, 0, 96, 88, 80, 254, 80, 80, 80, 0, 248
        DC8 0, 252, 2, 0, 0, 30, 2, 2, 127, 18, 62, 1, 0, 15, 64, 127, 0, 0, 0
        DC8 16, 96, 0, 254, 64, 64, 64, 254, 192, 68, 56, 0, 0, 0, 12, 2, 2
        DC8 127, 64, 48, 14, 1, 7, 24, 32, 64, 0, 0, 16, 16, 16, 144, 240, 30
        DC8 48, 80, 144, 16, 8, 0, 0, 0, 34, 26, 1, 124, 64, 69, 74, 64, 112, 1
        DC8 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 50, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 46, 160, 112, 64, 112, 76, 66
        DC8 64, 80, 224, 0, 0, 67, 36, 24, 15, 48, 0, 126, 66, 66, 66, 127, 2
        DC8 0, 0, 224, 152, 134, 96, 32, 144, 144, 144, 254, 144, 144, 16, 0, 0
        DC8 100, 39, 36, 20, 20, 124, 68, 68, 68, 68, 126, 0, 0, 0, 8, 8, 232
        DC8 40, 40, 254, 42, 40, 40, 232, 40, 8, 0, 0, 64, 32, 19, 10, 6, 255
        DC8 2, 14, 18, 51, 32, 32, 0, 0, 0, 4, 196, 68, 4, 4, 252, 4, 4, 4, 132
        DC8 4, 0, 0, 64, 64, 63, 64, 64, 64, 63, 65, 65, 65, 32, 0, 0, 0, 0, 0
        DC8 248, 72, 200, 68, 68, 68, 68, 194, 64, 0, 0, 0, 96, 156, 131, 64
        DC8 33, 34, 20, 24, 54, 33, 64, 64, 0, 0, 0, 0, 0, 0, 0, 254, 32, 32
        DC8 32, 32, 16, 0, 0, 0, 0, 0, 127, 66, 66, 65, 66, 66, 66, 127, 0, 0
        DC8 0, 0, 32, 152, 144, 80, 48, 18, 20, 16, 48, 112, 208, 8, 0, 0, 65
        DC8 64, 64, 66, 66, 126, 66, 66, 66, 65, 64, 64, 0, 0, 0, 254, 128, 128
        DC8 64, 128, 254, 128, 64, 32, 16, 0, 0, 0, 0, 63, 32, 32, 16, 16, 63
        DC8 64, 64, 64, 88, 32, 0, 0, 32, 16, 8, 246, 88, 88, 88, 88, 88, 248
        DC8 4, 0, 0, 0, 128, 144, 136, 69, 79, 53, 21, 61, 79, 69, 64, 64, 0, 0
        DC8 128, 96, 252, 34, 160, 32, 34, 44, 32, 224, 80, 0, 0, 0, 1, 0, 127
        DC8 64, 64, 67, 76, 32, 94, 65, 64, 32, 0, 0, 0, 240, 32, 32, 32, 254
        DC8 34, 32, 32, 32, 240, 0, 0, 0, 0, 3, 2, 2, 2, 255, 2, 2, 2, 2, 3, 0
        DC8 0, 0, 0, 32, 32, 34, 44, 224, 16, 40, 38, 32, 16, 0, 0, 0, 128, 66
        DC8 34, 18, 10, 7, 2, 14, 18, 34, 65, 65, 0, 0, 0, 248, 66, 76, 64, 196
        DC8 252, 68, 68, 68, 252, 4, 0, 0, 0, 127, 8, 4, 2, 33, 63, 0, 0, 64
        DC8 127, 0, 0, 0, 16, 16, 210, 44, 144, 8, 8, 248, 8, 8, 8, 248, 0, 0
        DC8 2, 1, 127, 1, 66, 48, 14, 1, 0, 64, 126, 1, 0, 0, 128, 64, 248, 6
        DC8 0, 0, 254, 0, 128, 96, 16, 0, 0, 0, 1, 0, 127, 8, 4, 4, 62, 65, 64
        DC8 64, 64, 120, 0, 0, 64, 66, 204, 128, 64, 188, 132, 132, 132, 188
        DC8 192, 32, 0, 0, 0, 0, 191, 152, 72, 65, 38, 24, 60, 35, 64, 64, 0, 0
        DC8 0, 94, 212, 84, 92, 244, 84, 92, 84, 212, 62, 0, 0, 64, 64, 64, 127
        DC8 107, 107, 106, 107, 107, 107, 127, 64, 64, 0, 0, 0, 248, 44, 80
        DC8 248, 32, 24, 200, 14, 8, 152, 8, 0, 0, 121, 7, 3, 69, 127, 0, 0
        DC8 127, 66, 65, 64, 112, 0, 0, 0, 160, 254, 160, 0, 248, 8, 8, 8, 252
        DC8 0, 0, 0, 24, 6, 1, 127, 64, 33, 31, 0, 0, 0, 127, 64, 112, 0, 0, 4
        DC8 132, 116, 76, 68, 228, 4, 252, 4, 132, 68, 4, 0, 0, 66, 33, 17, 10
        DC8 7, 0, 0, 63, 65, 64, 64, 120, 0, 0, 0, 252, 4, 20, 36, 68, 132, 196
        DC8 52, 20, 6, 4, 0, 0, 0, 127, 64, 72, 68, 66, 65, 67, 70, 72, 64, 64
        DC8 0, 0, 16, 208, 80, 82, 204, 16, 16, 204, 18, 208, 48, 8, 0, 0, 0
        DC8 127, 9, 9, 127, 0, 0, 31, 64, 127, 0, 0, 0, 0, 252, 72, 248, 4, 240
        DC8 40, 102, 40, 216, 44, 96, 144, 0, 0, 63, 18, 63, 96, 31, 1, 115, 91
        DC8 90, 91, 119, 0, 0, 0, 56, 68, 196, 68, 124, 0, 252, 68, 68, 68, 228
        DC8 4, 0, 0, 63, 34, 31, 18, 1, 0, 127, 68, 68, 68, 71, 32, 0, 0, 0, 8
        DC8 248, 136, 88, 42, 44, 88, 8, 248, 8, 4, 0, 0, 0, 126, 3, 26, 23, 19
        DC8 19, 11, 51, 66, 126, 0, 0, 0, 64, 68, 244, 76, 196, 68, 228, 20
        DC8 236, 36, 228, 2, 0, 0, 0, 0, 127, 0, 128, 128, 79, 32, 31, 16, 31
        DC8 96, 0, 0, 64, 66, 204, 128, 64, 188, 132, 132, 132, 188, 192, 32, 0
        DC8 0, 0, 0, 191, 152, 72, 65, 38, 24, 60, 35, 64, 64, 0, 0, 0, 160
        DC8 254, 160, 96, 160, 152, 134, 136, 80, 32, 64, 0, 0, 6, 1, 127, 64
        DC8 64, 92, 64, 78, 96, 94, 65, 64, 0, 0, 32, 4, 192, 252, 4, 244, 4
        DC8 252, 0, 240, 252, 0, 0, 0, 0, 127, 64, 39, 24, 7, 16, 103, 0, 15
        DC8 127, 0, 0, 0, 192, 0, 254, 32, 24, 8, 8, 8, 248, 8, 8, 4, 0, 0, 96
        DC8 24, 7, 8, 16, 0, 0, 64, 127, 0, 0, 0, 0, 0, 0, 254, 128, 128, 64
        DC8 128, 254, 128, 64, 32, 16, 0, 0, 0, 0, 63, 32, 32, 16, 16, 63, 64
        DC8 64, 64, 88, 32, 0, 0, 128, 248, 6, 136, 120, 72, 200, 68, 224, 16
        DC8 252, 0, 0, 0, 0, 127, 64, 33, 17, 14, 3, 0, 7, 64, 127, 0, 0, 0, 8
        DC8 196, 36, 184, 168, 190, 184, 192, 248, 38, 224, 16, 0, 0, 1, 127, 0
        DC8 48, 14, 130, 94, 73, 35, 28, 39, 64, 0, 0, 0, 192, 160, 152, 132
        DC8 128, 128, 142, 176, 64, 128, 128, 0, 0, 129, 64, 32, 16, 15, 0, 64
        DC8 64, 63, 1, 0, 0, 0, 0, 0, 72, 252, 68, 32, 64, 248, 8, 8, 8, 248, 0
        DC8 0, 0, 4, 3, 127, 1, 67, 32, 17, 13, 1, 5, 25, 96, 0, 0, 0, 0, 82
        DC8 76, 208, 112, 80, 72, 86, 80, 8, 0, 0, 0, 33, 17, 73, 71, 73, 73
        DC8 121, 73, 73, 69, 65, 65, 0, 0, 8, 232, 8, 222, 42, 136, 104, 94
        DC8 200, 72, 40, 0, 0, 0, 64, 67, 124, 71, 124, 69, 124, 68, 68, 127
        DC8 64, 64, 0, 0, 0, 68, 124, 68, 68, 68, 196, 252, 68, 68, 70, 68, 0
        DC8 0, 32, 32, 16, 8, 4, 67, 64, 63, 0, 0, 0, 0, 0, 0, 0, 132, 132, 132
        DC8 132, 252, 132, 132, 132, 132, 68, 64, 0, 0, 128, 64, 32, 16, 14, 1
        DC8 63, 64, 64, 64, 64, 120, 0, 0, 96, 88, 198, 96, 48, 32, 44, 242, 36
        DC8 44, 144, 128, 0, 0, 36, 39, 36, 20, 67, 65, 33, 31, 25, 37, 66, 112
        DC8 0, 0, 0, 0, 252, 148, 148, 148, 148, 148, 148, 252, 0, 0, 0, 0, 0
        DC8 36, 56, 32, 63, 32, 32, 63, 48, 45, 34, 0, 0, 0, 64, 64, 68, 68, 68
        DC8 196, 68, 68, 68, 68, 68, 64, 0, 0, 16, 8, 6, 3, 64, 127, 0, 0, 2, 4
        DC8 24, 16, 0, 0, 8, 72, 136, 136, 120, 8, 56, 200, 8, 136, 120, 0, 0
        DC8 0, 16, 8, 4, 3, 6, 88, 32, 17, 14, 27, 32, 32, 0
//  134 0x00,0x00,0x40,0x40,0x40,0xFE,0x00,0x00,0xFE,0x80,0x40,0x20,0x20,0x00,
//  135 0x00,0x30,0x10,0x10,0x08,0x7F,0x00,0x00,0x7F,0x40,0x40,0x40,0x78,0x00,//北0
//  136 
//  137 0x00,0x08,0x08,0xE8,0x48,0x48,0x4A,0x4C,0x48,0x48,0xE8,0x08,0x08,0x00,
//  138 0x00,0x40,0x20,0x13,0x0A,0x42,0xFE,0x02,0x02,0x0A,0x13,0x60,0x00,0x00,//京1
//  139 
//  140 0x00,0x00,0x20,0x20,0x20,0xFE,0x22,0x20,0xE0,0x24,0xA8,0xA0,0x10,0x00,
//  141 0x00,0x40,0x20,0x10,0x0C,0x23,0x10,0x08,0x7F,0x42,0x41,0x40,0x78,0x00,//龙2
//  142 
//  143 0x00,0x00,0x00,0xF8,0x88,0x88,0x88,0x88,0x84,0x84,0x86,0xC0,0x00,0x00,
//  144 0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x3F,0x20,0x20,0x20,0x20,0x00,//丘3
//  145 
//  146 0x00,0x00,0xFC,0x44,0x44,0xC4,0x42,0x40,0xFC,0x04,0xC4,0x34,0x0C,0x00,
//  147 0x00,0x30,0x1F,0x10,0x10,0x0F,0x10,0x10,0x7F,0x00,0x10,0x11,0x1E,0x00,//邱4
//  148 
//  149 0x00,0x00,0x48,0xFC,0x44,0x42,0x00,0x88,0x10,0x00,0xFE,0x02,0x00,0x00,
//  150 0x00,0x0C,0x02,0x7F,0x01,0x03,0x08,0x08,0x05,0x04,0xFF,0x04,0x02,0x00,//科5
//  151 
//  152 0x00,0x10,0x10,0xFE,0x10,0x90,0x90,0x90,0x90,0xFE,0x90,0x90,0x10,0x00,
//  153 0x00,0x02,0x41,0x7F,0x81,0x80,0x40,0x27,0x28,0x18,0x26,0x41,0x40,0x00,//技6
//  154 
//  155 0x00,0x84,0x84,0x84,0xFC,0x84,0x84,0x84,0x84,0xFC,0x84,0x86,0x80,0x00,
//  156 0x00,0x40,0x20,0x10,0x0F,0x00,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x00,//开7
//  157 
//  158 0x00,0x00,0x18,0x24,0xA0,0x7C,0x22,0x20,0x22,0x24,0xAC,0x20,0x00,0x00,
//  159 0x00,0x40,0x30,0x8C,0x83,0x41,0x27,0x19,0x19,0x27,0x61,0x40,0x40,0x00,//发8
//  160 
//  161 0x00,0x00,0xE0,0xFE,0x90,0x20,0xF8,0xC8,0x48,0x44,0xC4,0x62,0x00,0x00,
//  162 0x00,0x06,0x01,0x7F,0x41,0xB8,0x47,0x21,0x16,0x1C,0x23,0x60,0x40,0x00,//板9
//  163 
//  164 0x00,0x30,0x2C,0xAA,0x78,0xA8,0xA4,0x20,0xFC,0x88,0x88,0x78,0x00,0x00,
//  165 0x00,0x02,0x02,0x01,0x7E,0x52,0x53,0x53,0x52,0x52,0x7E,0x00,0x00,0x00,//智10
//  166 
//  167 0x00,0x70,0xA8,0xA4,0xA2,0xE8,0x30,0x00,0x7E,0x90,0x88,0xB8,0x40,0x00,
//  168 0x00,0x00,0x7F,0x0A,0x4A,0x7F,0x00,0x00,0x7E,0x48,0x44,0x42,0x70,0x00,//能11
//  169 
//  170 0x00,0x00,0x08,0xC8,0x38,0x0C,0x0A,0xE8,0x08,0x08,0x88,0x08,0x00,0x00,
//  171 0x00,0x08,0x08,0x09,0x09,0x09,0x09,0x7F,0x09,0x09,0x08,0x08,0x08,0x00,//车12
//  172 
//  173 0x00,0x10,0x10,0xD0,0x52,0x4C,0x70,0x50,0x4C,0x52,0xD0,0x10,0x00,0x00,
//  174 0x00,0x00,0x00,0x7F,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x7F,0x00,0x00,0x00,//首13
//  175 
//  176 0x00,0x00,0x84,0x48,0xC0,0xA0,0x9C,0x90,0xFE,0x90,0x90,0x90,0x80,0x00,
//  177 0x00,0x20,0x1F,0x10,0x20,0x50,0x4E,0x41,0x40,0x5F,0x50,0x58,0x50,0x00,//选14
//  178 
//  179 0x00,0x40,0x84,0xE0,0x10,0xC8,0x38,0x98,0xEE,0x58,0x48,0xC8,0x08,0x00,
//  180 0x00,0x08,0x7E,0x01,0x02,0xFF,0x81,0x41,0x26,0x1B,0x3E,0x61,0x40,0x00,//液15
//  181 
//  182 0x00,0x00,0x00,0x80,0x7C,0x54,0x54,0x54,0x54,0x54,0x7E,0x00,0x00,0x00,
//  183 0x00,0x00,0x7F,0x49,0x49,0x7F,0x00,0x00,0x7F,0x49,0x49,0x3F,0x01,0x00,//晶16
//  184 
//  185 0x00,0x20,0x58,0x48,0x48,0xC8,0x4A,0x4C,0x48,0xC8,0x28,0x18,0x00,0x00,
//  186 0x00,0x40,0x40,0x4B,0x4B,0x4A,0x7E,0x4A,0x4A,0x4A,0x4B,0x40,0x40,0x00,//室17
//  187 
//  188 0x00,0x20,0x04,0xF8,0x10,0xFC,0x94,0x94,0x94,0x94,0xFC,0x00,0x00,0x00,
//  189 0x00,0x00,0x7E,0x41,0x7E,0x42,0x7E,0x42,0x42,0x7E,0x42,0x7E,0x40,0x00,//温18
//  190 
//  191 0x00,0x00,0xF8,0x48,0x48,0xE8,0x58,0x46,0x48,0xF8,0x48,0x28,0x00,0x00,
//  192 0x40,0x38,0x87,0x80,0x80,0x44,0x4D,0x35,0x35,0x4D,0x42,0x40,0x40,0x00,//度19
//  193 
//  194 0x00,0x00,0x20,0xFE,0x90,0x20,0x18,0x90,0x6A,0x14,0x10,0x30,0x18,0x00,
//  195 0x00,0x02,0x41,0x7F,0x80,0x81,0x47,0x49,0x31,0x19,0x17,0x21,0x40,0x00,//按20
//  196 
//  197 0x00,0x70,0xCE,0x50,0x48,0xE8,0x98,0xA8,0xA8,0xFE,0xA8,0xF8,0x20,0x00,
//  198 0x00,0x02,0x7F,0xB2,0x42,0x24,0x1E,0x29,0x4A,0x7F,0x4A,0x49,0x44,0x00,//键21
//  199 
//  200 0x00,0x00,0x04,0xF8,0x10,0xC0,0x30,0x2E,0xE0,0x20,0x20,0x20,0x10,0x00,
//  201 0x00,0x00,0x3F,0x80,0x41,0x20,0x10,0x0E,0x01,0x0E,0x10,0x60,0x40,0x00,//次22
//  202 
//  203 0x00,0x00,0xF0,0x90,0x90,0x90,0xFE,0x90,0x90,0x90,0xF0,0x10,0x00,0x00,
//  204 0x00,0x00,0x0F,0x04,0x04,0x04,0x7F,0x44,0x44,0x44,0x4F,0x50,0x60,0x00,//电23
//  205 
//  206 0x00,0x00,0xFC,0x04,0x04,0x04,0x04,0xFC,0x04,0x04,0x04,0x86,0x04,0x00,
//  207 0x00,0x20,0x5F,0x40,0x40,0x41,0x41,0x3F,0x41,0x43,0x4D,0x40,0x20,0x00,//压24
//  208 
//  209 0x00,0x00,0xF0,0x44,0xC4,0xC0,0x24,0xDC,0x34,0xB4,0x44,0xFC,0x04,0x00,
//  210 0x00,0x00,0x7F,0x13,0x14,0x2F,0x19,0x0B,0x0E,0x11,0x7C,0x7F,0x00,0x00,//阈25
//  211 
//  212 0x00,0x80,0xF0,0x0C,0x08,0xC8,0x48,0x28,0x5E,0x48,0xE8,0x08,0x08,0x00,
//  213 0x00,0x00,0x7F,0x00,0x00,0x6F,0x95,0x95,0x95,0x95,0x7F,0x80,0x40,0x00,//值26
//  214 
//  215 0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x40,0x40,0x40,0x40,0x40,0x00,0x00,
//  216 0x00,0x40,0x40,0x40,0x40,0x40,0x3F,0x40,0x40,0x40,0x40,0x40,0x20,0x00,//上27
//  217 
//  218 0x00,0x00,0x08,0x08,0x08,0x08,0xF8,0x48,0x88,0x88,0x08,0x04,0x04,0x00,
//  219 0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x01,0x00,0x00,0x00,//下28
//  220 
//  221 0x00,0x00,0x10,0x10,0xD0,0x3E,0x10,0x10,0x10,0x10,0x10,0x08,0x00,0x00,
//  222 0x00,0x10,0x08,0x46,0x41,0x41,0x41,0x7F,0x41,0x41,0x41,0x60,0x40,0x00,//左29
//  223 
//  224 0x00,0x10,0x10,0x10,0x90,0x70,0x0E,0x10,0x10,0x10,0x10,0x10,0x00,0x00,
//  225 0x00,0x08,0x04,0x02,0x3F,0x41,0x41,0x41,0x41,0x41,0x7F,0x01,0x00,0x00,//右30
//  226 
//  227 0x00,0x84,0x88,0x80,0x08,0xE8,0x28,0x28,0xFE,0x28,0x28,0xE8,0x08,0x00,
//  228 0x00,0x20,0x10,0x1F,0x30,0x49,0x45,0x43,0x7F,0x45,0x45,0x49,0x40,0x00,//速31
//  229 
//  230 0x00,0x00,0xF8,0x48,0x48,0xE8,0x58,0x46,0x48,0xF8,0x48,0x28,0x00,0x00,
//  231 0x40,0x38,0x87,0x80,0x80,0x44,0x4D,0x35,0x35,0x4D,0x42,0x40,0x40,0x00,//度32
//  232 
//  233 0x00,0x10,0x10,0x10,0x10,0x10,0xF2,0x9C,0x90,0x90,0x90,0x10,0x18,0x00,
//  234 0x00,0x00,0x40,0x30,0x08,0x07,0x40,0x40,0x40,0x78,0x07,0x00,0x00,0x00,//方33
//  235 
//  236 0x00,0x00,0xF0,0x10,0x90,0x8C,0x92,0x90,0x90,0x10,0x10,0xF8,0x00,0x00,
//  237 0x00,0x00,0x7F,0x00,0x07,0x08,0x08,0x08,0x0F,0x00,0x40,0x7F,0x00,0x00,//向34
//  238 
//  239 0x00,0x10,0x10,0xFE,0x90,0x30,0x90,0x50,0x0C,0x14,0x50,0xB0,0x18,0x00,
//  240 0x00,0x42,0x41,0x7F,0x00,0x01,0x42,0x42,0x3E,0x42,0x42,0x43,0x20,0x00,//控35
//  241 
//  242 0x00,0x00,0x40,0xF0,0x2C,0x2A,0x28,0xF8,0x28,0x20,0x20,0xE0,0x00,0x00,
//  243 0x00,0x40,0x20,0x1F,0x05,0x05,0x05,0x7F,0x05,0x45,0x45,0x7F,0x00,0x00,//角36
//  244 
//  245 0x00,0x20,0x20,0x20,0x20,0x20,0xFE,0xA2,0x20,0x20,0x20,0x20,0x20,0x00,
//  246 0x00,0x80,0x40,0x20,0x10,0x0C,0x03,0x03,0x04,0x08,0x30,0x60,0x40,0x00,//大37
//  247 
//  248 0x00,0x00,0x00,0x80,0x60,0x00,0x00,0xFE,0x00,0x40,0x80,0x00,0x00,0x00,
//  249 0x00,0x04,0x02,0x01,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x03,0x06,0x00,//小38
//  250 
//  251 0x00,0x08,0x08,0x08,0xE8,0xA8,0xA6,0xA8,0xA8,0xF8,0x08,0x08,0x04,0x00,
//  252 0x00,0x00,0x7F,0x02,0x2E,0x12,0x12,0x12,0x3E,0x42,0x42,0x7F,0x00,0x00,//高39
//  253 
//  254 0x00,0xC0,0xF0,0x0C,0x00,0xF8,0x88,0x88,0xF8,0x84,0x84,0x84,0x80,0x00,
//  255 0x00,0x00,0x7F,0x00,0x00,0x3F,0x20,0x30,0x51,0x0E,0x10,0x20,0x70,0x00,//低40
//  256 
//  257 0x40,0x40,0xC4,0x00,0x20,0x68,0xA8,0xA8,0x7E,0xA8,0x28,0x60,0x20,0x00,
//  258 0x00,0x00,0x3F,0x20,0x98,0x89,0x4A,0x29,0x18,0x27,0x28,0x48,0x00,0x00,//读41
//  259 
//  260 0x00,0x00,0x0E,0x8C,0x74,0x44,0x44,0x44,0x44,0x44,0x34,0x0C,0x04,0x00,
//  261 0x00,0x08,0x08,0x09,0x09,0x09,0x09,0x09,0x09,0x49,0x71,0x0F,0x00,0x00,//写42
//  262 
//  263 0x00,0x00,0x84,0xC8,0x00,0x00,0xFC,0xA4,0xA4,0xA4,0xFC,0x04,0x00,0x00,
//  264 0x00,0x20,0x10,0x1F,0x20,0x20,0x5F,0x4A,0x42,0x42,0x46,0x49,0x00,0x00,//退43
//  265 
//  266 0x00,0x00,0xF0,0x80,0x80,0x80,0xFC,0x80,0x80,0x80,0xF0,0x08,0x00,0x00,
//  267 0x00,0x00,0x7E,0x40,0x40,0x40,0x3F,0x40,0x40,0x40,0x43,0x7C,0x00,0x00,//出44
//  268 
//  269 0x00,0x00,0xFC,0xF4,0x0C,0x00,0xFC,0x24,0x24,0x24,0x24,0xFC,0x00,0x00,
//  270 0x00,0x00,0x7F,0x08,0x0F,0x00,0x7F,0x21,0x07,0x09,0x35,0x63,0x02,0x00,//限45
//  271 
//  272 0x00,0x60,0x58,0x50,0xFE,0x50,0x50,0x50,0x00,0xF8,0x00,0xFC,0x02,0x00,
//  273 0x00,0x1E,0x02,0x02,0x7F,0x12,0x3E,0x01,0x00,0x0F,0x40,0x7F,0x00,0x00,//制46
//  274 
//  275 0x00,0x10,0x60,0x00,0xFE,0x40,0x40,0x40,0xFE,0xC0,0x44,0x38,0x00,0x00,
//  276 0x00,0x0C,0x02,0x02,0x7F,0x40,0x30,0x0E,0x01,0x07,0x18,0x20,0x40,0x00,//状47
//  277 
//  278 0x00,0x10,0x10,0x10,0x90,0xF0,0x1E,0x30,0x50,0x90,0x10,0x08,0x00,0x00,
//  279 0x00,0x22,0x1A,0x01,0x7C,0x40,0x45,0x4A,0x40,0x70,0x01,0x1B,0x00,0x00,//态48
//  280 
//  281 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  282 0x00,0x00,0x33,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//：49
//  283 
//  284 0x00,0x00,0xF0,0x2E,0xA0,0x70,0x40,0x70,0x4C,0x42,0x40,0x50,0xE0,0x00,
//  285 0x00,0x43,0x24,0x18,0x0F,0x30,0x00,0x7E,0x42,0x42,0x42,0x7F,0x02,0x00,//始50
//  286 
//  287 0x00,0xE0,0x98,0x86,0x60,0x20,0x90,0x90,0x90,0xFE,0x90,0x90,0x10,0x00,
//  288 0x00,0x64,0x27,0x24,0x14,0x14,0x7C,0x44,0x44,0x44,0x44,0x7E,0x00,0x00,//结51
//  289 
//  290 0x00,0x08,0x08,0xE8,0x28,0x28,0xFE,0x2A,0x28,0x28,0xE8,0x28,0x08,0x00,
//  291 0x00,0x40,0x20,0x13,0x0A,0x06,0xFF,0x02,0x0E,0x12,0x33,0x20,0x20,0x00,//束52
//  292 
//  293 0x00,0x00,0x04,0xC4,0x44,0x04,0x04,0xFC,0x04,0x04,0x04,0x84,0x04,0x00,
//  294 0x00,0x40,0x40,0x3F,0x40,0x40,0x40,0x3F,0x41,0x41,0x41,0x20,0x00,0x00,//正53
//  295 
//  296 0x00,0x00,0x00,0xF8,0x48,0xC8,0x44,0x44,0x44,0x44,0xC2,0x40,0x00,0x00,
//  297 0x00,0x60,0x9C,0x83,0x40,0x21,0x22,0x14,0x18,0x36,0x21,0x40,0x40,0x00,//反54
//  298 
//  299 0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x20,0x20,0x20,0x20,0x10,0x00,0x00,
//  300 0x00,0x00,0x00,0x7F,0x42,0x42,0x41,0x42,0x42,0x42,0x7F,0x00,0x00,0x00,//占55
//  301 
//  302 0x00,0x20,0x98,0x90,0x50,0x30,0x12,0x14,0x10,0x30,0x70,0xD0,0x08,0x00,
//  303 0x00,0x41,0x40,0x40,0x42,0x42,0x7E,0x42,0x42,0x42,0x41,0x40,0x40,0x00,//空56
//  304 
//  305 0x00,0x00,0xFE,0x80,0x80,0x40,0x80,0xFE,0x80,0x40,0x20,0x10,0x00,0x00,
//  306 0x00,0x00,0x3F,0x20,0x20,0x10,0x10,0x3F,0x40,0x40,0x40,0x58,0x20,0x00,//比57
//  307 
//  308 0x00,0x20,0x10,0x08,0xF6,0x58,0x58,0x58,0x58,0x58,0xF8,0x04,0x00,0x00,
//  309 0x00,0x80,0x90,0x88,0x45,0x4F,0x35,0x15,0x3D,0x4F,0x45,0x40,0x40,0x00,//复58
//  310 
//  311 0x00,0x80,0x60,0xFC,0x22,0xA0,0x20,0x22,0x2C,0x20,0xE0,0x50,0x00,0x00,
//  312 0x00,0x01,0x00,0x7F,0x40,0x40,0x43,0x4C,0x20,0x5E,0x41,0x40,0x20,0x00,//位59
//  313 
//  314 0x00,0x00,0xF0,0x20,0x20,0x20,0xFE,0x22,0x20,0x20,0x20,0xF0,0x00,0x00,
//  315 0x00,0x00,0x03,0x02,0x02,0x02,0xFF,0x02,0x02,0x02,0x02,0x03,0x00,0x00,//中60
//  316 
//  317 0x00,0x00,0x20,0x20,0x22,0x2C,0xE0,0x10,0x28,0x26,0x20,0x10,0x00,0x00,
//  318 0x00,0x80,0x42,0x22,0x12,0x0A,0x07,0x02,0x0E,0x12,0x22,0x41,0x41,0x00,//关61
//  319 
//  320 0x00,0x00,0xF8,0x42,0x4C,0x40,0xC4,0xFC,0x44,0x44,0x44,0xFC,0x04,0x00,
//  321 0x00,0x00,0x7F,0x08,0x04,0x02,0x21,0x3F,0x00,0x00,0x40,0x7F,0x00,0x00,//闭62
//  322 
//  323 0x00,0x10,0x10,0xD2,0x2C,0x90,0x08,0x08,0xF8,0x08,0x08,0x08,0xF8,0x00,
//  324 0x00,0x02,0x01,0x7F,0x01,0x42,0x30,0x0E,0x01,0x00,0x40,0x7E,0x01,0x00,//初63
//  325 
//  326 0x00,0x80,0x40,0xF8,0x06,0x00,0x00,0xFE,0x00,0x80,0x60,0x10,0x00,0x00,
//  327 0x00,0x01,0x00,0x7F,0x08,0x04,0x04,0x3E,0x41,0x40,0x40,0x40,0x78,0x00,//化64
//  328 
//  329 0x00,0x40,0x42,0xCC,0x80,0x40,0xBC,0x84,0x84,0x84,0xBC,0xC0,0x20,0x00,
//  330 0x00,0x00,0x00,0xBF,0x98,0x48,0x41,0x26,0x18,0x3C,0x23,0x40,0x40,0x00,//设65
//  331 
//  332 0x00,0x00,0x5E,0xD4,0x54,0x5C,0xF4,0x54,0x5C,0x54,0xD4,0x3E,0x00,0x00,
//  333 0x40,0x40,0x40,0x7F,0x6B,0x6B,0x6A,0x6B,0x6B,0x6B,0x7F,0x40,0x40,0x00,//置66
//  334 
//  335 0x00,0x00,0xF8,0x2C,0x50,0xF8,0x20,0x18,0xC8,0x0E,0x08,0x98,0x08,0x00,
//  336 0x00,0x79,0x07,0x03,0x45,0x7F,0x00,0x00,0x7F,0x42,0x41,0x40,0x70,0x00,//舵67
//  337 
//  338 0x00,0x00,0xA0,0xFE,0xA0,0x00,0xF8,0x08,0x08,0x08,0xFC,0x00,0x00,0x00,
//  339 0x18,0x06,0x01,0x7F,0x40,0x21,0x1F,0x00,0x00,0x00,0x7F,0x40,0x70,0x00,//机68
//  340 
//  341 0x00,0x04,0x84,0x74,0x4C,0x44,0xE4,0x04,0xFC,0x04,0x84,0x44,0x04,0x00,
//  342 0x00,0x42,0x21,0x11,0x0A,0x07,0x00,0x00,0x3F,0x41,0x40,0x40,0x78,0x00,//死0
//  343 
//  344 0x00,0x00,0xFC,0x04,0x14,0x24,0x44,0x84,0xC4,0x34,0x14,0x06,0x04,0x00,
//  345 0x00,0x00,0x7F,0x40,0x48,0x44,0x42,0x41,0x43,0x46,0x48,0x40,0x40,0x00,//区1
//  346 
//  347 0x00,0x10,0xD0,0x50,0x52,0xCC,0x10,0x10,0xCC,0x12,0xD0,0x30,0x08,0x00,
//  348 0x00,0x00,0x7F,0x09,0x09,0x7F,0x00,0x00,0x1F,0x40,0x7F,0x00,0x00,0x00,//前0
//  349 
//  350 0x00,0xFC,0x48,0xF8,0x04,0xF0,0x28,0x66,0x28,0xD8,0x2C,0x60,0x90,0x00,
//  351 0x00,0x3F,0x12,0x3F,0x60,0x1F,0x01,0x73,0x5B,0x5A,0x5B,0x77,0x00,0x00,//瞻1
//  352 
//  353 0x00,0x38,0x44,0xC4,0x44,0x7C,0x00,0xFC,0x44,0x44,0x44,0xE4,0x04,0x00,
//  354 0x00,0x3F,0x22,0x1F,0x12,0x01,0x00,0x7F,0x44,0x44,0x44,0x47,0x20,0x00,//距0
//  355 
//  356 0x00,0x00,0x08,0xF8,0x88,0x58,0x2A,0x2C,0x58,0x08,0xF8,0x08,0x04,0x00,
//  357 0x00,0x00,0x7E,0x03,0x1A,0x17,0x13,0x13,0x0B,0x33,0x42,0x7E,0x00,0x00,//离1
//  358 
//  359 0x00,0x40,0x44,0xF4,0x4C,0xC4,0x44,0xE4,0x14,0xEC,0x24,0xE4,0x02,0x00,
//  360 0x00,0x00,0x00,0x7F,0x00,0x80,0x80,0x4F,0x20,0x1F,0x10,0x1F,0x60,0x00,//预0
//  361 
//  362 0x00,0x40,0x42,0xCC,0x80,0x40,0xBC,0x84,0x84,0x84,0xBC,0xC0,0x20,0x00,
//  363 0x00,0x00,0x00,0xBF,0x98,0x48,0x41,0x26,0x18,0x3C,0x23,0x40,0x40,0x00,//设1
//  364 
//  365 0x00,0x00,0xA0,0xFE,0xA0,0x60,0xA0,0x98,0x86,0x88,0x50,0x20,0x40,0x00,
//  366 0x00,0x06,0x01,0x7F,0x40,0x40,0x5C,0x40,0x4E,0x60,0x5E,0x41,0x40,0x00,//检0
//  367 
//  368 0x00,0x20,0x04,0xC0,0xFC,0x04,0xF4,0x04,0xFC,0x00,0xF0,0xFC,0x00,0x00,
//  369 0x00,0x00,0x7F,0x40,0x27,0x18,0x07,0x10,0x67,0x00,0x0F,0x7F,0x00,0x00,//测1
//  370 
//  371 0x00,0xC0,0x00,0xFE,0x20,0x18,0x08,0x08,0x08,0xF8,0x08,0x08,0x04,0x00,
//  372 0x00,0x60,0x18,0x07,0x08,0x10,0x00,0x00,0x40,0x7F,0x00,0x00,0x00,0x00,//灯0
//  373 
//  374 0x00,0x00,0xFE,0x80,0x80,0x40,0x80,0xFE,0x80,0x40,0x20,0x10,0x00,0x00,
//  375 0x00,0x00,0x3F,0x20,0x20,0x10,0x10,0x3F,0x40,0x40,0x40,0x58,0x20,0x00,//比0
//  376 
//  377 0x00,0x80,0xF8,0x06,0x88,0x78,0x48,0xC8,0x44,0xE0,0x10,0xFC,0x00,0x00,
//  378 0x00,0x00,0x7F,0x40,0x21,0x11,0x0E,0x03,0x00,0x07,0x40,0x7F,0x00,0x00,//例1
//  379 
//  380 0x00,0x08,0xC4,0x24,0xB8,0xA8,0xBE,0xB8,0xC0,0xF8,0x26,0xE0,0x10,0x00,
//  381 0x00,0x01,0x7F,0x00,0x30,0x0E,0x82,0x5E,0x49,0x23,0x1C,0x27,0x40,0x00,//微2
//  382 
//  383 0x00,0x00,0xC0,0xA0,0x98,0x84,0x80,0x80,0x8E,0xB0,0x40,0x80,0x80,0x00,
//  384 0x00,0x81,0x40,0x20,0x10,0x0F,0x00,0x40,0x40,0x3F,0x01,0x00,0x00,0x00,//分3
//  385 
//  386 0x00,0x00,0x48,0xFC,0x44,0x20,0x40,0xF8,0x08,0x08,0x08,0xF8,0x00,0x00,
//  387 0x00,0x04,0x03,0x7F,0x01,0x43,0x20,0x11,0x0D,0x01,0x05,0x19,0x60,0x00,//积0
//  388 
//  389 0x00,0x00,0x00,0x52,0x4C,0xD0,0x70,0x50,0x48,0x56,0x50,0x08,0x00,0x00,
//  390 0x00,0x21,0x11,0x49,0x47,0x49,0x49,0x79,0x49,0x49,0x45,0x41,0x41,0x00,//差 0
//  391 
//  392 0x00,0x08,0xE8,0x08,0xDE,0x2A,0x88,0x68,0x5E,0xC8,0x48,0x28,0x00,0x00,
//  393 0x00,0x40,0x43,0x7C,0x47,0x7C,0x45,0x7C,0x44,0x44,0x7F,0x40,0x40,0x00,//蓝0
//  394 
//  395 0x00,0x00,0x44,0x7C,0x44,0x44,0x44,0xC4,0xFC,0x44,0x44,0x46,0x44,0x00,
//  396 0x00,0x20,0x20,0x10,0x08,0x04,0x43,0x40,0x3F,0x00,0x00,0x00,0x00,0x00,//牙1
//  397 
//  398 0x00,0x00,0x84,0x84,0x84,0x84,0xFC,0x84,0x84,0x84,0x84,0x44,0x40,0x00,
//  399 0x00,0x80,0x40,0x20,0x10,0x0E,0x01,0x3F,0x40,0x40,0x40,0x40,0x78,0x00,//无2
//  400 
//  401 0x00,0x60,0x58,0xC6,0x60,0x30,0x20,0x2C,0xF2,0x24,0x2C,0x90,0x80,0x00,
//  402 0x00,0x24,0x27,0x24,0x14,0x43,0x41,0x21,0x1F,0x19,0x25,0x42,0x70,0x00,//线3
//  403 
//  404 0x00,0x00,0x00,0xFC,0x94,0x94,0x94,0x94,0x94,0x94,0xFC,0x00,0x00,0x00,
//  405 0x00,0x00,0x24,0x38,0x20,0x3F,0x20,0x20,0x3F,0x30,0x2D,0x22,0x00,0x00,//显0
//  406 
//  407 0x00,0x40,0x40,0x44,0x44,0x44,0xC4,0x44,0x44,0x44,0x44,0x44,0x40,0x00,
//  408 0x00,0x10,0x08,0x06,0x03,0x40,0x7F,0x00,0x00,0x02,0x04,0x18,0x10,0x00,//示1
//  409 
//  410 0x00,0x08,0x48,0x88,0x88,0x78,0x08,0x38,0xC8,0x08,0x88,0x78,0x00,0x00,
//  411 0x00,0x10,0x08,0x04,0x03,0x06,0x58,0x20,0x11,0x0E,0x1B,0x20,0x20,0x00,//双0
//  412 };
//  413 
//  414 //======================================================
//  415 // 128X64I液晶底层驱动[8X16]字体库
//  416 // 设计者: powerint
//  417 // 描  述: [8X16]西文字符的字模数据 (纵向取模,字节倒序)
//  418 // !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
//  419 //======================================================

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  420 const byte F8X16[]=
F8X16:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0
        DC8 0, 0, 0, 0, 0, 51, 48, 0, 0, 0, 0, 16, 12, 6, 16, 12, 6, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 64, 192, 120, 64, 192, 120, 64, 0, 4, 63, 4, 4, 63
        DC8 4, 4, 0, 0, 112, 136, 252, 8, 48, 0, 0, 0, 24, 32, 255, 33, 30, 0
        DC8 0, 240, 8, 240, 0, 224, 24, 0, 0, 0, 33, 28, 3, 30, 33, 30, 0, 0
        DC8 240, 8, 136, 112, 0, 0, 0, 30, 33, 35, 36, 25, 39, 33, 16, 16, 22
        DC8 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 24, 4, 2
        DC8 0, 0, 0, 0, 7, 24, 32, 64, 0, 0, 2, 4, 24, 224, 0, 0, 0, 0, 64, 32
        DC8 24, 7, 0, 0, 0, 64, 64, 128, 240, 128, 64, 64, 0, 2, 2, 1, 15, 1, 2
        DC8 2, 0, 0, 0, 0, 240, 0, 0, 0, 0, 1, 1, 1, 31, 1, 1, 1, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 128, 176, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 48, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 128, 96, 24, 4, 0, 96, 24, 6, 1, 0, 0, 0, 0, 224, 16
        DC8 8, 8, 16, 224, 0, 0, 15, 16, 32, 32, 16, 15, 0, 0, 16, 16, 248, 0
        DC8 0, 0, 0, 0, 32, 32, 63, 32, 32, 0, 0, 0, 112, 8, 8, 8, 136, 112, 0
        DC8 0, 48, 40, 36, 34, 33, 48, 0, 0, 48, 8, 136, 136, 72, 48, 0, 0, 24
        DC8 32, 32, 32, 17, 14, 0, 0, 0, 192, 32, 16, 248, 0, 0, 0, 7, 4, 36
        DC8 36, 63, 36, 0, 0, 248, 8, 136, 136, 8, 8, 0, 0, 25, 33, 32, 32, 17
        DC8 14, 0, 0, 224, 16, 136, 136, 24, 0, 0, 0, 15, 17, 32, 32, 17, 14, 0
        DC8 0, 56, 8, 8, 200, 56, 8, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 112, 136, 8
        DC8 8, 136, 112, 0, 0, 28, 34, 33, 33, 34, 28, 0, 0, 224, 16, 8, 8, 16
        DC8 224, 0, 0, 0, 49, 34, 34, 17, 15, 0, 0, 0, 0, 192, 192, 0, 0, 0, 0
        DC8 0, 0, 48, 48, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 128, 96, 0
        DC8 0, 0, 0, 0, 0, 128, 64, 32, 16, 8, 0, 0, 1, 2, 4, 8, 16, 32, 0, 64
        DC8 64, 64, 64, 64, 64, 64, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 8, 16, 32, 64
        DC8 128, 0, 0, 0, 32, 16, 8, 4, 2, 1, 0, 0, 112, 72, 8, 8, 8, 240, 0, 0
        DC8 0, 0, 48, 54, 1, 0, 0, 192, 48, 200, 40, 232, 16, 224, 0, 7, 24, 39
        DC8 36, 35, 20, 11, 0, 0, 0, 192, 56, 224, 0, 0, 0, 32, 60, 35, 2, 2
        DC8 39, 56, 32, 8, 248, 136, 136, 136, 112, 0, 0, 32, 63, 32, 32, 32
        DC8 17, 14, 0, 192, 48, 8, 8, 8, 8, 56, 0, 7, 24, 32, 32, 32, 16, 8, 0
        DC8 8, 248, 8, 8, 8, 16, 224, 0, 32, 63, 32, 32, 32, 16, 15, 0, 8, 248
        DC8 136, 136, 232, 8, 16, 0, 32, 63, 32, 32, 35, 32, 24, 0, 8, 248, 136
        DC8 136, 232, 8, 16, 0, 32, 63, 32, 0, 3, 0, 0, 0, 192, 48, 8, 8, 8, 56
        DC8 0, 0, 7, 24, 32, 32, 34, 30, 2, 0, 8, 248, 8, 0, 0, 8, 248, 8, 32
        DC8 63, 33, 1, 1, 33, 63, 32, 0, 8, 8, 248, 8, 8, 0, 0, 0, 32, 32, 63
        DC8 32, 32, 0, 0, 0, 0, 8, 8, 248, 8, 8, 0, 192, 128, 128, 128, 127, 0
        DC8 0, 0, 8, 248, 136, 192, 40, 24, 8, 0, 32, 63, 32, 1, 38, 56, 32, 0
        DC8 8, 248, 8, 0, 0, 0, 0, 0, 32, 63, 32, 32, 32, 32, 48, 0, 8, 248
        DC8 248, 0, 248, 248, 8, 0, 32, 63, 0, 63, 0, 63, 32, 0, 8, 248, 48
        DC8 192, 0, 8, 248, 8, 32, 63, 32, 0, 7, 24, 63, 0, 224, 16, 8, 8, 8
        DC8 16, 224, 0, 15, 16, 32, 32, 32, 16, 15, 0, 8, 248, 8, 8, 8, 8, 240
        DC8 0, 32, 63, 33, 1, 1, 1, 0, 0, 224, 16, 8, 8, 8, 16, 224, 0, 15, 24
        DC8 36, 36, 56, 80, 79, 0, 8, 248, 136, 136, 136, 136, 112, 0, 32, 63
        DC8 32, 0, 3, 12, 48, 32, 0, 112, 136, 8, 8, 8, 56, 0, 0, 56, 32, 33
        DC8 33, 34, 28, 0, 24, 8, 8, 248, 8, 8, 24, 0, 0, 0, 32, 63, 32, 0, 0
        DC8 0, 8, 248, 8, 0, 0, 8, 248, 8, 0, 31, 32, 32, 32, 32, 31, 0, 8, 120
        DC8 136, 0, 0, 200, 56, 8, 0, 0, 7, 56, 14, 1, 0, 0, 248, 8, 0, 248, 0
        DC8 8, 248, 0, 3, 60, 7, 0, 7, 60, 3, 0, 8, 24, 104, 128, 128, 104, 24
        DC8 8, 32, 48, 44, 3, 3, 44, 48, 32, 8, 56, 200, 0, 200, 56, 8, 0, 0, 0
        DC8 32, 63, 32, 0, 0, 0, 16, 8, 8, 8, 200, 56, 8, 0, 32, 56, 38, 33, 32
        DC8 32, 24, 0, 0, 0, 0, 254, 2, 2, 2, 0, 0, 0, 0, 127, 64, 64, 64, 0, 0
        DC8 12, 48, 192, 0, 0, 0, 0, 0, 0, 0, 1, 6, 56, 192, 0, 0, 2, 2, 2, 254
        DC8 0, 0, 0, 0, 64, 64, 64, 127, 0, 0, 0, 0, 0, 4, 2, 2, 2, 4, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 128, 128, 0, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 128, 128, 128, 0, 0, 0, 25, 36, 34, 34, 34, 63, 32, 8, 248, 0
        DC8 128, 128, 0, 0, 0, 0, 63, 17, 32, 32, 17, 14, 0, 0, 0, 0, 128, 128
        DC8 128, 0, 0, 0, 14, 17, 32, 32, 32, 17, 0, 0, 0, 0, 128, 128, 136
        DC8 248, 0, 0, 14, 17, 32, 32, 16, 63, 32, 0, 0, 128, 128, 128, 128, 0
        DC8 0, 0, 31, 34, 34, 34, 34, 19, 0, 0, 128, 128, 240, 136, 136, 136
        DC8 24, 0, 32, 32, 63, 32, 32, 0, 0, 0, 0, 128, 128, 128, 128, 128, 0
        DC8 0, 107, 148, 148, 148, 147, 96, 0, 8, 248, 0, 128, 128, 128, 0, 0
        DC8 32, 63, 33, 0, 0, 32, 63, 32, 0, 128, 152, 152, 0, 0, 0, 0, 0, 32
        DC8 32, 63, 32, 32, 0, 0, 0, 0, 0, 128, 152, 152, 0, 0, 0, 192, 128
        DC8 128, 128, 127, 0, 0, 8, 248, 0, 0, 128, 128, 128, 0, 32, 63, 36, 2
        DC8 45, 48, 32, 0, 0, 8, 8, 248, 0, 0, 0, 0, 0, 32, 32, 63, 32, 32, 0
        DC8 0, 128, 128, 128, 128, 128, 128, 128, 0, 32, 63, 32, 0, 63, 32, 0
        DC8 63, 128, 128, 0, 128, 128, 128, 0, 0, 32, 63, 33, 0, 0, 32, 63, 32
        DC8 0, 0, 128, 128, 128, 128, 0, 0, 0, 31, 32, 32, 32, 32, 31, 0, 128
        DC8 128, 0, 128, 128, 0, 0, 0, 128, 255, 161, 32, 32, 17, 14, 0, 0, 0
        DC8 0, 128, 128, 128, 128, 0, 0, 14, 17, 32, 32, 160, 255, 128, 128
        DC8 128, 128, 0, 128, 128, 128, 0, 32, 32, 63, 33, 32, 0, 1, 0, 0, 0
        DC8 128, 128, 128, 128, 128, 0, 0, 51, 36, 36, 36, 36, 25, 0, 0, 128
        DC8 128, 224, 128, 128, 0, 0, 0, 0, 0, 31, 32, 32, 0, 0, 128, 128, 0, 0
        DC8 0, 128, 128, 0, 0, 31, 32, 32, 32, 16, 63, 32, 128, 128, 128, 0, 0
        DC8 128, 128, 128, 0, 1, 14, 48, 8, 6, 1, 0, 128, 128, 0, 128, 0, 128
        DC8 128, 128, 15, 48, 12, 3, 12, 48, 15, 0, 0, 128, 128, 0, 128, 128
        DC8 128, 0, 0, 32, 49, 46, 14, 49, 32, 0, 128, 128, 128, 0, 0, 128, 128
        DC8 128, 128, 129, 142, 112, 24, 6, 1, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 0, 0, 33, 48, 44, 34, 33, 48, 0, 0, 0, 0, 0, 128, 124, 2, 2, 0
        DC8 0, 0, 0, 0, 63, 64, 64, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255
        DC8 0, 0, 0, 0, 2, 2, 124, 128, 0, 0, 0, 0, 64, 64, 63, 0, 0, 0, 0, 0
        DC8 6, 1, 1, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0
//  421 {
//  422 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0
//  423   0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//!1
//  424   0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//"2
//  425   0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//#3
//  426   0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$4
//  427   0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//%5
//  428   0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//&6
//  429   0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//'7
//  430   0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//(8
//  431   0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//)9
//  432   0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//*10
//  433   0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+11
//  434   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//,12
//  435   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//-13
//  436   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//.14
//  437   0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,///15
//  438   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//016
//  439   0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//117
//  440   0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//218
//  441   0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//319
//  442   0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//420
//  443   0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//521
//  444   0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//622
//  445   0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//723
//  446   0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//824
//  447   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//925
//  448   0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//:26
//  449   0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//;27
//  450   0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//<28
//  451   0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//=29
//  452   0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//>30
//  453   0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//?31
//  454   0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@32
//  455   0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A33
//  456   0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B34
//  457   0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C35
//  458   0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D36
//  459   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E37
//  460   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F38
//  461   0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G39
//  462   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H40
//  463   0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I41
//  464   0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J42
//  465   0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K43
//  466   0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L44
//  467   0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M45
//  468   0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N46
//  469   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O47
//  470   0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P48
//  471   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q49
//  472   0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R50
//  473   0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S51
//  474   0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T52
//  475   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U53
//  476   0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V54
//  477   0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W55
//  478   0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X56
//  479   0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y57
//  480   0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z58
//  481   0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[59
//  482   0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\60
//  483   0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//]61
//  484   0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^62
//  485   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_63
//  486   0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//`64
//  487   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a65
//  488   0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b66
//  489   0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c67
//  490   0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d68
//  491   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e69
//  492   0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f70
//  493   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g71
//  494   0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h72
//  495   0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i73
//  496   0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j74
//  497   0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k75
//  498   0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l76
//  499   0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m77
//  500   0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n78
//  501   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o79
//  502   0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p80
//  503   0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q81
//  504   0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r82
//  505   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s83
//  506   0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t84
//  507   0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//u85
//  508   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v86
//  509   0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w87
//  510   0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x88
//  511   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y89
//  512   0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z90
//  513   0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{91
//  514   0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//|92
//  515   0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//}93
//  516   0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~94
//  517 
//  518 };
//  519 //数据水平，字节垂直

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//  520 byte longqiu96x64[768] = {
longqiu96x64:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 192
        DC8 192, 192, 96, 96, 96, 48, 48, 48, 56, 24, 24, 24, 24, 12, 12, 12
        DC8 12, 12, 14, 14, 14, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 14, 14
        DC8 12, 12, 12, 12, 12, 28, 24, 24, 24, 24, 48, 48, 48, 112, 96, 96
        DC8 224, 192, 192, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 192, 224, 112, 48, 56, 28, 12
        DC8 6, 7, 3, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 128, 128, 0, 0, 0, 0, 0, 128, 128, 240, 248, 248, 240, 128, 0
        DC8 0, 128, 224, 240, 248, 252, 60, 28, 12, 12, 28, 252, 248, 240, 224
        DC8 128, 0, 0, 0, 192, 192, 193, 1, 3, 3, 7, 6, 14, 12, 24, 56, 112, 96
        DC8 192, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 192, 240, 120, 30, 7, 51, 49
        DC8 56, 120, 252, 254, 246, 192, 128, 0, 0, 0, 0, 192, 192, 128, 0, 248
        DC8 252, 222, 14, 15, 30, 190, 252, 240, 6, 255, 255, 255, 255, 3, 7
        DC8 255, 255, 254, 128, 30, 63, 255, 255, 249, 249, 255, 255, 127, 31
        DC8 14, 127, 255, 255, 255, 193, 128, 206, 206, 198, 192, 255, 255, 255
        DC8 255, 63, 128, 252, 252, 253, 125, 1, 192, 248, 248, 240, 112, 0
        DC8 192, 128, 128, 128, 0, 0, 1, 7, 14, 60, 248, 224, 128, 0, 0, 254
        DC8 255, 3, 0, 0, 0, 0, 0, 0, 0, 1, 3, 15, 31, 127, 254, 252, 240, 240
        DC8 240, 127, 127, 62, 16, 3, 3, 15, 31, 31, 15, 15, 3, 4, 7, 7, 7, 7
        DC8 6, 0, 7, 7, 7, 15, 30, 63, 127, 127, 127, 121, 115, 63, 63, 31, 14
        DC8 0, 1, 3, 3, 7, 7, 6, 14, 15, 15, 31, 63, 61, 8, 12, 31, 31, 31, 25
        DC8 60, 127, 127, 127, 243, 240, 252, 254, 63, 31, 7, 1, 0, 0, 0, 0, 0
        DC8 0, 0, 207, 255, 112, 0, 3, 31, 126, 240, 192, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 3, 3, 1, 1, 0, 0, 0, 0, 192, 192, 64, 64, 64, 64, 248, 120
        DC8 64, 192, 64, 88, 88, 64, 64, 64, 0, 0, 0, 0, 0, 128, 128, 128, 0, 0
        DC8 0, 0, 0, 0, 96, 240, 224, 32, 32, 32, 32, 48, 48, 56, 24, 16, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 224, 248, 63, 15, 0, 0, 0, 0, 0, 0, 3, 7, 14, 28, 56, 48, 96
        DC8 224, 192, 128, 0, 0, 0, 0, 0, 0, 0, 64, 96, 96, 112, 48, 24, 12, 7
        DC8 17, 8, 63, 125, 102, 231, 227, 192, 192, 192, 224, 96, 0, 0, 0, 3
        DC8 3, 3, 0, 0, 96, 96, 96, 96, 96, 127, 127, 97, 97, 97, 97, 127, 127
        DC8 97, 97, 225, 224, 224, 192, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 192, 192, 224, 112, 56, 24, 12, 7, 3, 1, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 3, 6, 6, 12, 12, 24, 24, 56
        DC8 48, 48, 112, 96, 96, 224, 192, 192, 192, 192, 192, 128, 128, 128
        DC8 129, 128, 128, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128
        DC8 128, 128, 128, 128, 128, 128, 128, 192, 192, 192, 192, 192, 96, 96
        DC8 96, 48, 48, 48, 24, 24, 28, 12, 14, 6, 7, 3, 3, 1, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1
        DC8 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
//  521 /* 
//  522   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  523   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0X80,0XC0,0XC0,0XC0,
//  524   0XC0,0XC0,0X60,0X60,0X60,0X60,0X60,0X70,0X70,0X70,0X30,0X30,0X30,0X30,0X30,0X30,
//  525   0X30,0X30,0X30,0X30,0X30,0X30,0X30,0X70,0X70,0X60,0X60,0X60,0X60,0X60,0XE0,0XC0,
//  526   0XC0,0XC0,0XC0,0X80,0X80,0X80,0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  527   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  528   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0XC0,0XE0,0X60,0X30,
//  529   0X38,0X18,0X1C,0X0C,0X0E,0X06,0X06,0X03,0X03,0X03,0X01,0X01,0X01,0X01,0X00,0X00,
//  530   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  531   0X80,0XC0,0XC0,0X80,0X00,0X00,0X00,0X00,0X00,0X80,0XC0,0XE0,0XE0,0XE0,0X60,0X60,
//  532   0XE0,0XE0,0XC0,0X81,0X01,0X01,0X03,0X03,0X03,0X07,0X06,0X0E,0X0C,0X1C,0X18,0X38,
//  533   0X30,0X70,0X60,0XC0,0XC0,0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  534   0X00,0X00,0X00,0X80,0XC0,0XF0,0X38,0X9C,0X8E,0XC7,0XC3,0XE1,0XF1,0XB0,0X00,0X00,
//  535   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XC0,0XE0,0XF0,0X70,0X78,0XF0,0XF0,0XE0,
//  536   0X80,0X30,0XF8,0XF8,0XF8,0XF8,0X1C,0X3C,0XFC,0XF8,0XF0,0X00,0XF0,0XF8,0XFC,0XFC,
//  537   0XCF,0XCF,0XFF,0XFF,0XFC,0XF8,0X70,0XFC,0XFF,0XFF,0XFF,0X0F,0X01,0X70,0X70,0X30,
//  538   0X00,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0XE0,0XE0,0XEE,0XEE,0X0E,0X00,0XC0,0XC0,0X80,
//  539   0X80,0X00,0X00,0X00,0X01,0X03,0X03,0X06,0X0C,0X3C,0X70,0XE0,0XC0,0X00,0X00,0X00,
//  540   0X00,0XF0,0XFE,0X1F,0X03,0X00,0X00,0X01,0X01,0X01,0X03,0X0F,0X1F,0X7F,0XFE,0XFC,
//  541   0XF0,0XE0,0X80,0X80,0X86,0XFE,0XFC,0XF0,0X87,0X1F,0X1E,0X78,0XF8,0XF8,0X7D,0X7F,
//  542   0X1F,0X20,0X3F,0X3F,0X3F,0X3F,0X30,0X00,0X3F,0X3F,0X3F,0X7C,0XF0,0XF9,0XFF,0XFF,
//  543   0XFF,0XCF,0X9F,0XFF,0XFB,0XF8,0X70,0X03,0X0F,0X1F,0X1F,0X3E,0X3C,0X36,0X76,0X7E,
//  544   0X7E,0XFF,0XFF,0XEF,0X47,0X61,0XFC,0XFF,0XFF,0XCF,0XE3,0XF8,0XFE,0XFF,0X9F,0X87,
//  545   0XE3,0XF0,0XFE,0XFC,0X3C,0X0C,0X00,0X00,0X00,0X00,0X00,0X01,0X07,0X7F,0XFC,0X80,
//  546   0X00,0X1F,0XFF,0XF0,0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X03,
//  547   0X1F,0X1F,0X0F,0X0F,0X07,0X03,0X03,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0XC0,0XC0,
//  548   0X00,0X00,0X00,0XC0,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X03,0X03,
//  549   0X03,0X03,0X03,0X01,0X01,0X00,0X00,0X80,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0XC0,
//  550   0XC0,0X80,0X01,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X03,0X03,0X03,0X07,0X0F,
//  551   0X0F,0X0F,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XC0,0XFE,0X7F,0X03,
//  552   0X00,0X00,0X00,0X03,0X07,0X1E,0X38,0X70,0XE0,0XC0,0X80,0X00,0X00,0X00,0X00,0X00,
//  553   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X06,0X86,0X82,0XC2,0X62,0X3A,0X8F,0X43,
//  554   0XFA,0XEE,0X32,0X3A,0X1A,0X02,0X02,0X02,0X00,0X00,0X00,0X00,0X00,0X1C,0X1C,0X1C,
//  555   0X00,0X00,0X00,0X00,0X00,0X00,0X03,0XFF,0XFF,0X09,0X09,0X09,0X09,0XF9,0XF9,0X09,
//  556   0X08,0X08,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  557   0X00,0X00,0X00,0X00,0X00,0X80,0XC0,0XC0,0X60,0X38,0X1C,0X0F,0X07,0X01,0X00,0X00,
//  558   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X01,0X03,0X07,0X0E,0X0C,0X18,
//  559   0X18,0X30,0X30,0X60,0X60,0XC0,0XC2,0XC3,0X83,0X83,0X81,0X00,0X00,0X00,0X00,0X00,
//  560   0X01,0X03,0X03,0X07,0X07,0X06,0X0E,0X06,0X07,0X03,0X00,0X00,0X00,0X00,0X00,0X00,
//  561   0X00,0X00,0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X03,
//  562   0X03,0X07,0X07,0X07,0X06,0X06,0X80,0X80,0X80,0XC0,0XC0,0XE0,0X60,0X70,0X30,0X38,
//  563   0X18,0X1C,0X0E,0X06,0X07,0X03,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  564   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  565   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X01,0X01,0X03,0X03,0X03,0X07,0X06,0X06,
//  566   0X06,0X06,0X0E,0X0C,0X0C,0X0C,0X0C,0X0C,0X0C,0X1C,0X1C,0X1C,0X18,0X18,0X18,0X18,
//  567   0X18,0X18,0X18,0X18,0X1C,0X1C,0X1C,0X0C,0X0C,0X0C,0X0C,0X0C,0X0C,0X0C,0X06,0X06,
//  568   0X06,0X06,0X06,0X03,0X03,0X03,0X01,0X01,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  569   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  570 */
//  571 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  572 0X00,0X00,0X80,0X80,0XC0,0XC0,0XC0,0X60,0X60,0X60,0X30,0X30,0X30,0X38,0X18,0X18,
//  573 0X18,0X18,0X0C,0X0C,0X0C,0X0C,0X0C,0X0E,0X0E,0X0E,0X06,0X06,0X06,0X06,0X06,0X06,
//  574 0X06,0X06,0X06,0X06,0X06,0X06,0X06,0X0E,0X0E,0X0C,0X0C,0X0C,0X0C,0X0C,0X1C,0X18,
//  575 0X18,0X18,0X18,0X30,0X30,0X30,0X70,0X60,0X60,0XE0,0XC0,0XC0,0X80,0X80,0X00,0X00,
//  576 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  577 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X80,0XC0,0XE0,0X70,0X30,0X38,0X1C,0X0C,0X06,
//  578 0X07,0X03,0X03,0X01,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  579 0X00,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0X80,0X00,0X00,0X00,0X00,0X00,0X80,0X80,
//  580 0XF0,0XF8,0XF8,0XF0,0X80,0X00,0X00,0X80,0XE0,0XF0,0XF8,0XFC,0X3C,0X1C,0X0C,0X0C,
//  581 0X1C,0XFC,0XF8,0XF0,0XE0,0X80,0X00,0X00,0X00,0XC0,0XC0,0XC1,0X01,0X03,0X03,0X07,
//  582 0X06,0X0E,0X0C,0X18,0X38,0X70,0X60,0XC0,0X80,0X80,0X00,0X00,0X00,0X00,0X00,0X00,
//  583 0X00,0X00,0XC0,0XF0,0X78,0X1E,0X07,0X33,0X31,0X38,0X78,0XFC,0XFE,0XF6,0XC0,0X80,
//  584 0X00,0X00,0X00,0X00,0XC0,0XC0,0X80,0X00,0XF8,0XFC,0XDE,0X0E,0X0F,0X1E,0XBE,0XFC,
//  585 0XF0,0X06,0XFF,0XFF,0XFF,0XFF,0X03,0X07,0XFF,0XFF,0XFE,0X80,0X1E,0X3F,0XFF,0XFF,
//  586 0XF9,0XF9,0XFF,0XFF,0X7F,0X1F,0X0E,0X7F,0XFF,0XFF,0XFF,0XC1,0X80,0XCE,0XCE,0XC6,
//  587 0XC0,0XFF,0XFF,0XFF,0XFF,0X3F,0X80,0XFC,0XFC,0XFD,0X7D,0X01,0XC0,0XF8,0XF8,0XF0,
//  588 0X70,0X00,0XC0,0X80,0X80,0X80,0X00,0X00,0X01,0X07,0X0E,0X3C,0XF8,0XE0,0X80,0X00,
//  589 0X00,0XFE,0XFF,0X03,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X03,0X0F,0X1F,0X7F,
//  590 0XFE,0XFC,0XF0,0XF0,0XF0,0X7F,0X7F,0X3E,0X10,0X03,0X03,0X0F,0X1F,0X1F,0X0F,0X0F,
//  591 0X03,0X04,0X07,0X07,0X07,0X07,0X06,0X00,0X07,0X07,0X07,0X0F,0X1E,0X3F,0X7F,0X7F,
//  592 0X7F,0X79,0X73,0X3F,0X3F,0X1F,0X0E,0X00,0X01,0X03,0X03,0X07,0X07,0X06,0X0E,0X0F,
//  593 0X0F,0X1F,0X3F,0X3D,0X08,0X0C,0X1F,0X1F,0X1F,0X19,0X3C,0X7F,0X7F,0X7F,0XF3,0XF0,
//  594 0XFC,0XFE,0X3F,0X1F,0X07,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XCF,0XFF,0X70,
//  595 0X00,0X03,0X1F,0X7E,0XF0,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  596 0X03,0X03,0X01,0X01,0X00,0X00,0X00,0X00,0XC0,0XC0,0X40,0X40,0X40,0X40,0XF8,0X78,
//  597 0X40,0XC0,0X40,0X58,0X58,0X40,0X40,0X40,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0X80,
//  598 0X00,0X00,0X00,0X00,0X00,0X00,0X60,0XF0,0XE0,0X20,0X20,0X20,0X20,0X30,0X30,0X38,
//  599 0X18,0X10,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
//  600 0X01,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X80,0XE0,0XF8,0X3F,0X0F,0X00,
//  601 0X00,0X00,0X00,0X00,0X00,0X03,0X07,0X0E,0X1C,0X38,0X30,0X60,0XE0,0XC0,0X80,0X00,
//  602 0X00,0X00,0X00,0X00,0X00,0X00,0X40,0X60,0X60,0X70,0X30,0X18,0X0C,0X07,0X11,0X08,
//  603 0X3F,0X7D,0X66,0XE7,0XE3,0XC0,0XC0,0XC0,0XE0,0X60,0X00,0X00,0X00,0X03,0X03,0X03,
//  604 0X00,0X00,0X60,0X60,0X60,0X60,0X60,0X7F,0X7F,0X61,0X61,0X61,0X61,0X7F,0X7F,0X61,
//  605 0X61,0XE1,0XE0,0XE0,0XC0,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  606 0X00,0X80,0XC0,0XC0,0XE0,0X70,0X38,0X18,0X0C,0X07,0X03,0X01,0X00,0X00,0X00,0X00,
//  607 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X01,0X03,
//  608 0X03,0X06,0X06,0X0C,0X0C,0X18,0X18,0X38,0X30,0X30,0X70,0X60,0X60,0XE0,0XC0,0XC0,
//  609 0XC0,0XC0,0XC0,0X80,0X80,0X80,0X81,0X80,0X80,0X80,0X80,0X80,0X00,0X00,0X00,0X00,
//  610 0X00,0X00,0X00,0X00,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0XC0,0XC0,
//  611 0XC0,0XC0,0XC0,0X60,0X60,0X60,0X30,0X30,0X30,0X18,0X18,0X1C,0X0C,0X0E,0X06,0X07,
//  612 0X03,0X03,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  613 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  614 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  615 0X00,0X00,0X01,0X01,0X01,0X01,0X01,0X01,0X01,0X03,0X03,0X03,0X03,0X03,0X03,0X03,
//  616 0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X01,0X01,0X01,0X01,0X01,0X01,0X01,0X00,0X00,
//  617 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  618 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  619 
//  620 };

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//  621 byte LIBLOGO60x58[480] = { 
LIBLOGO60x58:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192
        DC8 224, 248, 252, 254, 127, 63, 15, 15, 7, 7, 7, 135, 199, 199, 199
        DC8 231, 239, 255, 255, 255, 239, 231, 231, 231, 231, 231, 239, 255
        DC8 255, 255, 239, 231, 231, 231, 231, 231, 247, 7, 15, 63, 127, 255
        DC8 254, 252, 240, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 220, 223
        DC8 223, 223, 223, 215, 1, 0, 0, 0, 0, 0, 0, 62, 127, 255, 255, 227
        DC8 225, 225, 255, 255, 255, 224, 224, 224, 224, 224, 224, 224, 255
        DC8 255, 255, 224, 224, 224, 224, 193, 131, 7, 0, 0, 0, 0, 1, 215, 223
        DC8 223, 223, 223, 220, 216, 0, 0, 0, 0, 0, 0, 0, 1, 3, 15, 31, 63, 255
        DC8 255, 254, 248, 240, 224, 192, 128, 0, 0, 248, 240, 224, 192, 192
        DC8 192, 255, 255, 255, 192, 192, 192, 192, 192, 192, 192, 255, 255
        DC8 255, 192, 224, 225, 243, 255, 127, 63, 0, 192, 224, 248, 254, 255
        DC8 255, 255, 63, 31, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
        DC8 7, 15, 63, 127, 255, 254, 252, 249, 243, 193, 129, 1, 1, 255, 255
        DC8 255, 1, 1, 1, 1, 1, 1, 1, 255, 255, 255, 3, 1, 129, 192, 240, 252
        DC8 254, 255, 255, 127, 63, 15, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 15, 63, 127, 255
        DC8 255, 255, 251, 243, 227, 195, 3, 3, 3, 3, 3, 131, 195, 243, 243
        DC8 251, 255, 255, 255, 127, 63, 15, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 3, 7, 7, 31, 63, 127, 255, 254, 252, 252, 254, 255, 255
        DC8 127, 63, 15, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 15, 15, 7, 1, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
//  622   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  623   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  624   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  625   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  626   0X00,0X00,0XC0,0XE0,0XF8,0XFC,0XFE,0X7F,0X3F,0X0F,0X0F,0X07,0X07,0X07,0X87,0XC7,
//  627   0XC7,0XC7,0XE7,0XEF,0XFF,0XFF,0XFF,0XEF,0XE7,0XE7,0XE7,0XE7,0XE7,0XEF,0XFF,0XFF,
//  628   0XFF,0XEF,0XE7,0XE7,0XE7,0XE7,0XE7,0XF7,0X07,0X0F,0X3F,0X7F,0XFF,0XFE,0XFC,0XF0,
//  629   0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XD8,0XDC,0XDF,0XDF,0XDF,
//  630   0XDF,0XD7,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X3E,0X7F,0XFF,0XFF,0XE3,0XE1,0XE1,
//  631   0XFF,0XFF,0XFF,0XE0,0XE0,0XE0,0XE0,0XE0,0XE0,0XE0,0XFF,0XFF,0XFF,0XE0,0XE0,0XE0,
//  632   0XE0,0XC1,0X83,0X07,0X00,0X00,0X00,0X00,0X01,0XD7,0XDF,0XDF,0XDF,0XDF,0XDC,0XD8,
//  633   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X03,0X0F,0X1F,0X3F,0XFF,0XFF,0XFE,0XF8,
//  634   0XF0,0XE0,0XC0,0X80,0X00,0X00,0XF8,0XF0,0XE0,0XC0,0XC0,0XC0,0XFF,0XFF,0XFF,0XC0,
//  635   0XC0,0XC0,0XC0,0XC0,0XC0,0XC0,0XFF,0XFF,0XFF,0XC0,0XE0,0XE1,0XF3,0XFF,0X7F,0X3F,
//  636   0X00,0XC0,0XE0,0XF8,0XFE,0XFF,0XFF,0XFF,0X3F,0X1F,0X07,0X01,0X00,0X00,0X00,0X00,
//  637   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X07,0X0F,0X3F,0X7F,0XFF,
//  638   0XFE,0XFC,0XF9,0XF3,0XC1,0X81,0X01,0X01,0XFF,0XFF,0XFF,0X01,0X01,0X01,0X01,0X01,
//  639   0X01,0X01,0XFF,0XFF,0XFF,0X03,0X01,0X81,0XC0,0XF0,0XFC,0XFE,0XFF,0XFF,0X7F,0X3F,
//  640   0X0F,0X07,0X03,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  641   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X03,0X07,0X0F,0X3F,
//  642   0X7F,0XFF,0XFF,0XFF,0XFB,0XF3,0XE3,0XC3,0X03,0X03,0X03,0X03,0X03,0X83,0XC3,0XF3,
//  643   0XF3,0XFB,0XFF,0XFF,0XFF,0X7F,0X3F,0X0F,0X03,0X01,0X00,0X00,0X00,0X00,0X00,0X00,
//  644   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  645   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X03,0X07,
//  646   0X07,0X1F,0X3F,0X7F,0XFF,0XFE,0XFC,0XFC,0XFE,0XFF,0XFF,0X7F,0X3F,0X0F,0X07,0X03,
//  647   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  648   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  649   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  650   0X00,0X03,0X07,0X0F,0X0F,0X07,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  651   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  652 }; 
//  653 
//  654 
//  655 

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//  656  unsigned char str1[6];
str1:
        DS8 8

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//  657  unsigned char str2[6];
str2:
        DS8 8

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//  658  unsigned char str3[8];
str3:
        DS8 8
//  659 

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//  660  unsigned char str4[6];
str4:
        DS8 8

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//  661  unsigned char str5[6];
str5:
        DS8 8

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//  662  unsigned char str6[8];
str6:
        DS8 8
//  663 
//  664 
//  665 

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  666 void LCD_WrDat(byte data)    //数据逐位发送
//  667 {
//  668 	byte i=8;
LCD_WrDat:
        MOVS     R1,#+8
//  669 	//LCD_CS=0;;
//  670 	LCD_DC=1;    //DC为1，表示数据发送
        MOVS     R2,#+1
        LDR.W    R3,??DataTable13_2  ;; 0x43fe1024
        STR      R2,[R3, #+0]
//  671   LCD_SCL=0;
        MOVS     R2,#+0
        LDR.W    R3,??DataTable13_3  ;; 0x43fe1020
        STR      R2,[R3, #+0]
        B.N      ??LCD_WrDat_0
//  672   //asm("nop");    
//  673   while(i--)
//  674   {
//  675     if(data&0x80){LCD_SDA=1;}
//  676     else{LCD_SDA=0;}
??LCD_WrDat_1:
        MOVS     R2,#+0
        LDR.W    R3,??DataTable13_4  ;; 0x43fe101c
        STR      R2,[R3, #+0]
//  677     LCD_SCL=1; 
??LCD_WrDat_2:
        MOVS     R2,#+1
        LDR.W    R3,??DataTable13_3  ;; 0x43fe1020
        STR      R2,[R3, #+0]
//  678     asm("nop");
        nop
//  679 		//asm("nop");            
//  680     LCD_SCL=0;;    
        MOVS     R2,#+0
        LDR.W    R3,??DataTable13_3  ;; 0x43fe1020
        STR      R2,[R3, #+0]
//  681     data<<=1;    
        LSLS     R0,R0,#+1
??LCD_WrDat_0:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        CMP      R2,#+0
        BEQ.N    ??LCD_WrDat_3
        LSLS     R2,R0,#+24
        BPL.N    ??LCD_WrDat_1
        MOVS     R2,#+1
        LDR.W    R3,??DataTable13_4  ;; 0x43fe101c
        STR      R2,[R3, #+0]
        B.N      ??LCD_WrDat_2
//  682   }
//  683 	//LCD_CS=1;
//  684 }
??LCD_WrDat_3:
        BX       LR               ;; return

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  685 void LCD_WrCmd(unsigned char cmd)
//  686 {
//  687 	unsigned char i=8;
LCD_WrCmd:
        MOVS     R1,#+8
//  688 	
//  689 	//LCD_CS=0;;
//  690 	LCD_DC=0;;
        MOVS     R2,#+0
        LDR.W    R3,??DataTable13_2  ;; 0x43fe1024
        STR      R2,[R3, #+0]
//  691   LCD_SCL=0;;
        MOVS     R2,#+0
        LDR.W    R3,??DataTable13_3  ;; 0x43fe1020
        STR      R2,[R3, #+0]
        B.N      ??LCD_WrCmd_0
//  692   //asm("nop");   
//  693   while(i--)
//  694   {
//  695     if(cmd&0x80){LCD_SDA=1;}
//  696     else{LCD_SDA=0;;}
??LCD_WrCmd_1:
        MOVS     R2,#+0
        LDR.W    R3,??DataTable13_4  ;; 0x43fe101c
        STR      R2,[R3, #+0]
//  697     LCD_SCL=1;;
??LCD_WrCmd_2:
        MOVS     R2,#+1
        LDR.W    R3,??DataTable13_3  ;; 0x43fe1020
        STR      R2,[R3, #+0]
//  698     asm("nop");;
        nop
//  699 		//asm("nop");             
//  700     LCD_SCL=0;;    
        MOVS     R2,#+0
        LDR.W    R3,??DataTable13_3  ;; 0x43fe1020
        STR      R2,[R3, #+0]
//  701     cmd<<=1;;   
        LSLS     R0,R0,#+1
??LCD_WrCmd_0:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        CMP      R2,#+0
        BEQ.N    ??LCD_WrCmd_3
        LSLS     R2,R0,#+24
        BPL.N    ??LCD_WrCmd_1
        MOVS     R2,#+1
        LDR.W    R3,??DataTable13_4  ;; 0x43fe101c
        STR      R2,[R3, #+0]
        B.N      ??LCD_WrCmd_2
//  702   } 	
//  703 	//LCD_CS=1;
//  704 }
??LCD_WrCmd_3:
        BX       LR               ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  705 void LCD_Set_Pos(byte x, byte y)    //设置位置
//  706 { 
LCD_Set_Pos:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  707   LCD_WrCmd(0xb0+y);       //表示从第y页开始
        SUBS     R0,R1,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  708   LCD_WrCmd(((x&0xf0)>>4)|0x10);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LSRS     R0,R4,#+4
        ORRS     R0,R0,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  709   LCD_WrCmd((x&0x0f)|0x01); 
        ANDS     R0,R4,#0xF
        ORRS     R0,R0,#0x1
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  710 }
        POP      {R4,PC}          ;; return
//  711 //************************************************

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  712 void LCD_Fill_Line(byte line,byte bmp_data)   //自加填充整行亮或暗
//  713 {
LCD_Fill_Line:
        PUSH     {R3-R5,LR}
        MOVS     R4,R1
//  714   LCD_WrCmd(0xb0+line);
        SUBS     R0,R0,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  715   LCD_WrCmd(0x01);
        MOVS     R0,#+1
        BL       LCD_WrCmd
//  716   LCD_WrCmd(0x10);
        MOVS     R0,#+16
        BL       LCD_WrCmd
//  717   for(byte x=0;x<X_WIDTH;x++)
        MOVS     R5,#+0
        B.N      ??LCD_Fill_Line_0
//  718     LCD_WrDat(bmp_data);
??LCD_Fill_Line_1:
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R5,R5,#+1
??LCD_Fill_Line_0:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+128
        BLT.N    ??LCD_Fill_Line_1
//  719 }
        POP      {R0,R4,R5,PC}    ;; return
//  720 //************************************************

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  721 void LCD_Fill(byte bmp_data)     //填充整个屏幕白或黑
//  722 {
LCD_Fill:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
//  723 	byte y,x;
//  724 	
//  725 	for(y=0;y<8;y++)
        MOVS     R5,#+0
        B.N      ??LCD_Fill_0
//  726 	{
//  727 		LCD_WrCmd(0xb0+y);
//  728 		LCD_WrCmd(0x01);
//  729 		LCD_WrCmd(0x10);
//  730 		for(x=0;x<X_WIDTH;x++)
//  731 			LCD_WrDat(bmp_data);
??LCD_Fill_1:
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R6,R6,#+1
??LCD_Fill_2:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+128
        BLT.N    ??LCD_Fill_1
        ADDS     R5,R5,#+1
??LCD_Fill_0:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+8
        BGE.N    ??LCD_Fill_3
        SUBS     R0,R5,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
        MOVS     R0,#+1
        BL       LCD_WrCmd
        MOVS     R0,#+16
        BL       LCD_WrCmd
        MOVS     R6,#+0
        B.N      ??LCD_Fill_2
//  732 	}
//  733 }
??LCD_Fill_3:
        POP      {R4-R6,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  734 void LCD_CLS(void)     //清屏
//  735 {
LCD_CLS:
        PUSH     {R3-R5,LR}
//  736 	byte y,x;	
//  737 	for(y=0;y<8;y++)
        MOVS     R4,#+0
        B.N      ??LCD_CLS_0
//  738 	{
//  739 		LCD_WrCmd(0xb0+y);
//  740 		LCD_WrCmd(0x01);
//  741 		LCD_WrCmd(0x10); 
//  742 		for(x=0;x<X_WIDTH;x++)
//  743 			LCD_WrDat(0);
??LCD_CLS_1:
        MOVS     R0,#+0
        BL       LCD_WrDat
        ADDS     R5,R5,#+1
??LCD_CLS_2:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+128
        BLT.N    ??LCD_CLS_1
        ADDS     R4,R4,#+1
??LCD_CLS_0:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+8
        BGE.N    ??LCD_CLS_3
        SUBS     R0,R4,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
        MOVS     R0,#+1
        BL       LCD_WrCmd
        MOVS     R0,#+16
        BL       LCD_WrCmd
        MOVS     R5,#+0
        B.N      ??LCD_CLS_2
//  744 	}
//  745 }
??LCD_CLS_3:
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  746 void LCD_DLY_ms(word ms)
//  747 {                         
LCD_DLY_ms:
        B.N      ??LCD_DLY_ms_0
//  748   word a;
//  749   while(ms)
//  750   {
//  751     a=1335;
??LCD_DLY_ms_1:
        MOVW     R1,#+1335
//  752     while(a--);
??LCD_DLY_ms_2:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        CMP      R2,#+0
        BNE.N    ??LCD_DLY_ms_2
//  753     ms--;
        SUBS     R0,R0,#+1
//  754   }
??LCD_DLY_ms_0:
        CMP      R0,#+0
        BNE.N    ??LCD_DLY_ms_1
//  755   return;
        BX       LR               ;; return
//  756 }

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  757 void adjust(byte a)
//  758 {
adjust:
        PUSH     {R7,LR}
//  759   LCD_WrCmd(a);	//指令数据0x0000~0x003f  
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  760 }
        POP      {R0,PC}          ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  761 void SetStartColumn(unsigned char d)
//  762 {
SetStartColumn:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  763 	LCD_WrCmd(0x00+d%16);		// Set Lower Column Start Address for Page Addressing Mode
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        MOVS     R1,#+16
        SDIV     R0,R4,R1
        MLS      R0,R0,R1,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  764 						//   Default => 0x00
//  765 	LCD_WrCmd(0x10+d/16);		// Set Higher Column Start Address for Page Addressing Mode
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        MOVS     R0,#+16
        SDIV     R0,R4,R0
        ADDS     R0,R0,#+16
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  766 						//   Default => 0x10
//  767 }
        POP      {R4,PC}          ;; return
//  768 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  769 void SetAddressingMode(unsigned char d)
//  770 {
SetAddressingMode:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  771 	LCD_WrCmd(0x20);			// Set Memory Addressing Mode
        MOVS     R0,#+32
        BL       LCD_WrCmd
//  772 	LCD_WrCmd(d);			//   Default => 0x02
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  773 						//     0x00 => Horizontal Addressing Mode
//  774 						//     0x01 => Vertical Addressing Mode
//  775 						//     0x02 => Page Addressing Mode
//  776 }
        POP      {R4,PC}          ;; return
//  777 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  778 void SetColumnAddress(unsigned char a, unsigned char b)
//  779 {
SetColumnAddress:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  780 	LCD_WrCmd(0x21);			// Set Column Address
        MOVS     R0,#+33
        BL       LCD_WrCmd
//  781 	LCD_WrCmd(a);			//   Default => 0x00 (Column Start Address)
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  782 	LCD_WrCmd(b);			//   Default => 0x7F (Column End Address)
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  783 }
        POP      {R0,R4,R5,PC}    ;; return
//  784 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  785 void SetPageAddress(unsigned char a, unsigned char b)
//  786 {
SetPageAddress:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  787 	LCD_WrCmd(0x22);			// Set Page Address
        MOVS     R0,#+34
        BL       LCD_WrCmd
//  788 	LCD_WrCmd(a);			//   Default => 0x00 (Page Start Address)
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  789 	LCD_WrCmd(b);			//   Default => 0x07 (Page End Address)
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  790 }
        POP      {R0,R4,R5,PC}    ;; return
//  791 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  792 void SetStartLine(unsigned char d)
//  793 {
SetStartLine:
        PUSH     {R7,LR}
//  794 	LCD_WrCmd(0x40|d);			// Set Display Start Line
        ORRS     R0,R0,#0x40
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  795 						//   Default => 0x40 (0x00)
//  796 }
        POP      {R0,PC}          ;; return
//  797 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  798 void SetContrastControl(unsigned char d)
//  799 {
SetContrastControl:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  800 	LCD_WrCmd(0x81);			// Set Contrast Control
        MOVS     R0,#+129
        BL       LCD_WrCmd
//  801 	LCD_WrCmd(d);			//   Default => 0x7F
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  802 }
        POP      {R4,PC}          ;; return
//  803 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  804 void Set_Charge_Pump(unsigned char d)
//  805 {
Set_Charge_Pump:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  806 	LCD_WrCmd(0x8D);			// Set Charge Pump
        MOVS     R0,#+141
        BL       LCD_WrCmd
//  807 	LCD_WrCmd(0x10|d);			//   Default => 0x10
        ORRS     R0,R4,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  808 						//     0x10 (0x00) => Disable Charge Pump
//  809 						//     0x14 (0x04) => Enable Charge Pump
//  810 }
        POP      {R4,PC}          ;; return
//  811 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  812 void Set_Segment_Remap(unsigned char d)
//  813 {
Set_Segment_Remap:
        PUSH     {R7,LR}
//  814 	LCD_WrCmd(0xA0|d);			// Set Segment Re-Map
        ORRS     R0,R0,#0xA0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  815 						//   Default => 0xA0
//  816 						//     0xA0 (0x00) => Column Address 0 Mapped to SEG0
//  817 						//     0xA1 (0x01) => Column Address 0 Mapped to SEG127
//  818 }
        POP      {R0,PC}          ;; return
//  819 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  820 void Set_Entire_Display(unsigned char d)
//  821 {
Set_Entire_Display:
        PUSH     {R7,LR}
//  822 	LCD_WrCmd(0xA4|d);			// Set Entire Display On / Off
        ORRS     R0,R0,#0xA4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  823 						//   Default => 0xA4
//  824 						//     0xA4 (0x00) => Normal Display
//  825 						//     0xA5 (0x01) => Entire Display On
//  826 }
        POP      {R0,PC}          ;; return
//  827 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  828 void Set_Inverse_Display(unsigned char d)
//  829 {
Set_Inverse_Display:
        PUSH     {R7,LR}
//  830 	LCD_WrCmd(0xA6|d);			// Set Inverse Display On/Off
        ORRS     R0,R0,#0xA6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  831 						//   Default => 0xA6
//  832 						//     0xA6 (0x00) => Normal Display
//  833 						//     0xA7 (0x01) => Inverse Display On
//  834 }
        POP      {R0,PC}          ;; return
//  835 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  836 void Set_Multiplex_Ratio(unsigned char d)
//  837 {
Set_Multiplex_Ratio:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  838 	LCD_WrCmd(0xA8);			// Set Multiplex Ratio
        MOVS     R0,#+168
        BL       LCD_WrCmd
//  839 	LCD_WrCmd(d);			//   Default => 0x3F (1/64 Duty)
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  840 }
        POP      {R4,PC}          ;; return
//  841 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  842 void Set_Display_On_Off(unsigned char d)
//  843 {
Set_Display_On_Off:
        PUSH     {R7,LR}
//  844 	LCD_WrCmd(0xAE|d);			// Set Display On/Off
        ORRS     R0,R0,#0xAE
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  845 						//   Default => 0xAE
//  846 						//     0xAE (0x00) => Display Off
//  847 						//     0xAF (0x01) => Display On
//  848 }
        POP      {R0,PC}          ;; return
//  849 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  850 void SetStartPage(unsigned char d)
//  851 {
SetStartPage:
        PUSH     {R7,LR}
//  852 	LCD_WrCmd(0xB0|d);			// Set Page Start Address for Page Addressing Mode
        ORRS     R0,R0,#0xB0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  853 						//   Default => 0xB0 (0x00)
//  854 }
        POP      {R0,PC}          ;; return
//  855 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  856 void Set_Common_Remap(unsigned char d)
//  857 {
Set_Common_Remap:
        PUSH     {R7,LR}
//  858 	LCD_WrCmd(0xC0|d);			// Set COM Output Scan Direction
        ORRS     R0,R0,#0xC0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  859 						//   Default => 0xC0
//  860 						//     0xC0 (0x00) => Scan from COM0 to 63
//  861 						//     0xC8 (0x08) => Scan from COM63 to 0
//  862 }
        POP      {R0,PC}          ;; return
//  863 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  864 void Set_Display_Offset(unsigned char d)
//  865 {
Set_Display_Offset:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  866 	LCD_WrCmd(0xD3);			// Set Display Offset
        MOVS     R0,#+211
        BL       LCD_WrCmd
//  867 	LCD_WrCmd(d);			//   Default => 0x00
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  868 }
        POP      {R4,PC}          ;; return
//  869 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  870 void Set_Display_Clock(unsigned char d)
//  871 {
Set_Display_Clock:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  872 	LCD_WrCmd(0xD5);			// Set Display Clock Divide Ratio / Oscillator Frequency
        MOVS     R0,#+213
        BL       LCD_WrCmd
//  873 	LCD_WrCmd(d);			//   Default => 0x80
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  874 						//     D[3:0] => Display Clock Divider
//  875 						//     D[7:4] => Oscillator Frequency
//  876 }
        POP      {R4,PC}          ;; return
//  877 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  878 void Set_Precharge_Period(unsigned char d)
//  879 {
Set_Precharge_Period:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  880 	LCD_WrCmd(0xD9);			// Set Pre-Charge Period
        MOVS     R0,#+217
        BL       LCD_WrCmd
//  881 	LCD_WrCmd(d);			//   Default => 0x22 (2 Display Clocks [Phase 2] / 2 Display Clocks [Phase 1])
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  882 						//     D[3:0] => Phase 1 Period in 1~15 Display Clocks
//  883 						//     D[7:4] => Phase 2 Period in 1~15 Display Clocks
//  884 }
        POP      {R4,PC}          ;; return
//  885 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  886 void Set_Common_Config(unsigned char d)
//  887 {
Set_Common_Config:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  888 	LCD_WrCmd(0xDA);			// Set COM Pins Hardware Configuration
        MOVS     R0,#+218
        BL       LCD_WrCmd
//  889 	LCD_WrCmd(0x02|d);			//   Default => 0x12 (0x10)
        ORRS     R0,R4,#0x2
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  890 						//     Alternative COM Pin Configuration
//  891 						//     Disable COM Left/Right Re-Map
//  892 }
        POP      {R4,PC}          ;; return
//  893 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  894 void Set_VCOMH(unsigned char d)
//  895 {
Set_VCOMH:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  896 	LCD_WrCmd(0xDB);			// Set VCOMH Deselect Level
        MOVS     R0,#+219
        BL       LCD_WrCmd
//  897 	LCD_WrCmd(d);			//   Default => 0x20 (0.77*VCC)
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  898 }
        POP      {R4,PC}          ;; return
//  899 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  900 void Set_NOP(void)
//  901 {
Set_NOP:
        PUSH     {R7,LR}
//  902 	LCD_WrCmd(0xE3);			// Command for No Operation
        MOVS     R0,#+227
        BL       LCD_WrCmd
//  903 }
        POP      {R0,PC}          ;; return
//  904 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  905 void LCD_Init(void)        
//  906 {
LCD_Init:
        PUSH     {R7,LR}
//  907   init_gpio_OLED();
        BL       init_gpio_OLED
//  908   
//  909   LCD_SCL=1;
        MOVS     R0,#+1
        LDR.W    R1,??DataTable13_3  ;; 0x43fe1020
        STR      R0,[R1, #+0]
//  910   //LCD_CS=1;	//预制SLK和SS为高电平   	
//  911   LCD_RST=0;
        MOVS     R0,#+0
        LDR.W    R1,??DataTable19  ;; 0x43fe1028
        STR      R0,[R1, #+0]
//  912   LCD_DLY_ms(50);
        MOVS     R0,#+50
        BL       LCD_DLY_ms
//  913   LCD_RST=1;
        MOVS     R0,#+1
        LDR.W    R1,??DataTable19  ;; 0x43fe1028
        STR      R0,[R1, #+0]
//  914 	
//  915   //从上电到下面开始初始化要有足够的时间，即等待RC复位完毕
//  916   Set_Display_On_Off(0x00);		  // Display Off (0x00/0x01)
        MOVS     R0,#+0
        BL       Set_Display_On_Off
//  917   Set_Display_Clock(0x80);		  // Set Clock as 100 Frames/Sec
        MOVS     R0,#+128
        BL       Set_Display_Clock
//  918   Set_Multiplex_Ratio(0x3F);		// 1/64 Duty (0x0F~0x3F)
        MOVS     R0,#+63
        BL       Set_Multiplex_Ratio
//  919   Set_Display_Offset(0x00);		  // Shift Mapping RAM Counter (0x00~0x3F)
        MOVS     R0,#+0
        BL       Set_Display_Offset
//  920   SetStartLine(0x00);			      // Set Mapping RAM Display Start Line (0x00~0x3F)
        MOVS     R0,#+0
        BL       SetStartLine
//  921   Set_Charge_Pump(0x04);		    // Enable Embedded DC/DC Converter (0x00/0x04)
        MOVS     R0,#+4
        BL       Set_Charge_Pump
//  922   SetAddressingMode(0x02);		  // Set Page Addressing Mode (0x00/0x01/0x02)
        MOVS     R0,#+2
        BL       SetAddressingMode
//  923   Set_Segment_Remap(0x01);		  // Set SEG/Column Mapping     0x00左右反置 0x01正常
        MOVS     R0,#+1
        BL       Set_Segment_Remap
//  924   Set_Common_Remap(0x08);			  // Set COM/Row Scan Direction 0x00上下反置 0x08正常
        MOVS     R0,#+8
        BL       Set_Common_Remap
//  925   Set_Common_Config(0x10);		  // Set Sequential Configuration (0x00/0x10)
        MOVS     R0,#+16
        BL       Set_Common_Config
//  926   SetContrastControl(Brightness);	// Set SEG Output Current
        MOVS     R0,#+207
        BL       SetContrastControl
//  927   Set_Precharge_Period(0xF1);		// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
        MOVS     R0,#+241
        BL       Set_Precharge_Period
//  928   Set_VCOMH(0x40);			        // Set VCOM Deselect Level
        MOVS     R0,#+64
        BL       Set_VCOMH
//  929   Set_Entire_Display(0x00);		  // Disable Entire Display On (0x00/0x01)
        MOVS     R0,#+0
        BL       Set_Entire_Display
//  930   Set_Inverse_Display(0x00);		// Disable Inverse Display On (0x00/0x01)  
        MOVS     R0,#+0
        BL       Set_Inverse_Display
//  931   Set_Display_On_Off(0x01);		  // Display On (0x00/0x01)
        MOVS     R0,#+1
        BL       Set_Display_On_Off
//  932   LCD_Fill(0x00);  //初始清屏
        MOVS     R0,#+0
        BL       LCD_Fill
//  933   LCD_Set_Pos(0,0);  
        MOVS     R1,#+0
        MOVS     R0,#+0
        BL       LCD_Set_Pos
//  934 	
//  935   /*
//  936   LCD_WrCmd(0xae);//--turn off oled panel
//  937   LCD_WrCmd(0x00);//---set low column address
//  938   LCD_WrCmd(0x10);//---set high column address
//  939   LCD_WrCmd(0x40);//--set start line address
//  940   LCD_WrCmd(0x81);//--set contrast control register
//  941   LCD_WrCmd(0xcf);
//  942   LCD_WrCmd(0xa1);//--set segment re-map 95 to 0
//  943   LCD_WrCmd(0xa6);//--set normal display
//  944   LCD_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
//  945   LCD_WrCmd(0x3f);//--1/64 duty
//  946   LCD_WrCmd(0xd3);//-set display offset
//  947   LCD_WrCmd(0x00);//-not offset
//  948   LCD_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
//  949   LCD_WrCmd(0x80);//--set divide ratio
//  950   LCD_WrCmd(0xd9);//--set pre-charge period
//  951   LCD_WrCmd(0xf1);
//  952   LCD_WrCmd(0xda);//--set com pins hardware configuration
//  953   LCD_WrCmd(0x12);
//  954   LCD_WrCmd(0xdb);//--set vcomh
//  955   LCD_WrCmd(0x40);
//  956   LCD_WrCmd(0x8d);//--set Charge Pump enable/disable
//  957   LCD_WrCmd(0x14);//--set(0x10) disable
//  958   LCD_WrCmd(0xaf);//--turn on oled panel
//  959   */
//  960 	
//  961 } 
        POP      {R0,PC}          ;; return
//  962 //==============================================================
//  963 //函数名： void LCD_PutPixel(byte x,byte y)
//  964 //功能描述：绘制一个点（x,y）
//  965 //参数：真实坐标值(x,y),x的范围0～127，y的范围0～64
//  966 //返回：无
//  967 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  968 void LCD_PutPixel(unsigned char x,unsigned char y)
//  969 {
LCD_PutPixel:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  970 	unsigned char data1;  //data1当前点的数据 
//  971 
//  972 	LCD_Set_Pos(x,(unsigned char)(y>>3)); 
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        LSRS     R1,R5,#+3
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
//  973 	data1 =(unsigned char)(0x01<<(y%8)); 	
        MOVS     R0,#+1
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R5,R1
        MLS      R2,R2,R1,R5
        LSLS     R6,R0,R2
//  974 	LCD_WrCmd((unsigned char)(0xb0+(y>>3)));
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        LSRS     R0,R5,#+3
        SUBS     R0,R0,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  975 	LCD_WrCmd((unsigned char)(((x&0xf0)>>4)|0x10));
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        LSRS     R0,R4,#+4
        ORRS     R0,R0,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  976 	LCD_WrCmd((unsigned char)((x&0x0f)|0x00));
        ANDS     R0,R4,#0xF
        BL       LCD_WrCmd
//  977 	LCD_WrDat(data1); 	 	
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
//  978 }
        POP      {R4-R6,PC}       ;; return
//  979 //==============================================================
//  980 //函数名： void LCD_Rectangle(byte x1,byte y1,
//  981 //                   byte x2,byte y2,byte color,byte gif)
//  982 //功能描述：绘制一个实心矩形
//  983 //参数：左上角坐标（x1,y1）,右下角坐标（x2，y2）
//  984 //      其中x1、x2的范围0～127，y1，y2的范围0～63，即真实坐标值
//  985 //返回：无
//  986 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  987 void LCD_Rectangle(byte x1,byte y1,byte x2,byte y2,byte gif)
//  988 {
LCD_Rectangle:
        PUSH     {R3-R9,LR}
        MOVS     R5,R0
        MOVS     R6,R1
        MOVS     R7,R2
        MOV      R8,R3
//  989 	byte n; 
//  990 		
//  991 	LCD_Set_Pos(x1,y1>>3);
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        LSRS     R1,R6,#+3
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
//  992 	for(n=x1;n<=x2;n++)
        MOV      R9,R5
        LDR      R4,[SP, #+32]
        B.N      ??LCD_Rectangle_0
//  993 	{
//  994 		LCD_WrDat(0x01<<(y1%8)); 			
??LCD_Rectangle_1:
        MOVS     R0,#+1
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R6,R1
        MLS      R2,R2,R1,R6
        LSLS     R0,R0,R2
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
//  995 		if(gif == 1) 	LCD_DLY_ms(50);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+1
        BNE.N    ??LCD_Rectangle_2
        MOVS     R0,#+50
        BL       LCD_DLY_ms
//  996 	}  
??LCD_Rectangle_2:
        ADDS     R9,R9,#+1
??LCD_Rectangle_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R7,R9
        BCS.N    ??LCD_Rectangle_1
//  997 	LCD_Set_Pos(x1,y2>>3);
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LSRS     R1,R8,#+3
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
//  998   for(n=x1;n<=x2;n++)
        MOV      R9,R5
        B.N      ??LCD_Rectangle_3
//  999 	{
// 1000 		LCD_WrDat(0x01<<(y2%8)); 			
??LCD_Rectangle_4:
        MOVS     R0,#+1
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        MOVS     R1,#+8
        SDIV     R2,R8,R1
        MLS      R2,R2,R1,R8
        LSLS     R0,R0,R2
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
// 1001 		if(gif == 1) 	LCD_DLY_ms(5);
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+1
        BNE.N    ??LCD_Rectangle_5
        MOVS     R0,#+5
        BL       LCD_DLY_ms
// 1002 	}
??LCD_Rectangle_5:
        ADDS     R9,R9,#+1
??LCD_Rectangle_3:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R7,R9
        BCS.N    ??LCD_Rectangle_4
// 1003 	
// 1004 }  
        POP      {R0,R4-R9,PC}    ;; return
// 1005 //==============================================================
// 1006 //函数名：LCD_P6x8Str(byte x,byte y,byte *p)
// 1007 //功能描述：写入一组标准ASCII字符串
// 1008 //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
// 1009 //返回：无
// 1010 //==============================================================  

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1011 void LCD_P6x8Str(byte x,byte y,byte ch[])
// 1012 {
LCD_P6x8Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
// 1013   byte c=0,i=0,j=0;      
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
        B.N      ??LCD_P6x8Str_0
// 1014   while (ch[j]!='\0')
// 1015   {    
// 1016     c =ch[j]-32;
// 1017     if(x>126){x=0;y++;}
// 1018     LCD_Set_Pos(x,y);    
// 1019   	for(i=0;i<6;i++)     
// 1020   	  LCD_WrDat(F6x8[c][i]);  
??LCD_P6x8Str_1:
        LDR.W    R0,??DataTable20
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R1,#+6
        MLA      R0,R1,R7,R0
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LDRB     R0,[R8, R0]
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
??LCD_P6x8Str_2:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+6
        BLT.N    ??LCD_P6x8Str_1
// 1021   	x+=6;
        ADDS     R4,R4,#+6
// 1022   	j++;
        ADDS     R9,R9,#+1
??LCD_P6x8Str_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??LCD_P6x8Str_3
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R7,R0,#+32
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+127
        BLT.N    ??LCD_P6x8Str_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??LCD_P6x8Str_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R8,#+0
        B.N      ??LCD_P6x8Str_2
// 1023   }
// 1024 }
??LCD_P6x8Str_3:
        POP      {R0,R4-R9,PC}    ;; return
// 1025 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1026 void LCD_P6x8Str2(byte x,byte y,byte ch[])
// 1027 {
LCD_P6x8Str2:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
// 1028   byte c=0,i=0,j=0;      
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
        B.N      ??LCD_P6x8Str2_0
// 1029   while (ch[j]!='\0')
// 1030   {    
// 1031     c =ch[j]-32;
// 1032     if(x>126){x=0;y++;}
// 1033     LCD_Set_Pos(x,y);    
// 1034   	for(i=0;i<6;i++)     
// 1035   	  LCD_WrDat(~(F6x8[c][i]));  
??LCD_P6x8Str2_1:
        LDR.W    R0,??DataTable20
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        MOVS     R1,#+6
        MLA      R0,R1,R7,R0
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        LDRB     R0,[R8, R0]
        MVNS     R0,R0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
??LCD_P6x8Str2_2:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+6
        BLT.N    ??LCD_P6x8Str2_1
// 1036   	x+=6;
        ADDS     R4,R4,#+6
// 1037   	j++;
        ADDS     R9,R9,#+1
??LCD_P6x8Str2_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??LCD_P6x8Str2_3
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R7,R0,#+32
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+127
        BLT.N    ??LCD_P6x8Str2_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??LCD_P6x8Str2_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R8,#+0
        B.N      ??LCD_P6x8Str2_2
// 1038   }
// 1039 }
??LCD_P6x8Str2_3:
        POP      {R0,R4-R9,PC}    ;; return
// 1040 //==============================================================
// 1041 //函数名：LCD_P8x16Str(byte x,byte y,byte *p)
// 1042 //功能描述：写入一组标准ASCII字符串
// 1043 //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
// 1044 //返回：无
// 1045 //==============================================================  

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1046 void LCD_P8x16Str(byte x,byte y,byte ch[])
// 1047 {
LCD_P8x16Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
// 1048   byte c=0,i=0,j=0;
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
        B.N      ??LCD_P8x16Str_0
// 1049         
// 1050   while (ch[j]!='\0')
// 1051   {    
// 1052     c =ch[j]-32;
// 1053     if(x>120){x=0;y++;}
// 1054     LCD_Set_Pos(x,y);    
// 1055   	for(i=0;i<8;i++)     
// 1056   	  LCD_WrDat(F8X16[c*16+i]);
// 1057   	LCD_Set_Pos(x,y+1);    
// 1058   	for(i=0;i<8;i++)     
// 1059   	  LCD_WrDat(F8X16[c*16+i+8]);  
??LCD_P8x16Str_1:
        LDR.W    R0,??DataTable20_1
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LSLS     R1,R7,#+4
        UXTAB    R1,R1,R8
        ADDS     R0,R1,R0
        LDRB     R0,[R0, #+8]
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
??LCD_P8x16Str_2:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BLT.N    ??LCD_P8x16Str_1
// 1060   	x+=8;
        ADDS     R4,R4,#+8
// 1061   	j++;
        ADDS     R9,R9,#+1
??LCD_P8x16Str_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??LCD_P8x16Str_3
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R7,R0,#+32
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+121
        BLT.N    ??LCD_P8x16Str_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??LCD_P8x16Str_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R8,#+0
        B.N      ??LCD_P8x16Str_5
??LCD_P8x16Str_6:
        LDR.W    R0,??DataTable20_1
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LSLS     R1,R7,#+4
        UXTAB    R1,R1,R8
        LDRB     R0,[R1, R0]
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
??LCD_P8x16Str_5:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BLT.N    ??LCD_P8x16Str_6
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R8,#+0
        B.N      ??LCD_P8x16Str_2
// 1062   }
// 1063 }
??LCD_P8x16Str_3:
        POP      {R0,R4-R9,PC}    ;; return
// 1064 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1065 void LCD_P8x16Str2(byte x,byte y,byte ch[])
// 1066 {
LCD_P8x16Str2:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
// 1067   byte c=0,i=0,j=0;
        MOVS     R7,#+0
        MOVS     R8,#+0
        MOVS     R9,#+0
        B.N      ??LCD_P8x16Str2_0
// 1068         
// 1069   while (ch[j]!='\0')
// 1070   {    
// 1071     c =ch[j]-32;
// 1072     if(x>120){x=0;y++;}
// 1073     LCD_Set_Pos(x,y);    
// 1074   	for(i=0;i<8;i++)     
// 1075   	  LCD_WrDat(~F8X16[c*16+i]);
// 1076   	LCD_Set_Pos(x,y+1);    
// 1077   	for(i=0;i<8;i++)     
// 1078   	  LCD_WrDat(~F8X16[c*16+i+8]);  
??LCD_P8x16Str2_1:
        LDR.W    R0,??DataTable20_1
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LSLS     R1,R7,#+4
        UXTAB    R1,R1,R8
        ADDS     R0,R1,R0
        LDRB     R0,[R0, #+8]
        MVNS     R0,R0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
??LCD_P8x16Str2_2:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BLT.N    ??LCD_P8x16Str2_1
// 1079   	x+=8;
        ADDS     R4,R4,#+8
// 1080   	j++;
        ADDS     R9,R9,#+1
??LCD_P8x16Str2_0:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        CMP      R0,#+0
        BEQ.N    ??LCD_P8x16Str2_3
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R6]
        SUBS     R7,R0,#+32
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+121
        BLT.N    ??LCD_P8x16Str2_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??LCD_P8x16Str2_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R8,#+0
        B.N      ??LCD_P8x16Str2_5
??LCD_P8x16Str2_6:
        LDR.W    R0,??DataTable20_1
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LSLS     R1,R7,#+4
        UXTAB    R1,R1,R8
        LDRB     R0,[R1, R0]
        MVNS     R0,R0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
??LCD_P8x16Str2_5:
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+8
        BLT.N    ??LCD_P8x16Str2_6
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R8,#+0
        B.N      ??LCD_P8x16Str2_2
// 1081   }
// 1082 }
??LCD_P8x16Str2_3:
        POP      {R0,R4-R9,PC}    ;; return
// 1083 //输出汉字字符串

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1084 void LCD_P14x16Str(byte x,byte y,byte ch[])
// 1085 {
LCD_P14x16Str:
        PUSH     {R3-R9,LR}
        MOVS     R6,R0
        MOVS     R4,R1
        MOVS     R5,R2
// 1086 	byte wm=0,ii = 0;
        MOVS     R9,#+0
        MOVS     R7,#+0
// 1087 	word adder=1; 
        MOVS     R8,#+1
        B.N      ??LCD_P14x16Str_0
// 1088 	
// 1089 	while(ch[ii] != '\0')
// 1090 	{
// 1091   	wm = 0;
// 1092   	adder = 1;
// 1093   	while(F14x16_Idx[wm] > 127)
// 1094   	{
// 1095   		if(F14x16_Idx[wm] == ch[ii])
// 1096   		{
// 1097   			if(F14x16_Idx[wm + 1] == ch[ii + 1])
// 1098   			{
// 1099   				adder = wm * 14;
// 1100   				break;
// 1101   			}
// 1102   		}
// 1103   		wm += 2;			
// 1104   	}
// 1105   	if(x>118){x=0;y++;}
// 1106   	LCD_Set_Pos(x , y); 
// 1107   	if(adder != 1)// 显示汉字					
// 1108   	{
// 1109   		LCD_Set_Pos(x , y);
// 1110   		for(wm = 0;wm < 14;wm++)               
// 1111   		{
// 1112   			LCD_WrDat(F14x16[adder]);	
// 1113   			adder += 1;
// 1114   		}      
// 1115   		LCD_Set_Pos(x,y + 1); 
// 1116   		for(wm = 0;wm < 14;wm++)          
// 1117   		{
// 1118   			LCD_WrDat(F14x16[adder]);
// 1119   			adder += 1;
// 1120   		}   		
// 1121   	}
// 1122   	else			  //显示空白字符			
// 1123   	{
// 1124   		ii += 1;
// 1125       LCD_Set_Pos(x,y);
// 1126   		for(wm = 0;wm < 16;wm++)
// 1127   		{
// 1128   				LCD_WrDat(0);
// 1129   		}
// 1130   		LCD_Set_Pos(x,y + 1);
// 1131   		for(wm = 0;wm < 16;wm++)
// 1132   		{   		
// 1133   				LCD_WrDat(0);	
??LCD_P14x16Str_1:
        MOVS     R0,#+0
        BL       LCD_WrDat
// 1134   		}
        ADDS     R9,R9,#+1
??LCD_P14x16Str_2:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+16
        BLT.N    ??LCD_P14x16Str_1
// 1135   	}
// 1136   	x += 14;
??LCD_P14x16Str_3:
        ADDS     R6,R6,#+14
// 1137   	ii += 2;
        ADDS     R7,R7,#+2
??LCD_P14x16Str_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R5]
        CMP      R0,#+0
        BEQ.W    ??LCD_P14x16Str_4
        MOVS     R9,#+0
        MOVS     R8,#+1
        B.N      ??LCD_P14x16Str_5
??LCD_P14x16Str_6:
        ADDS     R9,R9,#+2
??LCD_P14x16Str_5:
        LDR.W    R0,??DataTable20_2
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R0]
        CMP      R0,#+128
        BLT.N    ??LCD_P14x16Str_7
        LDR.W    R0,??DataTable20_2
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R0]
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R1,[R7, R5]
        CMP      R0,R1
        BNE.N    ??LCD_P14x16Str_6
        LDR.W    R0,??DataTable20_2
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        ADDS     R0,R9,R0
        LDRB     R0,[R0, #+1]
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADDS     R1,R7,R5
        LDRB     R1,[R1, #+1]
        CMP      R0,R1
        BNE.N    ??LCD_P14x16Str_6
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        MOVS     R0,#+14
        MUL      R8,R0,R9
??LCD_P14x16Str_7:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+119
        BLT.N    ??LCD_P14x16Str_8
        MOVS     R6,#+0
        ADDS     R4,R4,#+1
??LCD_P14x16Str_8:
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        CMP      R8,#+1
        BEQ.N    ??LCD_P14x16Str_9
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
        B.N      ??LCD_P14x16Str_10
??LCD_P14x16Str_11:
        LDR.W    R0,??DataTable20_3
        LDRB     R0,[R8, R0]
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
        ADDS     R9,R9,#+1
??LCD_P14x16Str_10:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+14
        BLT.N    ??LCD_P14x16Str_11
        ADDS     R1,R4,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
??LCD_P14x16Str_12:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+14
        BGE.N    ??LCD_P14x16Str_3
        LDR.W    R0,??DataTable20_3
        LDRB     R0,[R8, R0]
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
        ADDS     R9,R9,#+1
        B.N      ??LCD_P14x16Str_12
??LCD_P14x16Str_9:
        ADDS     R7,R7,#+1
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
        B.N      ??LCD_P14x16Str_13
??LCD_P14x16Str_14:
        MOVS     R0,#+0
        BL       LCD_WrDat
        ADDS     R9,R9,#+1
??LCD_P14x16Str_13:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+16
        BLT.N    ??LCD_P14x16Str_14
        ADDS     R1,R4,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
        B.N      ??LCD_P14x16Str_2
// 1138 	}
// 1139 }
??LCD_P14x16Str_4:
        POP      {R0,R4-R9,PC}    ;; return
// 1140 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1141 void LCD_P14x16Str2(byte x,byte y,byte ch[])
// 1142 {
LCD_P14x16Str2:
        PUSH     {R3-R9,LR}
        MOVS     R6,R0
        MOVS     R4,R1
        MOVS     R5,R2
// 1143 	byte wm=0,ii = 0;
        MOVS     R9,#+0
        MOVS     R7,#+0
// 1144 	word adder=1; 
        MOVS     R8,#+1
        B.N      ??LCD_P14x16Str2_0
// 1145 	
// 1146 	while(ch[ii] != '\0')
// 1147 	{
// 1148   	wm = 0;
// 1149   	adder = 1;
// 1150   	while(F14x16_Idx[wm] > 127)
// 1151   	{
// 1152   		if(F14x16_Idx[wm] == ch[ii])
// 1153   		{
// 1154   			if(F14x16_Idx[wm + 1] == ch[ii + 1])
// 1155   			{
// 1156   				adder = wm * 14;
// 1157   				break;
// 1158   			}
// 1159   		}
// 1160   		wm += 2;			
// 1161   	}
// 1162   	if(x>118){x=0;y++;}
// 1163   	LCD_Set_Pos(x , y); 
// 1164   	if(adder != 1)// 显示汉字					
// 1165   	{
// 1166   		LCD_Set_Pos(x , y);
// 1167   		for(wm = 0;wm < 14;wm++)               
// 1168   		{
// 1169   			LCD_WrDat(~F14x16[adder]);	
// 1170   			adder += 1;
// 1171   		}      
// 1172   		LCD_Set_Pos(x,y + 1); 
// 1173   		for(wm = 0;wm < 14;wm++)          
// 1174   		{
// 1175   			LCD_WrDat(~F14x16[adder]);
// 1176   			adder += 1;
// 1177   		}   		
// 1178   	}
// 1179   	else			  //显示空白字符			
// 1180   	{
// 1181   		ii += 1;
// 1182       LCD_Set_Pos(x,y);
// 1183   		for(wm = 0;wm < 16;wm++)
// 1184   		{
// 1185   				LCD_WrDat(0);
// 1186   		}
// 1187   		LCD_Set_Pos(x,y + 1);
// 1188   		for(wm = 0;wm < 16;wm++)
// 1189   		{   		
// 1190   				LCD_WrDat(0);	
??LCD_P14x16Str2_1:
        MOVS     R0,#+0
        BL       LCD_WrDat
// 1191   		}
        ADDS     R9,R9,#+1
??LCD_P14x16Str2_2:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+16
        BLT.N    ??LCD_P14x16Str2_1
// 1192   	}
// 1193   	x += 14;
??LCD_P14x16Str2_3:
        ADDS     R6,R6,#+14
// 1194   	ii += 2;
        ADDS     R7,R7,#+2
??LCD_P14x16Str2_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R5]
        CMP      R0,#+0
        BEQ.W    ??LCD_P14x16Str2_4
        MOVS     R9,#+0
        MOVS     R8,#+1
        B.N      ??LCD_P14x16Str2_5
??LCD_P14x16Str2_6:
        ADDS     R9,R9,#+2
??LCD_P14x16Str2_5:
        LDR.W    R0,??DataTable20_2
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R0]
        CMP      R0,#+128
        BLT.N    ??LCD_P14x16Str2_7
        LDR.W    R0,??DataTable20_2
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        LDRB     R0,[R9, R0]
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R1,[R7, R5]
        CMP      R0,R1
        BNE.N    ??LCD_P14x16Str2_6
        LDR.W    R0,??DataTable20_2
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        ADDS     R0,R9,R0
        LDRB     R0,[R0, #+1]
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADDS     R1,R7,R5
        LDRB     R1,[R1, #+1]
        CMP      R0,R1
        BNE.N    ??LCD_P14x16Str2_6
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        MOVS     R0,#+14
        MUL      R8,R0,R9
??LCD_P14x16Str2_7:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+119
        BLT.N    ??LCD_P14x16Str2_8
        MOVS     R6,#+0
        ADDS     R4,R4,#+1
??LCD_P14x16Str2_8:
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        CMP      R8,#+1
        BEQ.N    ??LCD_P14x16Str2_9
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
        B.N      ??LCD_P14x16Str2_10
??LCD_P14x16Str2_11:
        LDR.W    R0,??DataTable20_3
        LDRB     R0,[R8, R0]
        MVNS     R0,R0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
        ADDS     R9,R9,#+1
??LCD_P14x16Str2_10:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+14
        BLT.N    ??LCD_P14x16Str2_11
        ADDS     R1,R4,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
??LCD_P14x16Str2_12:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+14
        BGE.N    ??LCD_P14x16Str2_3
        LDR.W    R0,??DataTable20_3
        LDRB     R0,[R8, R0]
        MVNS     R0,R0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
        ADDS     R9,R9,#+1
        B.N      ??LCD_P14x16Str2_12
??LCD_P14x16Str2_9:
        ADDS     R7,R7,#+1
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
        B.N      ??LCD_P14x16Str2_13
??LCD_P14x16Str2_14:
        MOVS     R0,#+0
        BL       LCD_WrDat
        ADDS     R9,R9,#+1
??LCD_P14x16Str2_13:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        CMP      R9,#+16
        BLT.N    ??LCD_P14x16Str2_14
        ADDS     R1,R4,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
        B.N      ??LCD_P14x16Str2_2
// 1195 	}
// 1196 }
??LCD_P14x16Str2_4:
        POP      {R0,R4-R9,PC}    ;; return
// 1197 
// 1198 //输出汉字和字符混合字符串

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1199 void LCD_Print(byte x, byte y, byte ch[])
// 1200 {
LCD_Print:
        PUSH     {R3-R7,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
// 1201 	byte ch2[3];
// 1202 	byte ii=0;        
        MOVS     R7,#+0
        B.N      ??LCD_Print_0
// 1203 	while(ch[ii] != '\0')
// 1204 	{
// 1205 		if(ch[ii] > 127)
// 1206 		{
// 1207 			ch2[0] = ch[ii];
??LCD_Print_1:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        STRB     R0,[SP, #+0]
// 1208 	 		ch2[1] = ch[ii + 1];
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        ADDS     R0,R7,R6
        LDRB     R0,[R0, #+1]
        STRB     R0,[SP, #+1]
// 1209 			ch2[2] = '\0';			//汉字为两个字节
        MOVS     R0,#+0
        STRB     R0,[SP, #+2]
// 1210 			LCD_P14x16Str(x , y, ch2);	//显示汉字
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_P14x16Str
// 1211 			x += 14;
        ADDS     R4,R4,#+14
// 1212 			ii += 2;
        ADDS     R7,R7,#+2
// 1213 		}
??LCD_Print_0:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+0
        BEQ.N    ??LCD_Print_2
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+128
        BGE.N    ??LCD_Print_1
// 1214 		else
// 1215 		{
// 1216 			ch2[0] = ch[ii];	
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        STRB     R0,[SP, #+0]
// 1217 			ch2[1] = '\0';			//字母占一个字节
        MOVS     R0,#+0
        STRB     R0,[SP, #+1]
// 1218 			LCD_P8x16Str(x , y , ch2);	//显示字母
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_P8x16Str
// 1219 			x += 8;
        ADDS     R4,R4,#+8
// 1220 			ii+= 1;
        ADDS     R7,R7,#+1
        B.N      ??LCD_Print_0
// 1221 		}
// 1222 	}
// 1223 } 
??LCD_Print_2:
        POP      {R0,R4-R7,PC}    ;; return
// 1224 
// 1225 //==============================================================
// 1226 //函数名： void Draw_BMP(byte x,byte y)
// 1227 //功能描述：显示BMP图片128×64
// 1228 //参数：起始点坐标(x,y),x的范围0～127，y为页的范围0～7
// 1229 //返回：无
// 1230 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1231 void Draw_BMP(byte x0,byte y0,byte x1,byte y1,byte bmp[])
// 1232 { 	
Draw_BMP:
        PUSH     {R4-R10,LR}
        MOVS     R4,R0
        MOVS     R5,R2
        MOVS     R6,R3
// 1233   word ii=0;
        MOVS     R7,#+0
// 1234   byte x,y;
// 1235   
// 1236   if(y1%8==0) y=y1/8;      
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+8
        SDIV     R2,R6,R0
        MLS      R2,R2,R0,R6
        CMP      R2,#+0
        BNE.N    ??Draw_BMP_0
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+8
        SDIV     R10,R6,R0
        B.N      ??Draw_BMP_1
// 1237   else y=y1/8+1;
??Draw_BMP_0:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        MOVS     R0,#+8
        SDIV     R0,R6,R0
        ADDS     R10,R0,#+1
// 1238 	for(y=y0;y<=y1;y++)
??Draw_BMP_1:
        MOV      R10,R1
        LDR      R8,[SP, #+32]
        B.N      ??Draw_BMP_2
// 1239 	{
// 1240 		LCD_Set_Pos(x0,y);				
// 1241     for(x=x0;x<x1;x++)
// 1242 	    {      
// 1243 	    	LCD_WrDat(bmp[ii++]);	    	
??Draw_BMP_3:
        LDRB     R0,[R7, R8]
        BL       LCD_WrDat
        ADDS     R7,R7,#+1
// 1244 	    }
        ADDS     R9,R9,#+1
??Draw_BMP_4:
        UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R9,R5
        BCC.N    ??Draw_BMP_3
        ADDS     R10,R10,#+1
??Draw_BMP_2:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
        CMP      R6,R10
        BCC.N    ??Draw_BMP_5
        MOV      R1,R10
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOV      R9,R4
        B.N      ??Draw_BMP_4
// 1245 	}
// 1246 }
??Draw_BMP_5:
        POP      {R4-R10,PC}      ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1247 void Draw_LQLogo(void)
// 1248 { 	
Draw_LQLogo:
        PUSH     {R4-R6,LR}
// 1249   word ii=0;
        MOVS     R4,#+0
// 1250   byte x,y;       
// 1251   
// 1252 	for(y=0;y<8;y++)
        MOVS     R6,#+0
        B.N      ??Draw_LQLogo_0
// 1253 	{
// 1254 		LCD_Set_Pos(16,y);				
// 1255     for(x=16;x<112;x++)
// 1256 	    {      
// 1257 	    	LCD_WrDat(longqiu96x64[ii++]);	    	
??Draw_LQLogo_1:
        LDR.W    R0,??DataTable20_4
        LDRB     R0,[R4, R0]
        BL       LCD_WrDat
        ADDS     R4,R4,#+1
// 1258 	    }
        ADDS     R5,R5,#+1
??Draw_LQLogo_2:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+112
        BLT.N    ??Draw_LQLogo_1
        ADDS     R6,R6,#+1
??Draw_LQLogo_0:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+8
        BGE.N    ??Draw_LQLogo_3
        MOVS     R1,R6
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+16
        BL       LCD_Set_Pos
        MOVS     R5,#+16
        B.N      ??Draw_LQLogo_2
// 1259 	}
// 1260 }
??Draw_LQLogo_3:
        POP      {R4-R6,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1261 void Draw_LibLogo(void)
// 1262 { 	
Draw_LibLogo:
        PUSH     {R4-R6,LR}
// 1263   word ii=0;
        MOVS     R4,#+0
// 1264   byte x,y;       
// 1265   
// 1266 	for(y=0;y<8;y++)
        MOVS     R6,#+0
        B.N      ??Draw_LibLogo_0
// 1267 	{
// 1268 		LCD_Set_Pos(34,y);				
// 1269     for(x=34;x<94;x++)
// 1270 	    {      
// 1271 	    	LCD_WrDat(LIBLOGO60x58[ii++]);	    	
??Draw_LibLogo_1:
        LDR.W    R0,??DataTable20_5
        LDRB     R0,[R4, R0]
        BL       LCD_WrDat
        ADDS     R4,R4,#+1
// 1272 	    }
        ADDS     R5,R5,#+1
??Draw_LibLogo_2:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+94
        BLT.N    ??Draw_LibLogo_1
        ADDS     R6,R6,#+1
??Draw_LibLogo_0:
        UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
        CMP      R6,#+8
        BGE.N    ??Draw_LibLogo_3
        MOVS     R1,R6
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+34
        BL       LCD_Set_Pos
        MOVS     R5,#+34
        B.N      ??Draw_LibLogo_2
// 1273 	}
// 1274 }
??Draw_LibLogo_3:
        POP      {R4-R6,PC}       ;; return
// 1275 /*void floatToInt(float fl,byte n,unsigned char x,unsigned char y)
// 1276 {
// 1277    int tem1,tem2,k=1;
// 1278    unsigned char Temp_Buf[17];
// 1279    byte i;
// 1280    tem1=(int)fl;
// 1281    for(i=0;i<n;i++)
// 1282      k*=10;
// 1283    if(fl>0)
// 1284    tem2=(int)((fl-tem1)*k);
// 1285    else
// 1286    tem2=(int)((tem1-fl)*k);
// 1287    sprintf(Temp_Buf,"%d.%d\0",tem1,tem2);
// 1288    LCD_P6x8Str(x,y,Temp_Buf);
// 1289 }*/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1290 void floatToInt(float fl,byte n,byte s)
// 1291 {
floatToInt:
        PUSH     {R4-R8,LR}
        MOVS     R7,R0
        MOV      R8,R1
        MOVS     R4,R2
// 1292    int tem1,tem2,k=1;
        MOVS     R6,#+1
// 1293    byte i;
// 1294    tem1=(int)fl;
        MOVS     R0,R7
        BL       __aeabi_f2iz
        MOVS     R5,R0
// 1295    for(i=0;i<n;i++)
        MOVS     R0,#+0
        B.N      ??floatToInt_0
// 1296      k*=10;
??floatToInt_1:
        MOVS     R1,#+10
        MULS     R6,R1,R6
        ADDS     R0,R0,#+1
??floatToInt_0:
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R0,R8
        BCC.N    ??floatToInt_1
// 1297    if(fl>0)
        MOVS     R0,R7
        MOVS     R1,#+0
        BL       __aeabi_cfrcmple
        BCS.N    ??floatToInt_2
// 1298    tem2=(int)((fl-tem1)*k);
        MOVS     R0,R5
        BL       __aeabi_i2f
        MOVS     R1,R0
        MOVS     R0,R7
        BL       __aeabi_fsub
        MOVS     R7,R0
        MOVS     R0,R6
        BL       __aeabi_i2f
        MOVS     R1,R7
        BL       __aeabi_fmul
        BL       __aeabi_f2iz
        B.N      ??floatToInt_3
// 1299    else
// 1300   tem2=(int)((tem1-fl)*k);
??floatToInt_2:
        MOVS     R0,R5
        BL       __aeabi_i2f
        MOVS     R1,R7
        BL       __aeabi_fsub
        MOVS     R7,R0
        MOVS     R0,R6
        BL       __aeabi_i2f
        MOVS     R1,R7
        BL       __aeabi_fmul
        BL       __aeabi_f2iz
// 1301   switch(s)
??floatToInt_3:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+1
        BEQ.N    ??floatToInt_4
        BCC.N    ??floatToInt_5
        CMP      R4,#+3
        BEQ.N    ??floatToInt_6
        BCC.N    ??floatToInt_7
        B.N      ??floatToInt_5
// 1302   {
// 1303   case 1:sprintf((signed char *)str1,"%d.%d\0",tem1,tem2);break;
??floatToInt_4:
        MOVS     R3,R0
        MOVS     R2,R5
        LDR.W    R1,??DataTable20_6
        LDR.W    R0,??DataTable20_7
        BL       sprintf
        B.N      ??floatToInt_5
// 1304   case 2:sprintf((signed char *)str2,"%d.%d\0",tem1,tem2);break;
??floatToInt_7:
        MOVS     R3,R0
        MOVS     R2,R5
        LDR.W    R1,??DataTable20_6
        LDR.W    R0,??DataTable20_8
        BL       sprintf
        B.N      ??floatToInt_5
// 1305   case 3:sprintf((signed char *)str3,"%d.%d\0",tem1,tem2);break;
??floatToInt_6:
        MOVS     R3,R0
        MOVS     R2,R5
        LDR.W    R1,??DataTable20_6
        LDR.W    R0,??DataTable20_9
        BL       sprintf
// 1306   }
// 1307 }
??floatToInt_5:
        POP      {R4-R8,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1308 void floatToInt2(float fl,byte n,byte s)
// 1309 {
floatToInt2:
        PUSH     {R4-R8,LR}
        MOVS     R7,R0
        MOV      R8,R1
        MOVS     R4,R2
// 1310    int tem1,tem2,k=1;
        MOVS     R6,#+1
// 1311    byte i;
// 1312    tem1=(int)fl;
        MOVS     R0,R7
        BL       __aeabi_f2iz
        MOVS     R5,R0
// 1313    for(i=0;i<n;i++)
        MOVS     R0,#+0
        B.N      ??floatToInt2_0
// 1314      k*=10;
??floatToInt2_1:
        MOVS     R1,#+10
        MULS     R6,R1,R6
        ADDS     R0,R0,#+1
??floatToInt2_0:
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R0,R8
        BCC.N    ??floatToInt2_1
// 1315    if(fl>0)
        MOVS     R0,R7
        MOVS     R1,#+0
        BL       __aeabi_cfrcmple
        BCS.N    ??floatToInt2_2
// 1316    tem2=(int)((fl-tem1)*k);
        MOVS     R0,R5
        BL       __aeabi_i2f
        MOVS     R1,R0
        MOVS     R0,R7
        BL       __aeabi_fsub
        MOVS     R7,R0
        MOVS     R0,R6
        BL       __aeabi_i2f
        MOVS     R1,R7
        BL       __aeabi_fmul
        BL       __aeabi_f2iz
        B.N      ??floatToInt2_3
// 1317    else
// 1318   tem2=(int)((tem1-fl)*k);
??floatToInt2_2:
        MOVS     R0,R5
        BL       __aeabi_i2f
        MOVS     R1,R7
        BL       __aeabi_fsub
        MOVS     R7,R0
        MOVS     R0,R6
        BL       __aeabi_i2f
        MOVS     R1,R7
        BL       __aeabi_fmul
        BL       __aeabi_f2iz
// 1319   switch(s)
??floatToInt2_3:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+1
        BEQ.N    ??floatToInt2_4
        BCC.N    ??floatToInt2_5
        CMP      R4,#+3
        BEQ.N    ??floatToInt2_6
        BCC.N    ??floatToInt2_7
        B.N      ??floatToInt2_5
// 1320   {
// 1321   case 1:sprintf((signed char *)str4,"%d.%d\0",tem1,tem2);break;
??floatToInt2_4:
        MOVS     R3,R0
        MOVS     R2,R5
        LDR.W    R1,??DataTable20_6
        LDR.W    R0,??DataTable20_10
        BL       sprintf
        B.N      ??floatToInt2_5
// 1322   case 2:sprintf((signed char *)str5,"%d.%d\0",tem1,tem2);break;
??floatToInt2_7:
        MOVS     R3,R0
        MOVS     R2,R5
        LDR.W    R1,??DataTable20_6
        LDR.W    R0,??DataTable20_11
        BL       sprintf
        B.N      ??floatToInt2_5
// 1323   case 3:sprintf((signed char *)str6,"%d.%d\0",tem1,tem2);break;
??floatToInt2_6:
        MOVS     R3,R0
        MOVS     R2,R5
        LDR.W    R1,??DataTable20_6
        LDR.W    R0,??DataTable20_12
        BL       sprintf
// 1324   }
// 1325 }
??floatToInt2_5:
        POP      {R4-R8,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13:
        DC32     0x400ff080

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_1:
        DC32     gpio_init_struct_OLED

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_2:
        DC32     0x43fe1024

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_3:
        DC32     0x43fe1020

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable13_4:
        DC32     0x43fe101c
// 1326 /*****************************************************************************
// 1327  函 数 名  : LED_PrintImage
// 1328  功能描述  : 将图像显示出来
// 1329  输入参数  : UCHAR8 *pucTable     二维图像数组的地址
// 1330              USHORT16 usRowNum    二维图像的行数1~64
// 1331              USHORT16 usColumnNum 二维图像的列数1~128
// 1332  输出参数  : none
// 1333  返 回 值  : none
// 1334 *****************************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1335 void LED_PrintImage(unsigned char *pucTable,unsigned short usRowNum, unsigned short usColumnNum)
// 1336 {
LED_PrintImage:
        PUSH     {R4-R10,LR}
        MOVS     R4,R0
        MOVS     R5,R2
// 1337     unsigned char ucData;
// 1338     unsigned short i,j,k,m,n;
// 1339    unsigned short usRowTmp;
// 1340 
// 1341     m = usRowNum >> 3;   //计算图片行数以8位为一组完整的组数
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        LSRS     R6,R1,#+3
// 1342     n = usRowNum % 8;    //计算分完组后剩下的行数
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        MOVS     R0,#+8
        SDIV     R7,R1,R0
        MLS      R7,R7,R0,R1
// 1343     
// 1344     for(i = 0; i < m; i++) //完整组行扫描
        MOVS     R8,#+0
        B.N      ??LED_PrintImage_0
??LED_PrintImage_1:
        ADDS     R8,R8,#+1
??LED_PrintImage_0:
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        CMP      R8,R6
        BCS.N    ??LED_PrintImage_2
// 1345     {
// 1346         LCD_Set_Pos(0,(unsigned char)i);
        MOV      R1,R8
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+0
        BL       LCD_Set_Pos
// 1347         usRowTmp = i << 3;    //计算当前所在行的下标                  
        LSLS     R9,R8,#+3
// 1348         for(j = 0; j < usColumnNum; j++) //列扫描        
        MOVS     R10,#+0
        B.N      ??LED_PrintImage_3
// 1349         {
// 1350             ucData = 0;
// 1351             for(k = 0; k < 8; k++) //在i组中对这8行扫描
// 1352             {
// 1353                 ucData = ucData >> 1;
??LED_PrintImage_4:
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LSRS     R0,R0,#+1
// 1354                     if((pucTable + (usRowTmp + k) * usColumnNum)[j] == 255)
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        UXTAH    R2,R1,R9
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        MLA      R2,R5,R2,R4
        UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
        LDRB     R2,[R10, R2]
        CMP      R2,#+255
        BNE.N    ??LED_PrintImage_5
// 1355                     {
// 1356                        ucData = ucData | 0x80;
        ORRS     R0,R0,#0x80
// 1357                     }
// 1358             }
??LED_PrintImage_5:
        ADDS     R1,R1,#+1
??LED_PrintImage_6:
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        CMP      R1,#+8
        BLT.N    ??LED_PrintImage_4
// 1359             LCD_WrDat(ucData);
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R10,R10,#+1
??LED_PrintImage_3:
        UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        CMP      R10,R5
        BCS.N    ??LED_PrintImage_1
        MOVS     R0,#+0
        MOVS     R1,#+0
        B.N      ??LED_PrintImage_6
// 1360         }
// 1361     }
// 1362     
// 1363     LCD_Set_Pos(0,(unsigned char)i); //设置剩下的行显示的起始坐标
??LED_PrintImage_2:
        MOV      R1,R8
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+0
        BL       LCD_Set_Pos
// 1364     usRowTmp = i << 3;       //计算当前所在行的下标                  
        LSLS     R9,R8,#+3
// 1365     for(j = 0; j < usColumnNum; j++) //列扫描        
        MOVS     R10,#+0
        B.N      ??LED_PrintImage_7
// 1366     {
// 1367         ucData = 0;
// 1368         for(k = 0; k < n; k++) //对剩下的行扫描
// 1369         {
// 1370             ucData = ucData >> 1;
??LED_PrintImage_8:
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LSRS     R0,R0,#+1
// 1371             
// 1372             if((pucTable + (usRowTmp + k) * usColumnNum)[j] == 255)
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        UXTAH    R2,R1,R9
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        MLA      R2,R5,R2,R4
        UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
        LDRB     R2,[R10, R2]
        CMP      R2,#+255
        BNE.N    ??LED_PrintImage_9
// 1373             {
// 1374                 ucData = ucData | 0x80;
        ORRS     R0,R0,#0x80
// 1375             }      
// 1376         }
??LED_PrintImage_9:
        ADDS     R1,R1,#+1
??LED_PrintImage_10:
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        CMP      R1,R7
        BCC.N    ??LED_PrintImage_8
// 1377         ucData = ucData >> (8 - n);
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        RSBS     R1,R7,#+8
        ASRS     R0,R0,R1
// 1378         LCD_WrDat(ucData);
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R10,R10,#+1
??LED_PrintImage_7:
        UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        CMP      R10,R5
        BCS.N    ??LED_PrintImage_11
        MOVS     R0,#+0
        MOVS     R1,#+0
        B.N      ??LED_PrintImage_10
// 1379     }
// 1380 
// 1381     return;
??LED_PrintImage_11:
        POP      {R4-R10,PC}      ;; return
// 1382 }
// 1383 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1384 void LED_PrintImag2(unsigned char *pucTable,unsigned short usRowNum, unsigned short usColumnNum)
// 1385 {
LED_PrintImag2:
        PUSH     {R4-R10,LR}
        MOVS     R4,R0
        MOVS     R5,R2
// 1386     unsigned char ucData;
// 1387     unsigned short i,j,k,m,n;
// 1388    unsigned short usRowTmp;
// 1389     
// 1390     m = usRowNum >> 3;   //计算图片行数以8位为一组完整的组数
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        LSRS     R6,R1,#+3
// 1391     n = usRowNum % 8;    //计算分完组后剩下的行数
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        MOVS     R0,#+8
        SDIV     R7,R1,R0
        MLS      R7,R7,R0,R1
// 1392     
// 1393     for(i = 0; i < m; i++) //完整组行扫描
        MOVS     R8,#+0
        B.N      ??LED_PrintImag2_0
??LED_PrintImag2_1:
        ADDS     R8,R8,#+1
??LED_PrintImag2_0:
        UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
        UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
        CMP      R8,R6
        BCS.N    ??LED_PrintImag2_2
// 1394     {
// 1395         LCD_Set_Pos(0,(unsigned char)i);
        MOV      R1,R8
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+0
        BL       LCD_Set_Pos
// 1396         usRowTmp = i << 3;    //计算当前所在行的下标                  
        LSLS     R9,R8,#+3
// 1397         for(j = 0; j < usColumnNum; j+=2) //列扫描        
        MOVS     R10,#+0
        B.N      ??LED_PrintImag2_3
// 1398         {
// 1399             ucData = 0;
// 1400             for(k = 0; k < 8; k++) //在i组中对这8行扫描
// 1401             {
// 1402                 ucData = ucData >> 1;
??LED_PrintImag2_4:
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LSRS     R0,R0,#+1
// 1403                     if((pucTable + (usRowTmp + k) * usColumnNum)[j] == 255)
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        UXTAH    R2,R1,R9
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        MLA      R2,R5,R2,R4
        UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
        LDRB     R2,[R10, R2]
        CMP      R2,#+255
        BNE.N    ??LED_PrintImag2_5
// 1404                     {
// 1405                        ucData = ucData | 0x80;
        ORRS     R0,R0,#0x80
// 1406                     }
// 1407                 
// 1408             }
??LED_PrintImag2_5:
        ADDS     R1,R1,#+1
??LED_PrintImag2_6:
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        CMP      R1,#+8
        BLT.N    ??LED_PrintImag2_4
// 1409             LCD_WrDat(ucData);
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R10,R10,#+2
??LED_PrintImag2_3:
        UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        CMP      R10,R5
        BCS.N    ??LED_PrintImag2_1
        MOVS     R0,#+0
        MOVS     R1,#+0
        B.N      ??LED_PrintImag2_6
// 1410         }
// 1411     }
// 1412     
// 1413     LCD_Set_Pos(0,(unsigned char)i); //设置剩下的行显示的起始坐标
??LED_PrintImag2_2:
        MOV      R1,R8
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+0
        BL       LCD_Set_Pos
// 1414     usRowTmp = i << 3;       //计算当前所在行的下标                  
        LSLS     R9,R8,#+3
// 1415     for(j = 0; j < usColumnNum; j+=2) //列扫描        
        MOVS     R10,#+0
        B.N      ??LED_PrintImag2_7
// 1416     {
// 1417         ucData = 0;
// 1418         for(k = 0; k < n; k++) //对剩下的行扫描
// 1419         {
// 1420             ucData = ucData >> 1;
??LED_PrintImag2_8:
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LSRS     R0,R0,#+1
// 1421                 ucData = ucData >> 1;
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LSRS     R0,R0,#+1
// 1422                     if((pucTable + (usRowTmp + k) * usColumnNum)[j] == 255)
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        UXTAH    R2,R1,R9
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        MLA      R2,R5,R2,R4
        UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
        LDRB     R2,[R10, R2]
        CMP      R2,#+255
        BNE.N    ??LED_PrintImag2_9
// 1423                     {
// 1424                        ucData = ucData | 0x80;
        ORRS     R0,R0,#0x80
// 1425                     }
// 1426                 
// 1427         }
??LED_PrintImag2_9:
        ADDS     R1,R1,#+1
??LED_PrintImag2_10:
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        CMP      R1,R7
        BCC.N    ??LED_PrintImag2_8
// 1428         ucData = ucData >> (8 - n/2+1);
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
        MOVS     R1,#+2
        SDIV     R1,R7,R1
        RSBS     R1,R1,#+9
        ASRS     R0,R0,R1
// 1429         LCD_WrDat(ucData);
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R10,R10,#+2
??LED_PrintImag2_7:
        UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        CMP      R10,R5
        BCS.N    ??LED_PrintImag2_11
        MOVS     R0,#+0
        MOVS     R1,#+0
        B.N      ??LED_PrintImag2_10
// 1430     }
// 1431 
// 1432     return;
??LED_PrintImag2_11:
        POP      {R4-R10,PC}      ;; return
// 1433 }
// 1434 
// 1435 /*---------------------*列表移动*---------------------*/      

        SECTION `.data`:DATA:REORDER:NOROOT(2)
// 1436 char Change_To_Bit[8]=
Change_To_Bit:
        DATA
        DC8 128, 64, 32, 16, 8, 4, 2, 1
// 1437 {
// 1438   0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01
// 1439 };

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
// 1440 signed char Temp_List[120];
Temp_List:
        DS8 120

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
// 1441 void OLED_Write_Data(unsigned char Data)
// 1442 {
// 1443 	unsigned char Temp_i=8;
OLED_Write_Data:
        MOVS     R1,#+8
// 1444 	LCD_DC=1;;
        MOVS     R2,#+1
        LDR.W    R3,??DataTable20_13  ;; 0x43fe1024
        STR      R2,[R3, #+0]
// 1445   LCD_SCL=0;;
        MOVS     R2,#+0
        LDR.W    R3,??DataTable20_14  ;; 0x43fe1020
        STR      R2,[R3, #+0]
        B.N      ??OLED_Write_Data_0
// 1446   while(Temp_i--)
// 1447   {
// 1448     if(Data&0x80){LCD_SDA=1;}
// 1449     else{LCD_SDA=0;}
??OLED_Write_Data_1:
        MOVS     R2,#+0
        LDR.W    R3,??DataTable20_15  ;; 0x43fe101c
        STR      R2,[R3, #+0]
// 1450     LCD_SCL=1; 
??OLED_Write_Data_2:
        MOVS     R2,#+1
        LDR.W    R3,??DataTable20_14  ;; 0x43fe1020
        STR      R2,[R3, #+0]
// 1451     asm("nop");;
        nop
// 1452     LCD_SCL=0;;    
        MOVS     R2,#+0
        LDR.W    R3,??DataTable20_14  ;; 0x43fe1020
        STR      R2,[R3, #+0]
// 1453     Data<<=1;    
        LSLS     R0,R0,#+1
??OLED_Write_Data_0:
        MOVS     R2,R1
        SUBS     R1,R2,#+1
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        CMP      R2,#+0
        BEQ.N    ??OLED_Write_Data_3
        LSLS     R2,R0,#+24
        BPL.N    ??OLED_Write_Data_1
        MOVS     R2,#+1
        LDR.W    R3,??DataTable20_15  ;; 0x43fe101c
        STR      R2,[R3, #+0]
        B.N      ??OLED_Write_Data_2
// 1454   }
// 1455 }
??OLED_Write_Data_3:
        BX       LR               ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1456 void List_Move(signed char New_Data)
// 1457 // 对数组进行移位
// 1458 {
// 1459   static signed int Temp_i;
// 1460   signed int Temp_j;
// 1461   if(Temp_i<120)
List_Move:
        LDR.W    R1,??DataTable20_16
        LDR      R1,[R1, #+0]
        CMP      R1,#+120
        BGE.N    ??List_Move_0
// 1462     Temp_List[Temp_i]=New_Data;
        LDR.W    R1,??DataTable20_17
        LDR.W    R2,??DataTable20_16
        LDR      R2,[R2, #+0]
        STRB     R0,[R2, R1]
        B.N      ??List_Move_1
// 1463   else
// 1464   {
// 1465     for(Temp_j=0;Temp_j<119;Temp_j++)
??List_Move_0:
        MOVS     R1,#+0
        B.N      ??List_Move_2
// 1466       Temp_List[Temp_j]=Temp_List[Temp_j+1];  
??List_Move_3:
        LDR.W    R2,??DataTable20_17
        ADDS     R2,R1,R2
        LDRB     R2,[R2, #+1]
        LDR.W    R3,??DataTable20_17
        STRB     R2,[R1, R3]
        ADDS     R1,R1,#+1
??List_Move_2:
        CMP      R1,#+119
        BLT.N    ??List_Move_3
// 1467     Temp_List[119]=New_Data;  
        LDR.W    R1,??DataTable20_17
        STRB     R0,[R1, #+119]
// 1468   }
// 1469 
// 1470   if(Temp_i>=120)
??List_Move_1:
        LDR.N    R0,??DataTable20_16
        LDR      R0,[R0, #+0]
        CMP      R0,#+120
        BLT.N    ??List_Move_4
// 1471     Temp_i=120;
        MOVS     R0,#+120
        LDR.N    R1,??DataTable20_16
        STR      R0,[R1, #+0]
        B.N      ??List_Move_5
// 1472   else
// 1473     Temp_i++; 
??List_Move_4:
        LDR.N    R0,??DataTable20_16
        LDR      R0,[R0, #+0]
        ADDS     R0,R0,#+1
        LDR.N    R1,??DataTable20_16
        STR      R0,[R1, #+0]
// 1474 }
??List_Move_5:
        BX       LR               ;; return

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
??Temp_i:
        DS8 4
// 1475 /*-------------------*显示列表图形*-------------------*/      

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1476 void Delay_temp(signed int x)
// 1477 {
// 1478   signed int Temp_i,Temp_j;
// 1479   for(Temp_i=0;Temp_i<1000;Temp_i++)
Delay_temp:
        MOVS     R1,#+0
        B.N      ??Delay_temp_0
// 1480     for(Temp_j=0;Temp_j<x;Temp_j++);
??Delay_temp_1:
        ADDS     R2,R2,#+1
??Delay_temp_2:
        CMP      R2,R0
        BLT.N    ??Delay_temp_1
        ADDS     R1,R1,#+1
??Delay_temp_0:
        CMP      R1,#+1000
        BGE.N    ??Delay_temp_3
        MOVS     R2,#+0
        B.N      ??Delay_temp_2
// 1481 }
??Delay_temp_3:
        BX       LR               ;; return
// 1482 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1483 void List_Paint(void)
// 1484 // 将Temp_List列表里面的数据用一整幅图画出来
// 1485 {
List_Paint:
        PUSH     {R3-R5,LR}
// 1486   unsigned char Temp_i;
// 1487   unsigned char Cross;  
// 1488 
// 1489   for(Cross=0;Cross<6;Cross++)
        MOVS     R4,#+0
        B.N      ??List_Paint_0
??List_Paint_1:
        ADDS     R4,R4,#+1
??List_Paint_0:
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R4,#+6
        BGE.N    ??List_Paint_2
// 1490   {
// 1491     LCD_Set_Pos(4,7-Cross);         //这边应该是设置图像起始的行数
        RSBS     R1,R4,#+7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+4
        BL       LCD_Set_Pos
// 1492     for(Temp_i=0;Temp_i<120;Temp_i++) 
        MOVS     R5,#+0
        B.N      ??List_Paint_3
// 1493     {
// 1494       if(Temp_List[Temp_i]>>3==Cross)
// 1495       {
// 1496         OLED_Write_Data(Change_To_Bit[ Temp_List[Temp_i]&0x07 ]);   
// 1497       }
// 1498       else 
// 1499       {
// 1500         OLED_Write_Data(0x00);
??List_Paint_4:
        MOVS     R0,#+0
        BL       OLED_Write_Data
// 1501       }     
??List_Paint_5:
        ADDS     R5,R5,#+1
??List_Paint_3:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        CMP      R5,#+120
        BGE.N    ??List_Paint_1
        LDR.N    R0,??DataTable20_17
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        LDRSB    R0,[R5, R0]
        ASRS     R0,R0,#+3
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R0,R4
        BNE.N    ??List_Paint_4
        LDR.N    R0,??DataTable20_18
        LDR.N    R1,??DataTable20_17
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        LDRB     R1,[R5, R1]
        ANDS     R1,R1,#0x7
        LDRB     R0,[R1, R0]
        BL       OLED_Write_Data
        B.N      ??List_Paint_5
// 1502     }    
// 1503   }
// 1504 }
??List_Paint_2:
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1505 void Paint_List(float New_Data,float Paint_Ave,float Paint_Margin)
// 1506 // 将某个数据以列表刷新的形式显示出来
// 1507 {
Paint_List:
        PUSH     {R3-R7,LR}
        MOVS     R7,R0
        MOVS     R6,R1
        MOVS     R0,R2
// 1508   unsigned char Temp_Data;
// 1509   
// 1510   Temp_Data=(signed char)(22.0/Paint_Margin*(New_Data-Paint_Ave)+26);
        BL       __aeabi_f2d
        MOVS     R2,R0
        MOVS     R3,R1
        MOVS     R0,#+0
        LDR.N    R1,??DataTable20_19  ;; 0x40360000
        BL       __aeabi_ddiv
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R0,R7
        MOVS     R1,R6
        BL       __aeabi_fsub
        BL       __aeabi_f2d
        MOVS     R2,R4
        MOVS     R3,R5
        BL       __aeabi_dmul
        MOVS     R2,#+0
        LDR.N    R3,??DataTable20_20  ;; 0x403a0000
        BL       __aeabi_dadd
        BL       __aeabi_d2iz
// 1511   List_Move(Temp_Data);
        SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
        BL       List_Move
// 1512   List_Paint();
        BL       List_Paint
// 1513 }
        POP      {R0,R4-R7,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1514 void Paint_Angle(float Angle)
// 1515 {
Paint_Angle:
        PUSH     {R3-R5,LR}
// 1516   static signed int Temp_Count;
// 1517   Temp_Count=(int)(Angle);
        BL       __aeabi_f2iz
        LDR.N    R1,??DataTable20_21
        STR      R0,[R1, #+0]
// 1518  // Temp_Count=(int)(Angle);
// 1519   Paint_List(Temp_Count,0,25);    //已更改为80，原为25   80为显示范围
        LDR.N    R2,??DataTable20_22  ;; 0x41c80000
        MOVS     R1,#+0
        MOVS     R4,R1
        MOVS     R5,R2
        LDR.N    R0,??DataTable20_21
        LDR      R0,[R0, #+0]
        BL       __aeabi_i2f
        MOVS     R2,R5
        MOVS     R1,R4
        BL       Paint_List
// 1520   Delay_temp(56);                 //原来是200
        MOVS     R0,#+56
        BL       Delay_temp
// 1521 }
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
??Temp_Count:
        DS8 4
// 1522 
// 1523 /************将浮点型数据转换为字符串************/
// 1524 //fNum待变换浮点数
// 1525 //str[]存储转换后数组
// 1526 //dotsize 保留几位小数

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1527 int Float_To_String(float fNum,uint8 str[],int dotsize)
// 1528 {
Float_To_String:
        PUSH     {R3-R11,LR}
        MOV      R9,R0
        MOVS     R4,R1
        MOVS     R5,R2
// 1529 	// 定义变量
// 1530 	int iSize = 0;//记录字符串长度的数
        MOVS     R6,#+0
// 1531 	int n = 0;//用作循环的临时变量
        MOVS     R10,#+0
// 1532 	uint8 *p = str;//做换向时用的指针
// 1533 	uint8 *s = str;//做换向时用的指针
        MOVS     R7,R4
// 1534 	char isnegative = 0;//负数标志
        MOVS     R8,#+0
// 1535 	unsigned long int i_predot;//小数点前的数
// 1536 	unsigned long int i_afterdot;//小数点后的数
// 1537 	float f_afterdot;//实数型的小数部分
// 1538 
// 1539 	//判断是否为负数     
// 1540 	if(fNum < 0)
        MOV      R0,R9
        MOVS     R1,#+0
        BL       __aeabi_cfcmple
        BCS.N    ??Float_To_String_0
// 1541 	{
// 1542 		isnegative = 1;//设置负数标志
        MOVS     R8,#+1
// 1543 		fNum = 0 - fNum;//将负数变为正数
        EORS     R9,R9,#0x80000000
// 1544 	}
// 1545 
// 1546 	i_predot = (unsigned long int)fNum;//将小数点之前的数变为整数
??Float_To_String_0:
        MOV      R0,R9
        BL       __aeabi_f2uiz
        MOV      R11,R0
// 1547 	f_afterdot = fNum - i_predot;//单独取出小数点之后的数
        MOV      R0,R11
        BL       __aeabi_ui2f
        MOVS     R1,R0
        MOV      R0,R9
        BL       __aeabi_fsub
// 1548 	//根据设定的要保存的小数点后的位数，将小数点后相应的位数变到小数点之前
// 1549 	for(n = dotsize;n > 0;n--)
        MOV      R10,R5
        B.N      ??Float_To_String_1
// 1550 	{
// 1551 	        f_afterdot = f_afterdot*10;
??Float_To_String_2:
        LDR.N    R1,??DataTable20_23  ;; 0x41200000
        BL       __aeabi_fmul
// 1552 	}
        SUBS     R10,R10,#+1
??Float_To_String_1:
        CMP      R10,#+1
        BGE.N    ??Float_To_String_2
// 1553 	i_afterdot = (unsigned long int)f_afterdot;//将小数点后相应位数的数字变为整数
        BL       __aeabi_f2uiz
// 1554 
// 1555 	//先将小数点后的数转换为字符串
// 1556 	n=dotsize;
        MOV      R10,R5
        B.N      ??Float_To_String_3
// 1557 	while(i_afterdot > 0 |n > 0)
// 1558 	{
// 1559 		n--;
??Float_To_String_4:
        SUBS     R10,R10,#+1
// 1560 	 	str[iSize++] = i_afterdot % 10 + '0';//对10取余并变为ASCII码
        MOVS     R1,#+10
        UDIV     R2,R0,R1
        MLS      R1,R1,R2,R0
        ADDS     R1,R1,#+48
        STRB     R1,[R6, R4]
        ADDS     R6,R6,#+1
// 1561 	 	i_afterdot = i_afterdot / 10;//对10取商
        MOVS     R1,#+10
        UDIV     R0,R0,R1
// 1562 	}
??Float_To_String_3:
        CMP      R0,#+0
        BEQ.N    ??Float_To_String_5
        MOVS     R1,#+1
        B.N      ??Float_To_String_6
??Float_To_String_5:
        MOVS     R1,#+0
??Float_To_String_6:
        CMP      R10,#+1
        BLT.N    ??Float_To_String_7
        MOVS     R2,#+1
        B.N      ??Float_To_String_8
??Float_To_String_7:
        MOVS     R2,#+0
??Float_To_String_8:
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        ORRS     R1,R2,R1
        CMP      R1,#+0
        BNE.N    ??Float_To_String_4
// 1563         if(dotsize==0)
        CMP      R5,#+0
        BNE.N    ??Float_To_String_9
// 1564         {
// 1565           str[iSize++] = ' ';//小数点是0的时候，用空格替代
        MOVS     R0,#+32
        STRB     R0,[R6, R4]
        ADDS     R6,R6,#+1
        B.N      ??Float_To_String_10
// 1566         }
// 1567         else
// 1568         {
// 1569 	str[iSize++] = '.';//加上小数点
??Float_To_String_9:
        MOVS     R0,#+46
        STRB     R0,[R6, R4]
        ADDS     R6,R6,#+1
// 1570         }
// 1571     //处理小数点前为0的情况。
// 1572 	if(i_predot == 0)
??Float_To_String_10:
        CMP      R11,#+0
        BNE.N    ??Float_To_String_11
// 1573 		str[iSize++] = '0';
        MOVS     R0,#+48
        STRB     R0,[R6, R4]
        ADDS     R6,R6,#+1
        B.N      ??Float_To_String_11
// 1574 	//再将小数点前的数转换为字符串
// 1575 	while(i_predot > 0)
// 1576 	{
// 1577 	 	str[iSize++] = i_predot%10 + '0';//对10取余并变为ASCII码
??Float_To_String_12:
        MOVS     R0,#+10
        UDIV     R1,R11,R0
        MLS      R0,R0,R1,R11
        ADDS     R0,R0,#+48
        STRB     R0,[R6, R4]
        ADDS     R6,R6,#+1
// 1578 	 	i_predot = i_predot / 10;//对10取商
        MOVS     R0,#+10
        UDIV     R11,R11,R0
// 1579 	}
??Float_To_String_11:
        CMP      R11,#+0
        BNE.N    ??Float_To_String_12
// 1580 
// 1581 	if(isnegative == 1)
        UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
        CMP      R8,#+1
        BNE.N    ??Float_To_String_13
// 1582 	str[iSize++] = '-';//如果是负数，则在最后加上负号
        MOVS     R0,#+45
        STRB     R0,[R6, R4]
        ADDS     R6,R6,#+1
// 1583 	str[iSize] = '\0';//加上字符串结束标志
??Float_To_String_13:
        MOVS     R0,#+0
        STRB     R0,[R6, R4]
// 1584 	
// 1585 	p = str + iSize - 1;//将P指针指向字符串结束标志之前
        ADDS     R0,R6,R4
        SUBS     R4,R0,#+1
        B.N      ??Float_To_String_14
// 1586 
// 1587 	for( ;p - s > 0;p--,s++)//将字符串中存储的数调头   
// 1588 	{   
// 1589 		*s^=*p;   
??Float_To_String_15:
        LDRB     R0,[R7, #+0]
        LDRB     R1,[R4, #+0]
        EORS     R0,R1,R0
        STRB     R0,[R7, #+0]
// 1590 		*p^=*s;   
        LDRB     R0,[R4, #+0]
        LDRB     R1,[R7, #+0]
        EORS     R0,R1,R0
        STRB     R0,[R4, #+0]
// 1591 		*s^=*p;   
        LDRB     R0,[R7, #+0]
        LDRB     R1,[R4, #+0]
        EORS     R0,R1,R0
        STRB     R0,[R7, #+0]
// 1592 	}   
        SUBS     R4,R4,#+1
        ADDS     R7,R7,#+1
??Float_To_String_14:
        SUBS     R0,R4,R7
        CMP      R0,#+1
        BGE.N    ??Float_To_String_15
// 1593 	// 返回指针字符串大小 
// 1594 	return iSize;
        MOVS     R0,R6
        POP      {R1,R4-R11,PC}   ;; return
// 1595 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable19:
        DC32     0x43fe1028
// 1596 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1597 void LCD_Write_Float(unsigned char x,unsigned char y,float Number)
// 1598 {
LCD_Write_Float:
        PUSH     {R4,R5,LR}
        SUB      SP,SP,#+20
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R0,R2
// 1599   signed char Temp_Buf[17];
// 1600   Float_To_String(Number,(uint8 *)Temp_Buf,3);
        MOVS     R2,#+3
        ADD      R1,SP,#+0
        BL       Float_To_String
// 1601   LCD_P6x8Str(x,y,(uint8 *)Temp_Buf);
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_P6x8Str
// 1602 }
        ADD      SP,SP,#+20
        POP      {R4,R5,PC}       ;; return
// 1603 
// 1604 
// 1605 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1606 void LCD_Write_Float_Dot(unsigned char x,unsigned char y,float Number,int dotNumber)
// 1607 {
LCD_Write_Float_Dot:
        PUSH     {R4,R5,LR}
        SUB      SP,SP,#+20
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R0,R2
        MOVS     R2,R3
// 1608   signed char Temp_Buf[17];
// 1609   Float_To_String(Number,(uint8 *)Temp_Buf,dotNumber);
        ADD      R1,SP,#+0
        BL       Float_To_String
// 1610   LCD_P6x8Str(x,y,(uint8 *)Temp_Buf);
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_P6x8Str
// 1611 }
        ADD      SP,SP,#+20
        POP      {R4,R5,PC}       ;; return
// 1612 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1613 void LCD_Write_Float_Dot2(unsigned char x,unsigned char y,float Number,int dotNumber)
// 1614 {
LCD_Write_Float_Dot2:
        PUSH     {R4,R5,LR}
        SUB      SP,SP,#+20
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R0,R2
        MOVS     R2,R3
// 1615   signed char Temp_Buf[17];
// 1616   Float_To_String(Number,(uint8 *)Temp_Buf,dotNumber);
        ADD      R1,SP,#+0
        BL       Float_To_String
// 1617   LCD_P8x16Str(x,y,(uint8 *)Temp_Buf);
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_P8x16Str
// 1618 }
        ADD      SP,SP,#+20
        POP      {R4,R5,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1619 void LCD_Write_Float_Dot_Chinese(unsigned char x,unsigned char y,float Number,int dotNumber)
// 1620 {
LCD_Write_Float_Dot_Chinese:
        PUSH     {R4,R5,LR}
        SUB      SP,SP,#+20
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R0,R2
        MOVS     R2,R3
// 1621   signed char Temp_Buf[17];
// 1622   Float_To_String(Number,(uint8 *)Temp_Buf,dotNumber);
        ADD      R1,SP,#+0
        BL       Float_To_String
// 1623   LCD_P8x16Str(x,y,(uint8 *)Temp_Buf);
        ADD      R2,SP,#+0
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_P8x16Str
// 1624 }
        ADD      SP,SP,#+20
        POP      {R4,R5,PC}       ;; return
// 1625 //void Dis_String(unsigned char Position,signed char String[])
// 1626 //{
// 1627 //  switch(Position)
// 1628 //  {
// 1629 //    case 1:OLED_Write_String_7(2,8,String);break;	       
// 1630 //    case 2:OLED_Write_String_7(2,72,String);break;	       
// 1631 //    case 3:OLED_Write_String_7(4,8,String);break;	       
// 1632 //    case 4:OLED_Write_String_7(4,72,String);break;	       
// 1633 //    case 5:OLED_Write_String_7(6,8,String);break;	       
// 1634 //    case 6:OLED_Write_String_7(6,72,String);break;	 
// 1635 //    default:break;      
// 1636 //  }
// 1637 //}
// 1638 /*******************************************************************************
// 1639  函 数 名  : LCD_PaintTSL1401_Bulk
// 1640  功能描述  : 输出二值化图像
// 1641  输入参数  : BYTE y1  起始行
// 1642              BYTE y2  结束行
// 1643              BYTE data[]  二值化图像数组
// 1644  输出参数  : none
// 1645  返 回 值  : none
// 1646 *******************************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1647 void LCD_PaintTSL1401_Bulk(byte y1,byte y2,byte data[])    //块状型
// 1648 {
LCD_PaintTSL1401_Bulk:
        PUSH     {R3-R7,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
// 1649   byte y,x;
// 1650 	
// 1651 	for(y=y1;y<=y2;y++)
        B.N      ??LCD_PaintTSL1401_Bulk_0
??LCD_PaintTSL1401_Bulk_1:
        ADDS     R4,R4,#+1
??LCD_PaintTSL1401_Bulk_0:
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        CMP      R5,R4
        BCC.N    ??LCD_PaintTSL1401_Bulk_2
// 1652 	{
// 1653 		LCD_WrCmd(0xb0+y);
        SUBS     R0,R4,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
// 1654 		LCD_WrCmd(0x01);
        MOVS     R0,#+1
        BL       LCD_WrCmd
// 1655 		LCD_WrCmd(0x10);
        MOVS     R0,#+16
        BL       LCD_WrCmd
// 1656 		for(x=0;x<X_WIDTH;x++)
        MOVS     R7,#+0
        B.N      ??LCD_PaintTSL1401_Bulk_3
// 1657                   if(data[x]==0)
// 1658                     LCD_WrDat(0XFF);
// 1659                 else
// 1660                   LCD_WrDat(0X00);
??LCD_PaintTSL1401_Bulk_4:
        MOVS     R0,#+0
        BL       LCD_WrDat
??LCD_PaintTSL1401_Bulk_5:
        ADDS     R7,R7,#+1
??LCD_PaintTSL1401_Bulk_3:
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        CMP      R7,#+128
        BGE.N    ??LCD_PaintTSL1401_Bulk_1
        UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
        LDRB     R0,[R7, R6]
        CMP      R0,#+0
        BNE.N    ??LCD_PaintTSL1401_Bulk_4
        MOVS     R0,#+255
        BL       LCD_WrDat
        B.N      ??LCD_PaintTSL1401_Bulk_5
// 1661 	}
// 1662 }
??LCD_PaintTSL1401_Bulk_2:
        POP      {R0,R4-R7,PC}    ;; return
// 1663 /*******************************************************************************
// 1664  函 数 名  : void LCD_PaintTSL1401_Line(byte data[],float avange);
// 1665  功能描述  : 输出全值图像
// 1666  输入参数  : BYTE data[]  原值图像数组
// 1667           : FLOAT avange 阈值
// 1668  输出参数  : none
// 1669  返 回 值  : none
// 1670 *******************************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1671 void LCD_PaintTSL1401_Line(byte data[],float avange)    //函数型
// 1672 {
LCD_PaintTSL1401_Line:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
// 1673   LCD_CLS();
        BL       LCD_CLS
// 1674   byte temp;
// 1675 //  byte x,y;
// 1676 //  byte data1;
// 1677 //  for(x=0;x<X_WIDTH-1;x++)   //x轴
// 1678 //  {
// 1679 //    y=(64-(unsigned int)(data[x]*0.05));
// 1680 //    if(y>=64)
// 1681 //      y=64;
// 1682 //    if(y<=0)
// 1683 //      y=0;
// 1684 //    LCD_Set_Pos(x,y ); 
// 1685 //	data1 = 0x01<<(y%8); 	
// 1686 //	LCD_WrCmd(0xb0+(y>>3));
// 1687 //	LCD_WrCmd(((x&0xf0)>>4)|0x10);
// 1688 //	LCD_WrCmd((x&0x0f)|0x00);
// 1689 //	LCD_WrDat(data1);
// 1690 //  }
// 1691   for(int i=0;i<128;i++)
        MOVS     R5,#+0
        B.N      ??LCD_PaintTSL1401_Line_0
// 1692   {
// 1693     temp=data[i];
??LCD_PaintTSL1401_Line_1:
        LDRB     R0,[R5, R4]
// 1694     if(temp>=255)
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+255
        BNE.N    ??LCD_PaintTSL1401_Line_2
// 1695       temp=255ul;
        MOVS     R0,#+255
// 1696     if(data[i]<=0)
??LCD_PaintTSL1401_Line_2:
        LDRB     R1,[R5, R4]
        CMP      R1,#+0
        BNE.N    ??LCD_PaintTSL1401_Line_3
// 1697       temp=0;
        MOVS     R0,#+0
// 1698     temp=(int)(temp*0.165);
??LCD_PaintTSL1401_Line_3:
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       __aeabi_ui2d
        LDR.N    R2,??DataTable20_24  ;; 0x51eb851f
        LDR.N    R3,??DataTable20_25  ;; 0x3fc51eb8
        BL       __aeabi_dmul
        BL       __aeabi_d2iz
// 1699     LCD_PutPixel(i,temp);
        MOVS     R1,R0
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_PutPixel
// 1700   }
        ADDS     R5,R5,#+1
??LCD_PaintTSL1401_Line_0:
        CMP      R5,#+128
        BLT.N    ??LCD_PaintTSL1401_Line_1
// 1701   Delay_temp(200);
        MOVS     R0,#+200
        BL       Delay_temp
// 1702 }
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20:
        DC32     F6x8

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_1:
        DC32     F8X16

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_2:
        DC32     F14x16_Idx

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_3:
        DC32     F14x16

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_4:
        DC32     longqiu96x64

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_5:
        DC32     LIBLOGO60x58

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_6:
        DC32     ?_0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_7:
        DC32     str1

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_8:
        DC32     str2

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_9:
        DC32     str3

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_10:
        DC32     str4

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_11:
        DC32     str5

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_12:
        DC32     str6

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_13:
        DC32     0x43fe1024

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_14:
        DC32     0x43fe1020

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_15:
        DC32     0x43fe101c

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_16:
        DC32     ??Temp_i

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_17:
        DC32     Temp_List

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_18:
        DC32     Change_To_Bit

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_19:
        DC32     0x40360000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_20:
        DC32     0x403a0000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_21:
        DC32     ??Temp_Count

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_22:
        DC32     0x41c80000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_23:
        DC32     0x41200000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_24:
        DC32     0x51eb851f

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable20_25:
        DC32     0x3fc51eb8

        SECTION `.iar_vfe_header`:DATA:NOALLOC:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
        DC32 0

        SECTION __DLIB_PERTHREAD:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION __DLIB_PERTHREAD_init:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        END
// 
//   196 bytes in section .bss
// 1 256 bytes in section .data
// 4 872 bytes in section .rodata
// 4 762 bytes in section .text
// 
// 4 762 bytes of CODE  memory
// 4 872 bytes of CONST memory
// 1 452 bytes of DATA  memory
//
//Errors: none
//Warnings: none
