###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.1.169/W32 for ARM         18/May/2019  16:18:17
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Users\que\Desktop\AAA_xinbiao\smartcar\lib\LPLD\HW\HW_I2C.c
#    Command line =  
#        -f C:\Users\TEMPLA~1.000\AppData\Local\Temp\EW8327.tmp
#        (C:\Users\que\Desktop\AAA_xinbiao\smartcar\lib\LPLD\HW\HW_I2C.c -D
#        LPLD_K60 -lCN
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\RAM\List"
#        -lB
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\RAM\List"
#        -o
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\RAM\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\@@\605110 IAR for
#        ARM 8.30\arm\inc\c\DLib_Config_Normal.h" -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\app\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\CPU\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\common\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\HW\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\DEV\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Ports\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Source\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\option\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\common\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\driver\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\descriptor\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\class\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\Me\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\app\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\app\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\common\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\CPU\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\Jay\"
#        -Ol -I "D:\@@\605110 IAR for ARM 8.30\arm\CMSIS\Core\Include\" -I
#        "D:\@@\605110 IAR for ARM 8.30\arm\CMSIS\DSP\Include\" -D
#        ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\RAM\List\HW_I2C.lst
#    Object file  =  
#        C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\RAM\Obj\HW_I2C.o
#
###############################################################################

C:\Users\que\Desktop\AAA_xinbiao\smartcar\lib\LPLD\HW\HW_I2C.c
      1          /*
      2           * @file HW_I2C.c
      3           * @version 3.02[By LPLD]
      4           * @date 2013-11-22
      5           * @brief I2C底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          
     23          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_EnableIRQ(IRQn_Type)
   \                     __NVIC_EnableIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD409             BMI.N    ??__NVIC_EnableIRQ_0
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0xE   0x408A             LSLS     R2,R2,R1
   \       0x10   0x....'....        LDR.W    R1,??DataTable7  ;; 0xe000e100
   \       0x14   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \       0x16   0x0940             LSRS     R0,R0,#+5
   \       0x18   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \       0x1C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_DisableIRQ(IRQn_Type)
   \                     __NVIC_DisableIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD40D             BMI.N    ??__NVIC_DisableIRQ_0
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0xE   0x408A             LSLS     R2,R2,R1
   \       0x10   0x....'....        LDR.W    R1,??DataTable7_1  ;; 0xe000e180
   \       0x14   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \       0x16   0x0940             LSRS     R0,R0,#+5
   \       0x18   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \       0x1C   0xF3BF 0x8F4F      DSB      SY
   \       0x20   0xF3BF 0x8F6F      ISB      SY
   \                     ??__NVIC_DisableIRQ_0: (+1)
   \       0x24   0x4770             BX       LR               ;; return
     24          #include "HW_I2C.h"
     25          
     26          //用户自定义中断服务函数数组

   \                                 In section .bss, align 4
     27          I2C_ISR_CALLBACK I2C_ISR[2];
   \                     I2C_ISR:
   \        0x0                      DS8 8
     28          
     29          /*
     30           * LPLD_I2C_Init
     31           * I2C通用初始化函数，在该函数中选择I2C通道，选择I2C SCK总线频率，
     32           * 选择I2C SDA 和 I2C SCL的引脚，配置I2C的中断回调函数
     33           * 
     34           * 参数:
     35           *    I2C_InitTypeDef--i2c_init_structure
     36           *                     具体定义见I2C_InitTypeDef
     37           * 输出:
     38           *    0--配置错误
     39           *    1--配置成功
     40           */

   \                                 In section .text, align 2, keep-with-next
     41          uint8 LPLD_I2C_Init(I2C_InitTypeDef i2c_init_structure)
     42          {
   \                     LPLD_I2C_Init: (+1)
   \        0x0   0xE92D 0x47FF      PUSH     {R0-R10,LR}
     43            I2C_Type *i2cx = i2c_init_structure.I2C_I2Cx;
   \        0x4   0x9C00             LDR      R4,[SP, #+0]
     44            uint8 bus_speed = i2c_init_structure.I2C_ICR;
   \        0x6   0xF89D 0x5004      LDRB     R5,[SP, #+4]
     45            PortPinsEnum_Type scl_pin = i2c_init_structure.I2C_SclPin;
   \        0xA   0xF89D 0x6006      LDRB     R6,[SP, #+6]
     46            PortPinsEnum_Type sda_pin = i2c_init_structure.I2C_SdaPin;
   \        0xE   0xF89D 0x7007      LDRB     R7,[SP, #+7]
     47            I2C_ISR_CALLBACK isr_func = i2c_init_structure.I2C_Isr;
   \       0x12   0xF8DD 0x800C      LDR      R8,[SP, #+12]
     48            boolean ode = i2c_init_structure.I2C_OpenDrainEnable;
   \       0x16   0xF89D 0xA008      LDRB     R10,[SP, #+8]
     49            uint8 ode_mask = 0;
   \       0x1A   0xF05F 0x0900      MOVS     R9,#+0
     50          
     51            //参数检查，判断SCL频率
     52            ASSERT( bus_speed <= 0x3F);
   \       0x1E   0x0028             MOVS     R0,R5
   \       0x20   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x22   0x2840             CMP      R0,#+64
   \       0x24   0xDB03             BLT.N    ??LPLD_I2C_Init_0
   \       0x26   0x2134             MOVS     R1,#+52
   \       0x28   0x....             LDR.N    R0,??DataTable7_2
   \       0x2A   0x....'....        BL       assert_failed
     53            
     54            if(ode == TRUE)
   \                     ??LPLD_I2C_Init_0: (+1)
   \       0x2E   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \       0x32   0xF1BA 0x0F01      CMP      R10,#+1
   \       0x36   0xD101             BNE.N    ??LPLD_I2C_Init_1
     55            {
     56              ode_mask = PORT_PCR_ODE_MASK;
   \       0x38   0xF05F 0x0920      MOVS     R9,#+32
     57            }
     58          
     59            if(i2cx == I2C0)
   \                     ??LPLD_I2C_Init_1: (+1)
   \       0x3C   0x....             LDR.N    R0,??DataTable7_3  ;; 0x40066000
   \       0x3E   0x4284             CMP      R4,R0
   \       0x40   0xD158             BNE.N    ??LPLD_I2C_Init_2
     60            {
     61              SIM->SCGC4 |= SIM_SCGC4_I2C0_MASK; //开启I2C0时钟
   \       0x42   0x....             LDR.N    R1,??DataTable7_4  ;; 0x40048034
   \       0x44   0x680A             LDR      R2,[R1, #+0]
   \       0x46   0xF052 0x0240      ORRS     R2,R2,#0x40
   \       0x4A   0x600A             STR      R2,[R1, #+0]
     62          
     63              if(scl_pin == PTD8)
   \       0x4C   0x0031             MOVS     R1,R6
   \       0x4E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x50   0x2964             CMP      R1,#+100
   \       0x52   0xD106             BNE.N    ??LPLD_I2C_Init_3
     64              {
     65                PORTD->PCR[8] = PORT_PCR_MUX(2) | ode_mask;         
   \       0x54   0x4649             MOV      R1,R9
   \       0x56   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x58   0xF451 0x7100      ORRS     R1,R1,#0x200
   \       0x5C   0x....             LDR.N    R2,??DataTable7_5  ;; 0x4004c020
   \       0x5E   0x6011             STR      R1,[R2, #+0]
   \       0x60   0xE00F             B.N      ??LPLD_I2C_Init_4
     66              }
     67              else if(scl_pin == PTB0) 
   \                     ??LPLD_I2C_Init_3: (+1)
   \       0x62   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \       0x64   0x2E20             CMP      R6,#+32
   \       0x66   0xD106             BNE.N    ??LPLD_I2C_Init_5
     68              {
     69                PORTB->PCR[0] = PORT_PCR_MUX(2) | ode_mask;
   \       0x68   0x4649             MOV      R1,R9
   \       0x6A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x6C   0xF451 0x7100      ORRS     R1,R1,#0x200
   \       0x70   0x....             LDR.N    R2,??DataTable7_6  ;; 0x4004a000
   \       0x72   0x6011             STR      R1,[R2, #+0]
   \       0x74   0xE005             B.N      ??LPLD_I2C_Init_4
     70              }
     71              else //scl_pin = PTB2
     72              {
     73                PORTB->PCR[2] = PORT_PCR_MUX(2) | ode_mask;
   \                     ??LPLD_I2C_Init_5: (+1)
   \       0x76   0x4649             MOV      R1,R9
   \       0x78   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x7A   0xF451 0x7100      ORRS     R1,R1,#0x200
   \       0x7E   0x....             LDR.N    R2,??DataTable7_7  ;; 0x4004a008
   \       0x80   0x6011             STR      R1,[R2, #+0]
     74              }
     75          
     76              if(sda_pin == PTD9)
   \                     ??LPLD_I2C_Init_4: (+1)
   \       0x82   0x0039             MOVS     R1,R7
   \       0x84   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x86   0x2965             CMP      R1,#+101
   \       0x88   0xD121             BNE.N    ??LPLD_I2C_Init_6
     77              {
     78                PORTD->PCR[9] = PORT_PCR_MUX(2) | ode_mask;
   \       0x8A   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \       0x8E   0xF459 0x7900      ORRS     R9,R9,#0x200
   \       0x92   0x....             LDR.N    R1,??DataTable7_8  ;; 0x4004c024
   \       0x94   0xF8C1 0x9000      STR      R9,[R1, #+0]
     79              }
     80              else if(sda_pin == PTB1) 
     81              {
     82                PORTB->PCR[1] = PORT_PCR_MUX(2) | ode_mask;
     83              }
     84              else //sda_pin = PTB3
     85              {
     86                PORTB->PCR[3] = PORT_PCR_MUX(2) | ode_mask; 
     87              }
     88            }
     89            else if(i2cx == I2C1)
     90            { 
     91              SIM->SCGC4 |= SIM_SCGC4_I2C1_MASK; //开启I2C1时钟
     92          
     93              if(scl_pin == PTE1)
     94              {
     95                PORTE->PCR[1] = PORT_PCR_MUX(6) | ode_mask;         
     96              }
     97              else //scl_pin = PTC10
     98              {
     99                PORTC->PCR[10] = PORT_PCR_MUX(2) | ode_mask;  
    100              }
    101          
    102              if(sda_pin == PTE0)
    103              {
    104                PORTE->PCR[0] = PORT_PCR_MUX(6) | ode_mask;
    105              }
    106              else //sda_pin = PTC11
    107              {
    108                PORTC->PCR[11] = PORT_PCR_MUX(2) | ode_mask; 
    109              }
    110            }
    111            else
    112              return 0;
    113            
    114            if(i2c_init_structure.I2C_IntEnable == TRUE && isr_func != NULL)
   \                     ??LPLD_I2C_Init_7: (+1)
   \       0x98   0xF89D 0x1005      LDRB     R1,[SP, #+5]
   \       0x9C   0x2901             CMP      R1,#+1
   \       0x9E   0xD10B             BNE.N    ??LPLD_I2C_Init_8
   \       0xA0   0x4641             MOV      R1,R8
   \       0xA2   0x2900             CMP      R1,#+0
   \       0xA4   0xD008             BEQ.N    ??LPLD_I2C_Init_8
    115            {
    116              //产生I2C中断的中断源：
    117              //1,完成1个字节传输时，IICIF置位产生中断;
    118              //2,当Calling Address匹配成功时产生中断，参考K60文档1456页I2Cx_S寄存器IAAS位;
    119              //3,从机模式下当总线仲裁丢失时，IICIF置位产生中断;
    120              //  需要同时写1清除II2Cx_S的ARBL标志位和 I2Cx_S的 IICIF的标志位;
    121              //4,如果SMB寄存器的SHTF2 interrupt使能，当SHTF2 timeout时IICIF置位产生中断;
    122              //  需要同时写1清除I2Cx_SMB的SLTF标志位和 I2Cx_S的 IICIF的标志位;
    123              //5,当SLT寄存器不为0时，SMBus的SCL low timer计数等于SLT的值时IICIF置位产生中断;
    124              //  需要同时写1清除I2Cx_SMB的SHTF2标志位和 I2Cx_S的 IICIF的标志位;
    125              //6,当Wakeup 使能，I2C在停止模式下接收到Wakeup信号，将产生中断.
    126          
    127              i2cx->C1 |= I2C_C1_IICIE_MASK;
   \       0xA6   0x78A1             LDRB     R1,[R4, #+2]
   \       0xA8   0xF051 0x0140      ORRS     R1,R1,#0x40
   \       0xAC   0x70A1             STRB     R1,[R4, #+2]
    128          
    129              if(i2cx == I2C0)
   \       0xAE   0x4284             CMP      R4,R0
   \       0xB0   0xD14D             BNE.N    ??LPLD_I2C_Init_9
    130              {
    131                I2C_ISR[0] = isr_func;
   \       0xB2   0x....             LDR.N    R0,??DataTable7_9
   \       0xB4   0xF8C0 0x8000      STR      R8,[R0, #+0]
    132              }
    133              else if(i2cx == I2C0)
    134              {
    135                I2C_ISR[1] = isr_func;
    136              }
    137              else 
    138                return 0;
    139            }
    140          
    141            //i2cx->C2 |= I2C_C2_HDRS_MASK;      //提高I2C驱动能力
    142            i2cx->F  = I2C_F_ICR(bus_speed)|I2C_F_MULT(0);   //配置I2Cx SCL BusSpeed
   \                     ??LPLD_I2C_Init_8: (+1)
   \       0xB8   0xF015 0x053F      ANDS     R5,R5,#0x3F
   \       0xBC   0x7065             STRB     R5,[R4, #+1]
    143            i2cx->C1 |= I2C_C1_IICEN_MASK;      //使能I2Cx
   \       0xBE   0x78A0             LDRB     R0,[R4, #+2]
   \       0xC0   0xF050 0x0080      ORRS     R0,R0,#0x80
   \       0xC4   0x70A0             STRB     R0,[R4, #+2]
    144            
    145            return 1;
   \       0xC6   0x2001             MOVS     R0,#+1
   \                     ??LPLD_I2C_Init_10: (+1)
   \       0xC8   0xB004             ADD      SP,SP,#+16
   \       0xCA   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   \                     ??LPLD_I2C_Init_6: (+1)
   \       0xCE   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \       0xD0   0x2F21             CMP      R7,#+33
   \       0xD2   0xD107             BNE.N    ??LPLD_I2C_Init_11
   \       0xD4   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \       0xD8   0xF459 0x7900      ORRS     R9,R9,#0x200
   \       0xDC   0x....             LDR.N    R1,??DataTable7_10  ;; 0x4004a004
   \       0xDE   0xF8C1 0x9000      STR      R9,[R1, #+0]
   \       0xE2   0xE7D9             B.N      ??LPLD_I2C_Init_7
   \                     ??LPLD_I2C_Init_11: (+1)
   \       0xE4   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \       0xE8   0xF459 0x7900      ORRS     R9,R9,#0x200
   \       0xEC   0x....             LDR.N    R1,??DataTable7_11  ;; 0x4004a00c
   \       0xEE   0xF8C1 0x9000      STR      R9,[R1, #+0]
   \       0xF2   0xE7D1             B.N      ??LPLD_I2C_Init_7
   \                     ??LPLD_I2C_Init_2: (+1)
   \       0xF4   0x....             LDR.N    R1,??DataTable7_12  ;; 0x40067000
   \       0xF6   0x428C             CMP      R4,R1
   \       0xF8   0xD127             BNE.N    ??LPLD_I2C_Init_12
   \       0xFA   0x....             LDR.N    R1,??DataTable7_4  ;; 0x40048034
   \       0xFC   0x680A             LDR      R2,[R1, #+0]
   \       0xFE   0xF052 0x0280      ORRS     R2,R2,#0x80
   \      0x102   0x600A             STR      R2,[R1, #+0]
   \      0x104   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \      0x106   0x2E7D             CMP      R6,#+125
   \      0x108   0xD106             BNE.N    ??LPLD_I2C_Init_13
   \      0x10A   0x4649             MOV      R1,R9
   \      0x10C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \      0x10E   0xF451 0x61C0      ORRS     R1,R1,#0x600
   \      0x112   0x....             LDR.N    R2,??DataTable7_13  ;; 0x4004d004
   \      0x114   0x6011             STR      R1,[R2, #+0]
   \      0x116   0xE005             B.N      ??LPLD_I2C_Init_14
   \                     ??LPLD_I2C_Init_13: (+1)
   \      0x118   0x4649             MOV      R1,R9
   \      0x11A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \      0x11C   0xF451 0x7100      ORRS     R1,R1,#0x200
   \      0x120   0x....             LDR.N    R2,??DataTable7_14  ;; 0x4004b028
   \      0x122   0x6011             STR      R1,[R2, #+0]
   \                     ??LPLD_I2C_Init_14: (+1)
   \      0x124   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \      0x126   0x2F7C             CMP      R7,#+124
   \      0x128   0xD107             BNE.N    ??LPLD_I2C_Init_15
   \      0x12A   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \      0x12E   0xF459 0x69C0      ORRS     R9,R9,#0x600
   \      0x132   0x....             LDR.N    R1,??DataTable7_15  ;; 0x4004d000
   \      0x134   0xF8C1 0x9000      STR      R9,[R1, #+0]
   \      0x138   0xE7AE             B.N      ??LPLD_I2C_Init_7
   \                     ??LPLD_I2C_Init_15: (+1)
   \      0x13A   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \      0x13E   0xF459 0x7900      ORRS     R9,R9,#0x200
   \      0x142   0x....             LDR.N    R1,??DataTable7_16  ;; 0x4004b02c
   \      0x144   0xF8C1 0x9000      STR      R9,[R1, #+0]
   \      0x148   0xE7A6             B.N      ??LPLD_I2C_Init_7
   \                     ??LPLD_I2C_Init_12: (+1)
   \      0x14A   0x2000             MOVS     R0,#+0
   \      0x14C   0xE7BC             B.N      ??LPLD_I2C_Init_10
   \                     ??LPLD_I2C_Init_9: (+1)
   \      0x14E   0x4284             CMP      R4,R0
   \      0x150   0xD103             BNE.N    ??LPLD_I2C_Init_16
   \      0x152   0x....             LDR.N    R0,??DataTable7_9
   \      0x154   0xF8C0 0x8004      STR      R8,[R0, #+4]
   \      0x158   0xE7AE             B.N      ??LPLD_I2C_Init_8
   \                     ??LPLD_I2C_Init_16: (+1)
   \      0x15A   0x2000             MOVS     R0,#+0
   \      0x15C   0xE7B4             B.N      ??LPLD_I2C_Init_10
    146          }
    147          
    148          /*
    149           * LPLD_I2C_Deinit
    150           * I2C模块反初始化函数，在该函数中关闭I2Cx的外设总线时钟，关闭I2C模块的
    151           * 时钟，禁止外设中断。
    152           *
    153           * 参数:
    154           *    I2C_InitTypeDef--i2c_init_structure
    155           *                     具体定义见I2C_InitTypeDef
    156           *
    157           * 输出:
    158           *    无
    159           *
    160           */  

   \                                 In section .text, align 2, keep-with-next
    161          uint8 LPLD_I2C_Deinit(I2C_InitTypeDef i2c_init_structure)
    162          {
   \                     LPLD_I2C_Deinit: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    163            I2C_Type *i2cx = i2c_init_structure.I2C_I2Cx;
    164          
    165            i2cx->C1 &= ~I2C_C1_IICEN_MASK;      //I2Cx
   \        0x2   0x7881             LDRB     R1,[R0, #+2]
   \        0x4   0xF011 0x017F      ANDS     R1,R1,#0x7F
   \        0x8   0x7081             STRB     R1,[R0, #+2]
    166            if(i2cx == I2C0)
   \        0xA   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40066000
   \        0xC   0x4288             CMP      R0,R1
   \        0xE   0xD109             BNE.N    ??LPLD_I2C_Deinit_0
    167            {
    168              SIM->SCGC4 &= ~SIM_SCGC4_I2C0_MASK; //关闭I2C0时钟
   \       0x10   0x....             LDR.N    R0,??DataTable7_4  ;; 0x40048034
   \       0x12   0x6801             LDR      R1,[R0, #+0]
   \       0x14   0xF031 0x0140      BICS     R1,R1,#0x40
   \       0x18   0x6001             STR      R1,[R0, #+0]
    169              disable_irq((IRQn_Type)I2C0_IRQn);
   \       0x1A   0x2018             MOVS     R0,#+24
   \       0x1C   0x....'....        BL       __NVIC_DisableIRQ
    170            }
    171            else if (i2cx == I2C1)
    172            {
    173              SIM->SCGC4 &= ~SIM_SCGC4_I2C1_MASK; //关闭I2C1时钟
    174              disable_irq((IRQn_Type)I2C1_IRQn);
    175            }
    176            else
    177            {
    178              return 0;
    179            }
    180            return 1;
   \                     ??LPLD_I2C_Deinit_1: (+1)
   \       0x20   0x2001             MOVS     R0,#+1
   \                     ??LPLD_I2C_Deinit_2: (+1)
   \       0x22   0xBD02             POP      {R1,PC}          ;; return
   \                     ??LPLD_I2C_Deinit_0: (+1)
   \       0x24   0x....             LDR.N    R1,??DataTable7_12  ;; 0x40067000
   \       0x26   0x4288             CMP      R0,R1
   \       0x28   0xD108             BNE.N    ??LPLD_I2C_Deinit_3
   \       0x2A   0x....             LDR.N    R0,??DataTable7_4  ;; 0x40048034
   \       0x2C   0x6801             LDR      R1,[R0, #+0]
   \       0x2E   0xF031 0x0180      BICS     R1,R1,#0x80
   \       0x32   0x6001             STR      R1,[R0, #+0]
   \       0x34   0x2019             MOVS     R0,#+25
   \       0x36   0x....'....        BL       __NVIC_DisableIRQ
   \       0x3A   0xE7F1             B.N      ??LPLD_I2C_Deinit_1
   \                     ??LPLD_I2C_Deinit_3: (+1)
   \       0x3C   0x2000             MOVS     R0,#+0
   \       0x3E   0xE7F0             B.N      ??LPLD_I2C_Deinit_2
    181          }
    182          
    183          /*
    184           * LPLD_I2C_EnableIrq
    185           * I2C外设中断使能
    186           *
    187           * 参数:
    188           *    I2C_InitTypeDef--i2c_init_structure
    189           *                     具体定义见I2C_InitTypeDef
    190           *
    191           * 输出:
    192           *    无
    193           *
    194           */  

   \                                 In section .text, align 2, keep-with-next
    195          void LPLD_I2C_EnableIrq(I2C_InitTypeDef i2c_init_structure)
    196          {
   \                     LPLD_I2C_EnableIrq: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    197            I2C_Type *i2cx = i2c_init_structure.I2C_I2Cx; 
    198          
    199            if(i2cx == I2C0)
   \        0x2   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40066000
   \        0x4   0x4288             CMP      R0,R1
   \        0x6   0xD103             BNE.N    ??LPLD_I2C_EnableIrq_0
    200            {
    201              enable_irq((IRQn_Type)I2C0_IRQn);
   \        0x8   0x2018             MOVS     R0,#+24
   \        0xA   0x....'....        BL       __NVIC_EnableIRQ
    202            }
    203            else if (i2cx == I2C1)
    204            {
    205              enable_irq((IRQn_Type)I2C1_IRQn);
    206            }
    207            else
    208            {
    209              return;
    210            }
    211          }
   \                     ??LPLD_I2C_EnableIrq_1: (+1)
   \                     ??LPLD_I2C_EnableIrq_2: (+1)
   \        0xE   0xBD01             POP      {R0,PC}          ;; return
   \                     ??LPLD_I2C_EnableIrq_0: (+1)
   \       0x10   0x....             LDR.N    R1,??DataTable7_12  ;; 0x40067000
   \       0x12   0x4288             CMP      R0,R1
   \       0x14   0xD103             BNE.N    ??LPLD_I2C_EnableIrq_3
   \       0x16   0x2019             MOVS     R0,#+25
   \       0x18   0x....'....        BL       __NVIC_EnableIRQ
   \       0x1C   0xE7F7             B.N      ??LPLD_I2C_EnableIrq_1
   \                     ??LPLD_I2C_EnableIrq_3: (+1)
   \       0x1E   0xE7F6             B.N      ??LPLD_I2C_EnableIrq_2
    212          
    213          /*
    214           * LPLD_I2C_DisableIrq
    215           * 禁止I2C外设中断
    216           *
    217           * 参数:
    218           *    I2C_InitTypeDef--i2c_init_structure
    219           *                     具体定义见I2C_InitTypeDef
    220           *
    221           * 输出:
    222           *    无
    223           *
    224           */  

   \                                 In section .text, align 2, keep-with-next
    225          void LPLD_I2C_DisableIrq(I2C_InitTypeDef i2c_init_structure)
    226          {
   \                     LPLD_I2C_DisableIrq: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    227            I2C_Type *i2cx = i2c_init_structure.I2C_I2Cx;
    228            i2cx->C1 &= ~I2C_C1_IICIE_MASK;
   \        0x2   0x7881             LDRB     R1,[R0, #+2]
   \        0x4   0xF011 0x01BF      ANDS     R1,R1,#0xBF
   \        0x8   0x7081             STRB     R1,[R0, #+2]
    229          
    230            if(i2cx == I2C0)
   \        0xA   0x....             LDR.N    R1,??DataTable7_3  ;; 0x40066000
   \        0xC   0x4288             CMP      R0,R1
   \        0xE   0xD103             BNE.N    ??LPLD_I2C_DisableIrq_0
    231            {
    232              disable_irq((IRQn_Type)I2C0_IRQn);
   \       0x10   0x2018             MOVS     R0,#+24
   \       0x12   0x....'....        BL       __NVIC_DisableIRQ
    233            }
    234            else if (i2cx == I2C1)
    235            {
    236              disable_irq((IRQn_Type)I2C1_IRQn);
    237            }
    238            else
    239            {
    240              return;
    241            }
    242          }
   \                     ??LPLD_I2C_DisableIrq_1: (+1)
   \                     ??LPLD_I2C_DisableIrq_2: (+1)
   \       0x16   0xBD01             POP      {R0,PC}          ;; return
   \                     ??LPLD_I2C_DisableIrq_0: (+1)
   \       0x18   0x....             LDR.N    R1,??DataTable7_12  ;; 0x40067000
   \       0x1A   0x4288             CMP      R0,R1
   \       0x1C   0xD103             BNE.N    ??LPLD_I2C_DisableIrq_3
   \       0x1E   0x2019             MOVS     R0,#+25
   \       0x20   0x....'....        BL       __NVIC_DisableIRQ
   \       0x24   0xE7F7             B.N      ??LPLD_I2C_DisableIrq_1
   \                     ??LPLD_I2C_DisableIrq_3: (+1)
   \       0x26   0xE7F6             B.N      ??LPLD_I2C_DisableIrq_2
    243          
    244          /*
    245           * LPLD_I2C_Start
    246           * 产生I2C开始信号
    247           * 
    248           * 参数:
    249           *    i2cx--选择I2C模块的通道
    250           *      |__I2C0           --I2C通道0
    251           *      |__I2C1           --I2C通道1
    252           * 输出:
    253           *    无
    254           */

   \                                 In section .text, align 2, keep-with-next
    255          void LPLD_I2C_Start(I2C_Type *i2cx)
    256          {
    257            i2cx->C1 |= I2C_C1_TX_MASK ;
   \                     LPLD_I2C_Start: (+1)
   \        0x0   0x7881             LDRB     R1,[R0, #+2]
   \        0x2   0xF051 0x0110      ORRS     R1,R1,#0x10
   \        0x6   0x7081             STRB     R1,[R0, #+2]
    258            i2cx->C1 |= I2C_C1_MST_MASK ;
   \        0x8   0x7881             LDRB     R1,[R0, #+2]
   \        0xA   0xF051 0x0120      ORRS     R1,R1,#0x20
   \        0xE   0x7081             STRB     R1,[R0, #+2]
    259          }
   \       0x10   0x4770             BX       LR               ;; return
    260          
    261          /*
    262           * LPLD_ReStart
    263           * I2C再次产生开始信号
    264           * 
    265           * 参数:
    266           *    i2cx--选择I2C模块的通道
    267           *      |__I2C0           --I2C通道0
    268           *      |__I2C1           --I2C通道1
    269           * 输出:
    270           *    无
    271          */

   \                                 In section .text, align 2, keep-with-next
    272          void LPLD_I2C_ReStart(I2C_Type *i2cx)
    273          {
    274            i2cx->C1 |= I2C_C1_RSTA_MASK ;
   \                     LPLD_I2C_ReStart: (+1)
   \        0x0   0x7881             LDRB     R1,[R0, #+2]
   \        0x2   0xF051 0x0104      ORRS     R1,R1,#0x4
   \        0x6   0x7081             STRB     R1,[R0, #+2]
    275          }
   \        0x8   0x4770             BX       LR               ;; return
    276          
    277          /*
    278           * LPLD_I2C_Stop
    279           * 产生I2C停止信号
    280           * 
    281           * 参数:
    282           *    i2cx--选择I2C模块的通道
    283           *      |__I2C0           --I2C通道0
    284           *      |__I2C1           --I2C通道1
    285           * 输出:
    286           *    无
    287           */

   \                                 In section .text, align 2, keep-with-next
    288          void LPLD_I2C_Stop(I2C_Type *i2cx)
    289          {
    290            i2cx->C1 &=(~I2C_C1_MST_MASK);
   \                     LPLD_I2C_Stop: (+1)
   \        0x0   0x7881             LDRB     R1,[R0, #+2]
   \        0x2   0xF011 0x01DF      ANDS     R1,R1,#0xDF
   \        0x6   0x7081             STRB     R1,[R0, #+2]
    291            i2cx->C1 &=(~I2C_C1_TX_MASK); 
   \        0x8   0x7881             LDRB     R1,[R0, #+2]
   \        0xA   0xF011 0x01EF      ANDS     R1,R1,#0xEF
   \        0xE   0x7081             STRB     R1,[R0, #+2]
    292          }
   \       0x10   0x4770             BX       LR               ;; return
    293          
    294          /*
    295           * LPLD_I2C_WaitAck
    296           * I2C设置等待应答信号，开启则等待，关闭则不等待
    297           * 
    298           * 参数:
    299           *    i2cx--选择I2C模块的通道
    300           *      |__I2C0           --I2C通道0
    301           *      |__I2C1           --I2C通道1
    302           *    is_wait--选择是否等待应答
    303           *      |__I2C_ACK_OFF    --关闭等待Ack
    304           *      |__I2C_ACK_ON     --开启等待Ack，并等待ACK信号
    305           * 输出:
    306           *    无
    307           */

   \                                 In section .text, align 2, keep-with-next
    308          void LPLD_I2C_WaitAck(I2C_Type *i2cx, uint8 is_wait)
    309          {
    310            uint16 time_out;
    311            if(is_wait == I2C_ACK_ON)
   \                     LPLD_I2C_WaitAck: (+1)
   \        0x0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \        0x2   0x2901             CMP      R1,#+1
   \        0x4   0xD005             BEQ.N    ??LPLD_I2C_WaitAck_0
    312            {
    313              while(!(i2cx->S & I2C_S_IICIF_MASK))
    314              {
    315                if(time_out>60000) //如果等待超时，强行退出
    316                  break;
    317                else time_out++;
    318              }
    319              i2cx->S |= I2C_S_IICIF_MASK;
    320            }
    321            else
    322            {
    323              //关闭I2C的ACK
    324              i2cx->C1 |= I2C_C1_TXAK_MASK; 
   \        0x6   0x7881             LDRB     R1,[R0, #+2]
   \        0x8   0xF051 0x0108      ORRS     R1,R1,#0x8
   \        0xC   0x7081             STRB     R1,[R0, #+2]
    325            }
    326          }
   \                     ??LPLD_I2C_WaitAck_1: (+1)
   \        0xE   0x4770             BX       LR               ;; return
   \                     ??LPLD_I2C_WaitAck_2: (+1)
   \       0x10   0x1C52             ADDS     R2,R2,#+1
   \                     ??LPLD_I2C_WaitAck_0: (+1)
   \       0x12   0x78C1             LDRB     R1,[R0, #+3]
   \       0x14   0x0789             LSLS     R1,R1,#+30
   \       0x16   0xD405             BMI.N    ??LPLD_I2C_WaitAck_3
   \       0x18   0x0011             MOVS     R1,R2
   \       0x1A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \       0x1C   0xF64E 0x2361      MOVW     R3,#+60001
   \       0x20   0x4299             CMP      R1,R3
   \       0x22   0xDBF5             BLT.N    ??LPLD_I2C_WaitAck_2
   \                     ??LPLD_I2C_WaitAck_3: (+1)
   \       0x24   0x78C1             LDRB     R1,[R0, #+3]
   \       0x26   0xF051 0x0102      ORRS     R1,R1,#0x2
   \       0x2A   0x70C1             STRB     R1,[R0, #+3]
   \       0x2C   0xE7EF             B.N      ??LPLD_I2C_WaitAck_1
    327          
    328          /*
    329           * LPLD_I2C_Write
    330           * I2C发送一个字节给目的地址设备
    331           * 
    332           * 参数:
    333           *    i2cx--选择I2C模块的通道
    334           *      |__I2C0           --I2C通道0
    335           *      |__I2C1           --I2C通道1
    336           *    data8--要发送的字节数据
    337           * 输出:
    338           *    无
    339           *
    340           */

   \                                 In section .text, align 2, keep-with-next
    341          void LPLD_I2C_WriteByte(I2C_Type *i2cx, uint8 data8)
    342          {
    343            i2cx->D = data8; 
   \                     LPLD_I2C_WriteByte: (+1)
   \        0x0   0x7101             STRB     R1,[R0, #+4]
    344          }
   \        0x2   0x4770             BX       LR               ;; return
    345          
    346          /*
    347           * LPLD_I2C_Read
    348           * I2C从外部设备读一个字节
    349           * 
    350           * 参数:
    351           *    i2cx--选择I2C模块的通道
    352           *      |__I2C0           --I2C通道0
    353           *      |__I2C1           --I2C通道1
    354           * 输出:
    355           *    I2C读取的字节 
    356           */
    357          

   \                                 In section .text, align 2, keep-with-next
    358          uint8 LPLD_I2C_ReadByte(I2C_Type *i2cx)
    359          {
    360            uint8 temp;
    361            temp = i2cx->D; 
   \                     LPLD_I2C_ReadByte: (+1)
   \        0x0   0x7900             LDRB     R0,[R0, #+4]
    362            return temp;
   \        0x2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \        0x4   0x4770             BX       LR               ;; return
    363          }
    364          
    365          /*
    366           * LPLD_I2C_SetMasterWR
    367           * I2C主机读写模式配置
    368           * 
    369           * 参数:
    370           *    IICx--选择I2C模块的通道
    371           *      |__I2C0           --I2C通道0
    372           *      |__I2C1           --I2C通道1
    373           *    mode--读写模式选择
    374           *      |__I2C_MWSR         --主机写
    375           *      |__I2C_MRSW         --主机读
    376           * 输出:
    377           *    无
    378           */

   \                                 In section .text, align 2, keep-with-next
    379          void LPLD_I2C_SetMasterWR(I2C_Type *i2cx, uint8 mode)
    380          {
    381            if(mode==I2C_MRSW) 
   \                     LPLD_I2C_SetMasterWR: (+1)
   \        0x0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \        0x2   0x2901             CMP      R1,#+1
   \        0x4   0xD104             BNE.N    ??LPLD_I2C_SetMasterWR_0
    382              i2cx->C1 &= (~I2C_C1_TX_MASK);
   \        0x6   0x7881             LDRB     R1,[R0, #+2]
   \        0x8   0xF011 0x01EF      ANDS     R1,R1,#0xEF
   \        0xC   0x7081             STRB     R1,[R0, #+2]
   \        0xE   0xE003             B.N      ??LPLD_I2C_SetMasterWR_1
    383            else
    384              i2cx->C1 |= ( I2C_C1_TX_MASK);
   \                     ??LPLD_I2C_SetMasterWR_0: (+1)
   \       0x10   0x7881             LDRB     R1,[R0, #+2]
   \       0x12   0xF051 0x0110      ORRS     R1,R1,#0x10
   \       0x16   0x7081             STRB     R1,[R0, #+2]
    385          }
   \                     ??LPLD_I2C_SetMasterWR_1: (+1)
   \       0x18   0x4770             BX       LR               ;; return
    386          
    387          /*
    388           * LPLD_I2C_StartTrans
    389           * I2C开始传输函数，需要设置外围设备地址和读写模式
    390           * 
    391           * 参数:
    392           *    IICx--选择I2C模块的通道
    393           *      |__I2C0           --I2C通道0
    394           *      |__I2C1           --I2C通道1
    395           *    addr--外围设备地址     
    396           *    mode--读写模式选择
    397           *      |__I2C_MWSR         --主机写
    398           *      |__I2C_MRSW         --主机读
    399           * 输出:
    400           *    无
    401           */

   \                                 In section .text, align 2, keep-with-next
    402          void LPLD_I2C_StartTrans(I2C_Type *i2cx, uint8 addr, uint8 mode)
    403          {
   \                     LPLD_I2C_StartTrans: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
    404            //I2C产生start信号
    405            LPLD_I2C_Start(i2cx);
   \        0x8   0x0020             MOVS     R0,R4
   \        0xA   0x....'....        BL       LPLD_I2C_Start
    406            //将从机地址和主机读写位合成一个字节写入
    407            LPLD_I2C_WriteByte(i2cx, (addr<<1)|mode );
   \        0xE   0xEA56 0x0645      ORRS     R6,R6,R5, LSL #+1
   \       0x12   0x0031             MOVS     R1,R6
   \       0x14   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x16   0x0020             MOVS     R0,R4
   \       0x18   0x....'....        BL       LPLD_I2C_WriteByte
    408          }
   \       0x1C   0xBD70             POP      {R4-R6,PC}       ;; return
    409          
    410          //HW层中断函数，用户无需调用

   \                                 In section .text, align 2, keep-with-next
    411          void I2C0_IRQHandler(void)
    412          {
   \                     I2C0_IRQHandler: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    413          #if (UCOS_II > 0u)
    414            OS_CPU_SR  cpu_sr = 0u;
    415            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    416            OSIntEnter();
    417            OS_EXIT_CRITICAL();
    418          #endif
    419            if(I2C0->S & I2C_S_IICIF_MASK)
   \        0x2   0x....             LDR.N    R4,??DataTable7_17  ;; 0x40066003
   \        0x4   0x7820             LDRB     R0,[R4, #+0]
   \        0x6   0x0780             LSLS     R0,R0,#+30
   \        0x8   0xD51C             BPL.N    ??I2C0_IRQHandler_0
    420            {
    421              I2C_ISR[0]();
   \        0xA   0x....             LDR.N    R0,??DataTable7_9
   \        0xC   0x6800             LDR      R0,[R0, #+0]
   \        0xE   0x4780             BLX      R0
    422              if(I2C0->SMB & I2C_SMB_SLTF_MASK)
   \       0x10   0x....             LDR.N    R0,??DataTable7_18  ;; 0x40066008
   \       0x12   0x7801             LDRB     R1,[R0, #+0]
   \       0x14   0x0709             LSLS     R1,R1,#+28
   \       0x16   0xD503             BPL.N    ??I2C0_IRQHandler_1
    423              {
    424                I2C0->SMB |= I2C_SMB_SLTF_MASK;
   \       0x18   0x7801             LDRB     R1,[R0, #+0]
   \       0x1A   0xF051 0x0108      ORRS     R1,R1,#0x8
   \       0x1E   0x7001             STRB     R1,[R0, #+0]
    425              }
    426              if(I2C0->SMB & I2C_SMB_SHTF2_MASK)
   \                     ??I2C0_IRQHandler_1: (+1)
   \       0x20   0x7801             LDRB     R1,[R0, #+0]
   \       0x22   0x0789             LSLS     R1,R1,#+30
   \       0x24   0xD503             BPL.N    ??I2C0_IRQHandler_2
    427              {
    428                I2C0->SMB |= I2C_SMB_SHTF2_MASK;
   \       0x26   0x7801             LDRB     R1,[R0, #+0]
   \       0x28   0xF051 0x0102      ORRS     R1,R1,#0x2
   \       0x2C   0x7001             STRB     R1,[R0, #+0]
    429              }
    430              if(I2C0->S & I2C_S_ARBL_MASK)
   \                     ??I2C0_IRQHandler_2: (+1)
   \       0x2E   0x7820             LDRB     R0,[R4, #+0]
   \       0x30   0x06C0             LSLS     R0,R0,#+27
   \       0x32   0xD503             BPL.N    ??I2C0_IRQHandler_3
    431              {
    432                I2C0->S |= I2C_S_ARBL_MASK;
   \       0x34   0x7820             LDRB     R0,[R4, #+0]
   \       0x36   0xF050 0x0010      ORRS     R0,R0,#0x10
   \       0x3A   0x7020             STRB     R0,[R4, #+0]
    433              }
    434              I2C0->S |= I2C_S_IICIF_MASK;
   \                     ??I2C0_IRQHandler_3: (+1)
   \       0x3C   0x7820             LDRB     R0,[R4, #+0]
   \       0x3E   0xF050 0x0002      ORRS     R0,R0,#0x2
   \       0x42   0x7020             STRB     R0,[R4, #+0]
    435            }
    436          #if (UCOS_II > 0u)
    437            OSIntExit();          //告知系统此时即将离开中断服务子函数
    438          #endif
    439          }
   \                     ??I2C0_IRQHandler_0: (+1)
   \       0x44   0xBD10             POP      {R4,PC}          ;; return
    440          //HW层中断函数，用户无需调用

   \                                 In section .text, align 2, keep-with-next
    441          void I2C1_IRQHandler(void)
    442          {
   \                     I2C1_IRQHandler: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    443          
    444          #if (UCOS_II > 0u)
    445            OS_CPU_SR  cpu_sr = 0u;
    446            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    447            OSIntEnter();
    448            OS_EXIT_CRITICAL();
    449          #endif
    450          
    451            if(I2C1->S & I2C_S_IICIF_MASK)
   \        0x2   0x....             LDR.N    R4,??DataTable7_19  ;; 0x40067003
   \        0x4   0x7820             LDRB     R0,[R4, #+0]
   \        0x6   0x0780             LSLS     R0,R0,#+30
   \        0x8   0xD51C             BPL.N    ??I2C1_IRQHandler_0
    452            {
    453              I2C_ISR[1]();
   \        0xA   0x....             LDR.N    R0,??DataTable7_9
   \        0xC   0x6840             LDR      R0,[R0, #+4]
   \        0xE   0x4780             BLX      R0
    454              if(I2C1->SMB & I2C_SMB_SLTF_MASK)
   \       0x10   0x....             LDR.N    R0,??DataTable7_20  ;; 0x40067008
   \       0x12   0x7801             LDRB     R1,[R0, #+0]
   \       0x14   0x0709             LSLS     R1,R1,#+28
   \       0x16   0xD503             BPL.N    ??I2C1_IRQHandler_1
    455              {
    456                I2C1->SMB |= I2C_SMB_SLTF_MASK;
   \       0x18   0x7801             LDRB     R1,[R0, #+0]
   \       0x1A   0xF051 0x0108      ORRS     R1,R1,#0x8
   \       0x1E   0x7001             STRB     R1,[R0, #+0]
    457              }
    458              if(I2C1->SMB & I2C_SMB_SHTF2_MASK)
   \                     ??I2C1_IRQHandler_1: (+1)
   \       0x20   0x7801             LDRB     R1,[R0, #+0]
   \       0x22   0x0789             LSLS     R1,R1,#+30
   \       0x24   0xD503             BPL.N    ??I2C1_IRQHandler_2
    459              {
    460                I2C1->SMB |= I2C_SMB_SHTF2_MASK;
   \       0x26   0x7801             LDRB     R1,[R0, #+0]
   \       0x28   0xF051 0x0102      ORRS     R1,R1,#0x2
   \       0x2C   0x7001             STRB     R1,[R0, #+0]
    461              }
    462              if(I2C1->S & I2C_S_ARBL_MASK)
   \                     ??I2C1_IRQHandler_2: (+1)
   \       0x2E   0x7820             LDRB     R0,[R4, #+0]
   \       0x30   0x06C0             LSLS     R0,R0,#+27
   \       0x32   0xD503             BPL.N    ??I2C1_IRQHandler_3
    463              {
    464                I2C1->S |= I2C_S_ARBL_MASK;
   \       0x34   0x7820             LDRB     R0,[R4, #+0]
   \       0x36   0xF050 0x0010      ORRS     R0,R0,#0x10
   \       0x3A   0x7020             STRB     R0,[R4, #+0]
    465              }
    466              I2C1->S |= I2C_S_IICIF_MASK;
   \                     ??I2C1_IRQHandler_3: (+1)
   \       0x3C   0x7820             LDRB     R0,[R4, #+0]
   \       0x3E   0xF050 0x0002      ORRS     R0,R0,#0x2
   \       0x42   0x7020             STRB     R0,[R4, #+0]
    467            }
    468            
    469          #if (UCOS_II > 0u)
    470            OSIntExit();          //告知系统此时即将离开中断服务子函数
    471          #endif
    472          }
   \                     ??I2C1_IRQHandler_0: (+1)
   \       0x44   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \        0x0   0xE000'E100        DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \        0x0   0xE000'E180        DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \        0x0   0x4006'6000        DC32     0x40066000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \        0x0   0x4004'8034        DC32     0x40048034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \        0x0   0x4004'C020        DC32     0x4004c020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \        0x0   0x4004'A000        DC32     0x4004a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \        0x0   0x4004'A008        DC32     0x4004a008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \        0x0   0x4004'C024        DC32     0x4004c024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \        0x0   0x....'....        DC32     I2C_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \        0x0   0x4004'A004        DC32     0x4004a004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \        0x0   0x4004'A00C        DC32     0x4004a00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \        0x0   0x4006'7000        DC32     0x40067000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \        0x0   0x4004'D004        DC32     0x4004d004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_14:
   \        0x0   0x4004'B028        DC32     0x4004b028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_15:
   \        0x0   0x4004'D000        DC32     0x4004d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_16:
   \        0x0   0x4004'B02C        DC32     0x4004b02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_17:
   \        0x0   0x4006'6003        DC32     0x40066003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_18:
   \        0x0   0x4006'6008        DC32     0x40066008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_19:
   \        0x0   0x4006'7003        DC32     0x40067003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_20:
   \        0x0   0x4006'7008        DC32     0x40067008

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x43 0x3A          DC8 43H, 3AH, 5CH, 55H, 73H, 65H, 72H, 73H
   \              0x5C 0x55    
   \              0x73 0x65    
   \              0x72 0x73    
   \        0x8   0x5C 0x71          DC8 5CH, 71H, 75H, 65H, 5CH, 44H, 65H, 73H
   \              0x75 0x65    
   \              0x5C 0x44    
   \              0x65 0x73    
   \       0x10   0x6B 0x74          DC8 6BH, 74H, 6FH, 70H, 5CH, 41H, 41H, 41H
   \              0x6F 0x70    
   \              0x5C 0x41    
   \              0x41 0x41    
   \       0x18   0x5F 0x78          DC8 5FH, 78H, 69H, 6EH, 62H, 69H, 61H, 6FH
   \              0x69 0x6E    
   \              0x62 0x69    
   \              0x61 0x6F    
   \       0x20   0x5C 0x73          DC8 5CH, 73H, 6DH, 61H, 72H, 74H, 63H, 61H
   \              0x6D 0x61    
   \              0x72 0x74    
   \              0x63 0x61    
   \       0x28   0x72 0x5C          DC8 72H, 5CH, 6CH, 69H, 62H, 5CH, 4CH, 50H
   \              0x6C 0x69    
   \              0x62 0x5C    
   \              0x4C 0x50    
   \       0x30   0x4C 0x44          DC8 4CH, 44H, 5CH, 48H, 57H, 5CH, 48H, 57H
   \              0x5C 0x48    
   \              0x57 0x5C    
   \              0x48 0x57    
   \       0x38   0x5F 0x49          DC8 5FH, 49H, 32H, 43H, 2EH, 63H, 0
   \              0x32 0x43    
   \              0x2E 0x63    
   \              0x00         
   \       0x3F   0x00               DC8 0
    473          
    474          
    475          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   I2C0_IRQHandler
         8   -- Indirect call
       8   I2C1_IRQHandler
         8   -- Indirect call
       8   LPLD_I2C_Deinit
         8   -> __NVIC_DisableIRQ
       8   LPLD_I2C_DisableIrq
         8   -> __NVIC_DisableIRQ
       8   LPLD_I2C_EnableIrq
         8   -> __NVIC_EnableIRQ
      48   LPLD_I2C_Init
        48   -> assert_failed
       0   LPLD_I2C_ReStart
       0   LPLD_I2C_ReadByte
       0   LPLD_I2C_SetMasterWR
       0   LPLD_I2C_Start
      16   LPLD_I2C_StartTrans
        16   -> LPLD_I2C_Start
        16   -> LPLD_I2C_WriteByte
       0   LPLD_I2C_Stop
       0   LPLD_I2C_WaitAck
       0   LPLD_I2C_WriteByte
       0   __NVIC_DisableIRQ
       0   __NVIC_EnableIRQ


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_15
       4  ??DataTable7_16
       4  ??DataTable7_17
       4  ??DataTable7_18
       4  ??DataTable7_19
       4  ??DataTable7_2
       4  ??DataTable7_20
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
      64  ?_0
      70  I2C0_IRQHandler
      70  I2C1_IRQHandler
       8  I2C_ISR
      64  LPLD_I2C_Deinit
      40  LPLD_I2C_DisableIrq
      32  LPLD_I2C_EnableIrq
     350  LPLD_I2C_Init
      10  LPLD_I2C_ReStart
       6  LPLD_I2C_ReadByte
      26  LPLD_I2C_SetMasterWR
      18  LPLD_I2C_Start
      30  LPLD_I2C_StartTrans
      18  LPLD_I2C_Stop
      46  LPLD_I2C_WaitAck
       4  LPLD_I2C_WriteByte
      38  __NVIC_DisableIRQ
      30  __NVIC_EnableIRQ

 
   8 bytes in section .bss
  64 bytes in section .rodata
 936 bytes in section .text
 
 936 bytes of CODE  memory
  64 bytes of CONST memory
   8 bytes of DATA  memory

Errors: none
Warnings: 1
