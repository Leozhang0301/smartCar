###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.1.169/W32 for ARM         21/May/2019  22:07:16
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Users\que\Desktop\AAA_xinbiao\xiugai\lib\common\imagehandle.c
#    Command line =  
#        -f C:\Users\TEMPLA~1.000\AppData\Local\Temp\EW2BB4.tmp
#        (C:\Users\que\Desktop\AAA_xinbiao\xiugai\lib\common\imagehandle.c -D
#        LPLD_K60 -lCN
#        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\RAM\List"
#        -lB
#        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\RAM\List"
#        -o
#        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\RAM\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\@@\605110 IAR for
#        ARM 8.30\arm\inc\c\DLib_Config_Normal.h" -I
#        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\app\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\CPU\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\common\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\HW\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\DEV\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Ports\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Source\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\option\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\common\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\driver\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\descriptor\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\class\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\Me\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\app\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\app\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\common\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\CPU\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\Jay\"
#        -Ol -I "D:\@@\605110 IAR for ARM 8.30\arm\CMSIS\Core\Include\" -I
#        "D:\@@\605110 IAR for ARM 8.30\arm\CMSIS\DSP\Include\" -D
#        ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\RAM\List\imagehandle.lst
#    Object file  =  
#        C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\RAM\Obj\imagehandle.o
#
###############################################################################

C:\Users\que\Desktop\AAA_xinbiao\xiugai\lib\common\imagehandle.c
      1          
      2          #include "include.h"

   \                                 In section .bss, align 4
      3          unsigned char img1[IMG_ROWS][IMG_COLS] ={0}; 
   \                     img1:
   \        0x0                      DS8 4800

   \                                 In section .bss, align 4
      4          unsigned char img2[IMG_ROWS][IMG_COLS] ={0}; 
   \                     img2:
   \        0x0                      DS8 4800

   \                                 In section .bss, align 4
      5          unsigned char img3[IMG_ROWS][IMG_COLS] ={0}; 
   \                     img3:
   \        0x0                      DS8 4800

   \                                 In section .bss, align 4
      6          unsigned char img4[IMG_ROWS][IMG_COLS] ={0}; 
   \                     img4:
   \        0x0                      DS8 4800

   \                                 In section .bss, align 4
      7          unsigned char IMG[IMG_ROWS][IMG_COLS] ={0}; 
   \                     IMG:
   \        0x0                      DS8 4800

   \                                 In section .bss, align 4
      8          unsigned char IMG2[IMG_ROWS][IMG_COLS] ={0}; 
   \                     IMG2:
   \        0x0                      DS8 4800

   \                                 In section .bss, align 1
      9          u8 img_num=0;
   \                     img_num:
   \        0x0                      DS8 1

   \                                 In section .bss, align 4
     10          int  deal_flag = 0;
   \                     deal_flag:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
     11          int  display_flag=0;
   \                     display_flag:
   \        0x0                      DS8 4
     12          

   \                                 In section .bss, align 4
     13          int fps_num1_n=0;
   \                     fps_num1_n:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
     14          int fps1_n=0;
   \                     fps1_n:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
     15          int light_flag=0;
   \                     light_flag:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
     16          int light_x=0,light_y=0;
   \                     light_x:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
   \                     light_y:
   \        0x0                      DS8 4
     17          
     18          
     19          void touying();
     20          
     21          
     22          

   \                                 In section .text, align 2, keep-with-next
     23          void IMG_Handle()
     24          {
   \                     IMG_Handle: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
     25              img_num++;
   \        0x2   0x....'....        LDR.W    R0,??DataTable1
   \        0x6   0x7801             LDRB     R1,[R0, #+0]
   \        0x8   0x1C49             ADDS     R1,R1,#+1
   \        0xA   0x7001             STRB     R1,[R0, #+0]
     26              if(img_num==1)
   \        0xC   0x7801             LDRB     R1,[R0, #+0]
   \        0xE   0x2901             CMP      R1,#+1
   \       0x10   0xD116             BNE.N    ??IMG_Handle_0
     27              {
     28                  for(int i=0;i<IMG_ROWS;i++)
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0xE010             B.N      ??IMG_Handle_1
     29                  {
     30                      for(int j=0;j<IMG_COLS;j++)
     31                      {
     32                          img1[i][j] = imgbuff[i][j];
   \                     ??IMG_Handle_2: (+1)
   \       0x16   0x2150             MOVS     R1,#+80
   \       0x18   0x....'....        LDR.W    R3,??DataTable1_1
   \       0x1C   0xFB01 0xF400      MUL      R4,R1,R0
   \       0x20   0x4423             ADD      R3,R3,R4
   \       0x22   0x....'....        LDR.W    R4,??DataTable1_2
   \       0x26   0xFB01 0xF100      MUL      R1,R1,R0
   \       0x2A   0x4421             ADD      R1,R4,R1
   \       0x2C   0x5C89             LDRB     R1,[R1, R2]
   \       0x2E   0x5499             STRB     R1,[R3, R2]
     33                      }
   \       0x30   0x1C52             ADDS     R2,R2,#+1
   \                     ??IMG_Handle_3: (+1)
   \       0x32   0x2A50             CMP      R2,#+80
   \       0x34   0xDBEF             BLT.N    ??IMG_Handle_2
   \       0x36   0x1C40             ADDS     R0,R0,#+1
   \                     ??IMG_Handle_1: (+1)
   \       0x38   0x283C             CMP      R0,#+60
   \       0x3A   0xDA4D             BGE.N    ??IMG_Handle_4
   \       0x3C   0x2200             MOVS     R2,#+0
   \       0x3E   0xE7F8             B.N      ??IMG_Handle_3
     34                  }
     35                  //return;
     36              }
     37              else if(img_num==2)
   \                     ??IMG_Handle_0: (+1)
   \       0x40   0x7801             LDRB     R1,[R0, #+0]
   \       0x42   0x2902             CMP      R1,#+2
   \       0x44   0xD116             BNE.N    ??IMG_Handle_5
     38              {
     39                  for(int i=0;i<IMG_ROWS;i++)
   \       0x46   0x2100             MOVS     R1,#+0
   \       0x48   0xE010             B.N      ??IMG_Handle_6
     40                  {
     41                      for(int j=0;j<IMG_COLS;j++)
     42                      {
     43                          img2[i][j] = imgbuff[i][j];
   \                     ??IMG_Handle_7: (+1)
   \       0x4A   0x2050             MOVS     R0,#+80
   \       0x4C   0x....'....        LDR.W    R3,??DataTable1_3
   \       0x50   0xFB00 0xF401      MUL      R4,R0,R1
   \       0x54   0x4423             ADD      R3,R3,R4
   \       0x56   0x....'....        LDR.W    R4,??DataTable1_2
   \       0x5A   0xFB00 0xF001      MUL      R0,R0,R1
   \       0x5E   0x4420             ADD      R0,R4,R0
   \       0x60   0x5C80             LDRB     R0,[R0, R2]
   \       0x62   0x5498             STRB     R0,[R3, R2]
     44                      }
   \       0x64   0x1C52             ADDS     R2,R2,#+1
   \                     ??IMG_Handle_8: (+1)
   \       0x66   0x2A50             CMP      R2,#+80
   \       0x68   0xDBEF             BLT.N    ??IMG_Handle_7
   \       0x6A   0x1C49             ADDS     R1,R1,#+1
   \                     ??IMG_Handle_6: (+1)
   \       0x6C   0x293C             CMP      R1,#+60
   \       0x6E   0xDA33             BGE.N    ??IMG_Handle_4
   \       0x70   0x2200             MOVS     R2,#+0
   \       0x72   0xE7F8             B.N      ??IMG_Handle_8
     45                  }
     46                 // return;
     47              }
     48               else if(img_num==3)
   \                     ??IMG_Handle_5: (+1)
   \       0x74   0x7801             LDRB     R1,[R0, #+0]
   \       0x76   0x2903             CMP      R1,#+3
   \       0x78   0xD114             BNE.N    ??IMG_Handle_9
     49              {
     50                  for(int i=0;i<IMG_ROWS;i++)
   \       0x7A   0x2100             MOVS     R1,#+0
   \       0x7C   0xE00E             B.N      ??IMG_Handle_10
     51                  {
     52                      for(int j=0;j<IMG_COLS;j++)
     53                      {
     54                          img3[i][j] = imgbuff[i][j];
   \                     ??IMG_Handle_11: (+1)
   \       0x7E   0x2050             MOVS     R0,#+80
   \       0x80   0x....             LDR.N    R3,??DataTable1_4
   \       0x82   0xFB00 0xF401      MUL      R4,R0,R1
   \       0x86   0x4423             ADD      R3,R3,R4
   \       0x88   0x....             LDR.N    R4,??DataTable1_2
   \       0x8A   0xFB00 0xF001      MUL      R0,R0,R1
   \       0x8E   0x4420             ADD      R0,R4,R0
   \       0x90   0x5C80             LDRB     R0,[R0, R2]
   \       0x92   0x5498             STRB     R0,[R3, R2]
     55                      }
   \       0x94   0x1C52             ADDS     R2,R2,#+1
   \                     ??IMG_Handle_12: (+1)
   \       0x96   0x2A50             CMP      R2,#+80
   \       0x98   0xDBF1             BLT.N    ??IMG_Handle_11
   \       0x9A   0x1C49             ADDS     R1,R1,#+1
   \                     ??IMG_Handle_10: (+1)
   \       0x9C   0x293C             CMP      R1,#+60
   \       0x9E   0xDA1B             BGE.N    ??IMG_Handle_4
   \       0xA0   0x2200             MOVS     R2,#+0
   \       0xA2   0xE7F8             B.N      ??IMG_Handle_12
     56                  }
     57                  //img_num=0;
     58                  //deal_flag = 1;
     59              }
     60               else if(img_num==4)
   \                     ??IMG_Handle_9: (+1)
   \       0xA4   0x7801             LDRB     R1,[R0, #+0]
   \       0xA6   0x2904             CMP      R1,#+4
   \       0xA8   0xD116             BNE.N    ??IMG_Handle_4
     61              {
     62                  for(int i=0;i<IMG_ROWS;i++)
   \       0xAA   0x2200             MOVS     R2,#+0
   \       0xAC   0xE00E             B.N      ??IMG_Handle_13
     63                  {
     64                      for(int j=0;j<IMG_ROWS;j++)
     65                      {
     66                          img4[i][j] = imgbuff[i][j];
   \                     ??IMG_Handle_14: (+1)
   \       0xAE   0x2150             MOVS     R1,#+80
   \       0xB0   0x....             LDR.N    R4,??DataTable1_5
   \       0xB2   0xFB01 0xF502      MUL      R5,R1,R2
   \       0xB6   0x442C             ADD      R4,R4,R5
   \       0xB8   0x....             LDR.N    R5,??DataTable1_2
   \       0xBA   0xFB01 0xF102      MUL      R1,R1,R2
   \       0xBE   0x4429             ADD      R1,R5,R1
   \       0xC0   0x5CC9             LDRB     R1,[R1, R3]
   \       0xC2   0x54E1             STRB     R1,[R4, R3]
     67                      }
   \       0xC4   0x1C5B             ADDS     R3,R3,#+1
   \                     ??IMG_Handle_15: (+1)
   \       0xC6   0x2B3C             CMP      R3,#+60
   \       0xC8   0xDBF1             BLT.N    ??IMG_Handle_14
   \       0xCA   0x1C52             ADDS     R2,R2,#+1
   \                     ??IMG_Handle_13: (+1)
   \       0xCC   0x2A3C             CMP      R2,#+60
   \       0xCE   0xDA01             BGE.N    ??IMG_Handle_16
   \       0xD0   0x2300             MOVS     R3,#+0
   \       0xD2   0xE7F8             B.N      ??IMG_Handle_15
     68                  }
     69                  img_num=0;
   \                     ??IMG_Handle_16: (+1)
   \       0xD4   0x2100             MOVS     R1,#+0
   \       0xD6   0x7001             STRB     R1,[R0, #+0]
     70                  //deal_flag = 1;
     71              }
     72             // if(deal_flag)
     73              //{
     74                 for(int i=0;i<IMG_ROWS;i++)
   \                     ??IMG_Handle_4: (+1)
   \       0xD8   0x2100             MOVS     R1,#+0
   \       0xDA   0xE020             B.N      ??IMG_Handle_17
     75                  {
     76                      for(int j=0;j<IMG_COLS;j++)
     77                      {
     78                          IMG[i][j] = img1[i][j]&img2[i][j]&img3[i][j]&img4[i][j];
   \                     ??IMG_Handle_18: (+1)
   \       0xDC   0x2350             MOVS     R3,#+80
   \       0xDE   0x....             LDR.N    R0,??DataTable1_6
   \       0xE0   0xFB03 0xF401      MUL      R4,R3,R1
   \       0xE4   0x4404             ADD      R4,R0,R4
   \       0xE6   0x....             LDR.N    R0,??DataTable1_1
   \       0xE8   0xFB03 0xF501      MUL      R5,R3,R1
   \       0xEC   0x4428             ADD      R0,R0,R5
   \       0xEE   0x5C85             LDRB     R5,[R0, R2]
   \       0xF0   0x....             LDR.N    R0,??DataTable1_3
   \       0xF2   0xFB03 0xF601      MUL      R6,R3,R1
   \       0xF6   0x4430             ADD      R0,R0,R6
   \       0xF8   0x5C80             LDRB     R0,[R0, R2]
   \       0xFA   0x4005             ANDS     R5,R0,R5
   \       0xFC   0x....             LDR.N    R0,??DataTable1_4
   \       0xFE   0xFB03 0xF601      MUL      R6,R3,R1
   \      0x102   0x4430             ADD      R0,R0,R6
   \      0x104   0x5C80             LDRB     R0,[R0, R2]
   \      0x106   0x4005             ANDS     R5,R0,R5
   \      0x108   0x....             LDR.N    R0,??DataTable1_5
   \      0x10A   0xFB03 0xF301      MUL      R3,R3,R1
   \      0x10E   0x4418             ADD      R0,R0,R3
   \      0x110   0x5C80             LDRB     R0,[R0, R2]
   \      0x112   0x4005             ANDS     R5,R0,R5
   \      0x114   0x54A5             STRB     R5,[R4, R2]
     79                      }
   \      0x116   0x1C52             ADDS     R2,R2,#+1
   \                     ??IMG_Handle_19: (+1)
   \      0x118   0x2A50             CMP      R2,#+80
   \      0x11A   0xDBDF             BLT.N    ??IMG_Handle_18
   \      0x11C   0x1C49             ADDS     R1,R1,#+1
   \                     ??IMG_Handle_17: (+1)
   \      0x11E   0x293C             CMP      R1,#+60
   \      0x120   0xDA01             BGE.N    ??IMG_Handle_20
   \      0x122   0x2200             MOVS     R2,#+0
   \      0x124   0xE7F8             B.N      ??IMG_Handle_19
     80                  }
     81                 for(int i=0;i<IMG_ROWS;i++)
   \                     ??IMG_Handle_20: (+1)
   \      0x126   0x2100             MOVS     R1,#+0
   \      0x128   0xE020             B.N      ??IMG_Handle_21
     82                  {
     83                      for(int j=0;j<IMG_COLS;j++)
     84                      {
     85                          IMG2[i][j] = img1[i][j]|img2[i][j]|img3[i][j]|img4[i][j];
   \                     ??IMG_Handle_22: (+1)
   \      0x12A   0x2350             MOVS     R3,#+80
   \      0x12C   0x....             LDR.N    R0,??DataTable1_7
   \      0x12E   0xFB03 0xF401      MUL      R4,R3,R1
   \      0x132   0x4404             ADD      R4,R0,R4
   \      0x134   0x....             LDR.N    R0,??DataTable1_1
   \      0x136   0xFB03 0xF501      MUL      R5,R3,R1
   \      0x13A   0x4428             ADD      R0,R0,R5
   \      0x13C   0x5C85             LDRB     R5,[R0, R2]
   \      0x13E   0x....             LDR.N    R0,??DataTable1_3
   \      0x140   0xFB03 0xF601      MUL      R6,R3,R1
   \      0x144   0x4430             ADD      R0,R0,R6
   \      0x146   0x5C80             LDRB     R0,[R0, R2]
   \      0x148   0x4305             ORRS     R5,R0,R5
   \      0x14A   0x....             LDR.N    R0,??DataTable1_4
   \      0x14C   0xFB03 0xF601      MUL      R6,R3,R1
   \      0x150   0x4430             ADD      R0,R0,R6
   \      0x152   0x5C80             LDRB     R0,[R0, R2]
   \      0x154   0x4305             ORRS     R5,R0,R5
   \      0x156   0x....             LDR.N    R0,??DataTable1_5
   \      0x158   0xFB03 0xF301      MUL      R3,R3,R1
   \      0x15C   0x4418             ADD      R0,R0,R3
   \      0x15E   0x5C80             LDRB     R0,[R0, R2]
   \      0x160   0x4305             ORRS     R5,R0,R5
   \      0x162   0x54A5             STRB     R5,[R4, R2]
     86                      }
   \      0x164   0x1C52             ADDS     R2,R2,#+1
   \                     ??IMG_Handle_23: (+1)
   \      0x166   0x2A50             CMP      R2,#+80
   \      0x168   0xDBDF             BLT.N    ??IMG_Handle_22
   \      0x16A   0x1C49             ADDS     R1,R1,#+1
   \                     ??IMG_Handle_21: (+1)
   \      0x16C   0x293C             CMP      R1,#+60
   \      0x16E   0xDA01             BGE.N    ??IMG_Handle_24
   \      0x170   0x2200             MOVS     R2,#+0
   \      0x172   0xE7F8             B.N      ??IMG_Handle_23
     87                  }
     88                 for(int i=0;i<IMG_ROWS;i++)
   \                     ??IMG_Handle_24: (+1)
   \      0x174   0x2400             MOVS     R4,#+0
   \      0x176   0xE018             B.N      ??IMG_Handle_25
     89                  {
     90                      for(int j=0;j<IMG_COLS;j++)
     91                      {
     92                          imgbuff[i][j] = my_abs( IMG2[i][j]- IMG[i][j]);
   \                     ??IMG_Handle_26: (+1)
   \      0x178   0x2150             MOVS     R1,#+80
   \      0x17A   0x....             LDR.N    R0,??DataTable1_2
   \      0x17C   0xFB01 0xF204      MUL      R2,R1,R4
   \      0x180   0xEB00 0x0602      ADD      R6,R0,R2
   \      0x184   0x....             LDR.N    R0,??DataTable1_7
   \      0x186   0xFB01 0xF204      MUL      R2,R1,R4
   \      0x18A   0x4410             ADD      R0,R0,R2
   \      0x18C   0x5D40             LDRB     R0,[R0, R5]
   \      0x18E   0x....             LDR.N    R2,??DataTable1_6
   \      0x190   0xFB01 0xF104      MUL      R1,R1,R4
   \      0x194   0x4411             ADD      R1,R2,R1
   \      0x196   0x5D49             LDRB     R1,[R1, R5]
   \      0x198   0x1A40             SUBS     R0,R0,R1
   \      0x19A   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \      0x19C   0x....'....        BL       my_abs
   \      0x1A0   0x5570             STRB     R0,[R6, R5]
     93                      }
   \      0x1A2   0x1C6D             ADDS     R5,R5,#+1
   \                     ??IMG_Handle_27: (+1)
   \      0x1A4   0x2D50             CMP      R5,#+80
   \      0x1A6   0xDBE7             BLT.N    ??IMG_Handle_26
   \      0x1A8   0x1C64             ADDS     R4,R4,#+1
   \                     ??IMG_Handle_25: (+1)
   \      0x1AA   0x2C3C             CMP      R4,#+60
   \      0x1AC   0xDA01             BGE.N    ??IMG_Handle_28
   \      0x1AE   0x2500             MOVS     R5,#+0
   \      0x1B0   0xE7F8             B.N      ??IMG_Handle_27
     94                  }
     95                  fps_num1_n++;
   \                     ??IMG_Handle_28: (+1)
   \      0x1B2   0x....             LDR.N    R0,??DataTable1_8
   \      0x1B4   0x6801             LDR      R1,[R0, #+0]
   \      0x1B6   0x1C49             ADDS     R1,R1,#+1
   \      0x1B8   0x6001             STR      R1,[R0, #+0]
     96                  //deal_flag=0;
     97                  display_flag=1;
   \      0x1BA   0x2001             MOVS     R0,#+1
   \      0x1BC   0x....             LDR.N    R1,??DataTable1_9
   \      0x1BE   0x6008             STR      R0,[R1, #+0]
     98                  touying();
   \      0x1C0   0x....'....        BL       touying
     99          }
   \      0x1C4   0xBD70             POP      {R4-R6,PC}       ;; return
    100          

   \                                 In section .text, align 2, keep-with-next
    101          void touying()
    102          {
   \                     touying: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0xB0A3             SUB      SP,SP,#+140
    103             unsigned char rows[IMG_ROWS] ={0};
   \        0x4   0xA814             ADD      R0,SP,#+80
   \        0x6   0x213C             MOVS     R1,#+60
   \        0x8   0x....'....        BL       __aeabi_memclr4
    104             unsigned char cols[IMG_COLS] ={0};
   \        0xC   0x4668             MOV      R0,SP
   \        0xE   0x2150             MOVS     R1,#+80
   \       0x10   0x....'....        BL       __aeabi_memclr4
    105             unsigned char num=0;
   \       0x14   0x2000             MOVS     R0,#+0
    106             
    107             int r1=100,r2=100,c1=100,c2=100;
   \       0x16   0x2164             MOVS     R1,#+100
   \       0x18   0x2264             MOVS     R2,#+100
   \       0x1A   0x2464             MOVS     R4,#+100
   \       0x1C   0x2564             MOVS     R5,#+100
    108             for(int i=0;i<IMG_ROWS;i++)
   \       0x1E   0x2300             MOVS     R3,#+0
   \       0x20   0xE010             B.N      ??touying_0
    109              {
    110                  for(int j=0;j<IMG_COLS;j++)
    111                  {
    112                      if(imgbuff[i][j]>100)
   \                     ??touying_1: (+1)
   \       0x22   0x....             LDR.N    R7,??DataTable1_2
   \       0x24   0xF05F 0x0C50      MOVS     R12,#+80
   \       0x28   0xFB0C 0xFC03      MUL      R12,R12,R3
   \       0x2C   0x4467             ADD      R7,R7,R12
   \       0x2E   0x5DBF             LDRB     R7,[R7, R6]
   \       0x30   0x2F65             CMP      R7,#+101
   \       0x32   0xDB00             BLT.N    ??touying_2
    113                      {
    114                          num++;
   \       0x34   0x1C40             ADDS     R0,R0,#+1
    115                      }
    116                  }
   \                     ??touying_2: (+1)
   \       0x36   0x1C76             ADDS     R6,R6,#+1
   \                     ??touying_3: (+1)
   \       0x38   0x2E50             CMP      R6,#+80
   \       0x3A   0xDBF2             BLT.N    ??touying_1
    117                  rows[i] = num;
   \       0x3C   0xAE14             ADD      R6,SP,#+80
   \       0x3E   0x54F0             STRB     R0,[R6, R3]
    118                  num = 0;
   \       0x40   0x2000             MOVS     R0,#+0
   \       0x42   0x1C5B             ADDS     R3,R3,#+1
   \                     ??touying_0: (+1)
   \       0x44   0x2B3C             CMP      R3,#+60
   \       0x46   0xDA01             BGE.N    ??touying_4
   \       0x48   0x2600             MOVS     R6,#+0
   \       0x4A   0xE7F5             B.N      ??touying_3
    119              }
    120             for(int i=0;i<IMG_COLS;i++)
   \                     ??touying_4: (+1)
   \       0x4C   0x2300             MOVS     R3,#+0
   \       0x4E   0xE010             B.N      ??touying_5
    121              {
    122                  for(int j=0;j<IMG_ROWS;j++)
    123                  {
    124                      if(imgbuff[j][i]>100)
   \                     ??touying_6: (+1)
   \       0x50   0x....             LDR.N    R7,??DataTable1_2
   \       0x52   0xF05F 0x0C50      MOVS     R12,#+80
   \       0x56   0xFB0C 0xFC06      MUL      R12,R12,R6
   \       0x5A   0x4467             ADD      R7,R7,R12
   \       0x5C   0x5CFF             LDRB     R7,[R7, R3]
   \       0x5E   0x2F65             CMP      R7,#+101
   \       0x60   0xDB00             BLT.N    ??touying_7
    125                      {
    126                          num++;
   \       0x62   0x1C40             ADDS     R0,R0,#+1
    127                      }
    128                  }
   \                     ??touying_7: (+1)
   \       0x64   0x1C76             ADDS     R6,R6,#+1
   \                     ??touying_8: (+1)
   \       0x66   0x2E3C             CMP      R6,#+60
   \       0x68   0xDBF2             BLT.N    ??touying_6
    129                  cols[i] = num;
   \       0x6A   0x466E             MOV      R6,SP
   \       0x6C   0x54F0             STRB     R0,[R6, R3]
    130                  num = 0;
   \       0x6E   0x2000             MOVS     R0,#+0
   \       0x70   0x1C5B             ADDS     R3,R3,#+1
   \                     ??touying_5: (+1)
   \       0x72   0x2B50             CMP      R3,#+80
   \       0x74   0xDA01             BGE.N    ??touying_9
   \       0x76   0x2600             MOVS     R6,#+0
   \       0x78   0xE7F5             B.N      ??touying_8
    131              }
    132             for(int i=0;i<IMG_ROWS-1;i++)
   \                     ??touying_9: (+1)
   \       0x7A   0x2300             MOVS     R3,#+0
   \       0x7C   0xE01A             B.N      ??touying_10
    133              {
    134                  if((rows[i]==0)&&(rows[i+1]!=0))
    135                  {
    136                      r1 = i+1;
    137                  }
    138                  if((rows[i]!=0)&&(rows[i+1]==0))
    139                  {
    140                      r2 = i;
    141                  }
    142                  else if((i==(IMG_ROWS-1))&&(rows[i]!=0))
   \                     ??touying_11: (+1)
   \       0x7E   0x2B3B             CMP      R3,#+59
   \       0x80   0xD117             BNE.N    ??touying_12
   \       0x82   0x5CF0             LDRB     R0,[R6, R3]
   \       0x84   0x2800             CMP      R0,#+0
   \       0x86   0xD014             BEQ.N    ??touying_12
    143                  {
    144                      r2 = i;
   \       0x88   0x001A             MOVS     R2,R3
   \       0x8A   0xE012             B.N      ??touying_12
    145                  }
   \                     ??touying_13: (+1)
   \       0x8C   0xAE14             ADD      R6,SP,#+80
   \       0x8E   0x5CF0             LDRB     R0,[R6, R3]
   \       0x90   0x2800             CMP      R0,#+0
   \       0x92   0xD105             BNE.N    ??touying_14
   \       0x94   0xA814             ADD      R0,SP,#+80
   \       0x96   0x4418             ADD      R0,R0,R3
   \       0x98   0x7840             LDRB     R0,[R0, #+1]
   \       0x9A   0x2800             CMP      R0,#+0
   \       0x9C   0xD000             BEQ.N    ??touying_14
   \       0x9E   0x1C59             ADDS     R1,R3,#+1
   \                     ??touying_14: (+1)
   \       0xA0   0x5CF0             LDRB     R0,[R6, R3]
   \       0xA2   0x2800             CMP      R0,#+0
   \       0xA4   0xD0EB             BEQ.N    ??touying_11
   \       0xA6   0xA814             ADD      R0,SP,#+80
   \       0xA8   0x4418             ADD      R0,R0,R3
   \       0xAA   0x7840             LDRB     R0,[R0, #+1]
   \       0xAC   0x2800             CMP      R0,#+0
   \       0xAE   0xD1E6             BNE.N    ??touying_11
   \       0xB0   0x001A             MOVS     R2,R3
    146              }
   \                     ??touying_12: (+1)
   \       0xB2   0x1C5B             ADDS     R3,R3,#+1
   \                     ??touying_10: (+1)
   \       0xB4   0x2B3B             CMP      R3,#+59
   \       0xB6   0xDBE9             BLT.N    ??touying_13
    147             for(int i=0;i<IMG_COLS-2;i++)
   \                     ??touying_15: (+1)
   \       0xB8   0x2300             MOVS     R3,#+0
   \       0xBA   0xE024             B.N      ??touying_16
    148              {
    149                  if((cols[i]==0)&&(cols[i+1]!=0)&&((cols[i+2]!=0)))
    150                  {
    151                      c1 = i+1;
    152                  }
    153                  if(((cols[i]==0)&&(cols[i+1]!=0)&&(cols[i+2]!=0)))
    154                  {
    155                      c2 = i;
    156                  }
    157                  else if((i == (IMG_COLS-1))&&(cols[i]!=0))
   \                     ??touying_17: (+1)
   \       0xBC   0x2B4F             CMP      R3,#+79
   \       0xBE   0xD121             BNE.N    ??touying_18
   \       0xC0   0x5CF0             LDRB     R0,[R6, R3]
   \       0xC2   0x2800             CMP      R0,#+0
   \       0xC4   0xD01E             BEQ.N    ??touying_18
    158                  {
    159                      c2 = i;
   \       0xC6   0x001D             MOVS     R5,R3
   \       0xC8   0xE01C             B.N      ??touying_18
    160                  }
   \                     ??touying_19: (+1)
   \       0xCA   0x466E             MOV      R6,SP
   \       0xCC   0x5CF0             LDRB     R0,[R6, R3]
   \       0xCE   0x2800             CMP      R0,#+0
   \       0xD0   0xD10A             BNE.N    ??touying_20
   \       0xD2   0x4668             MOV      R0,SP
   \       0xD4   0x4418             ADD      R0,R0,R3
   \       0xD6   0x7840             LDRB     R0,[R0, #+1]
   \       0xD8   0x2800             CMP      R0,#+0
   \       0xDA   0xD005             BEQ.N    ??touying_20
   \       0xDC   0x4668             MOV      R0,SP
   \       0xDE   0x4418             ADD      R0,R0,R3
   \       0xE0   0x7880             LDRB     R0,[R0, #+2]
   \       0xE2   0x2800             CMP      R0,#+0
   \       0xE4   0xD000             BEQ.N    ??touying_20
   \       0xE6   0x1C5C             ADDS     R4,R3,#+1
   \                     ??touying_20: (+1)
   \       0xE8   0x5CF0             LDRB     R0,[R6, R3]
   \       0xEA   0x2800             CMP      R0,#+0
   \       0xEC   0xD1E6             BNE.N    ??touying_17
   \       0xEE   0x4668             MOV      R0,SP
   \       0xF0   0x4418             ADD      R0,R0,R3
   \       0xF2   0x7840             LDRB     R0,[R0, #+1]
   \       0xF4   0x2800             CMP      R0,#+0
   \       0xF6   0xD0E1             BEQ.N    ??touying_17
   \       0xF8   0x4668             MOV      R0,SP
   \       0xFA   0x4418             ADD      R0,R0,R3
   \       0xFC   0x7880             LDRB     R0,[R0, #+2]
   \       0xFE   0x2800             CMP      R0,#+0
   \      0x100   0xD0DC             BEQ.N    ??touying_17
   \      0x102   0x001D             MOVS     R5,R3
    161              }
   \                     ??touying_18: (+1)
   \      0x104   0x1C5B             ADDS     R3,R3,#+1
   \                     ??touying_16: (+1)
   \      0x106   0x2B4E             CMP      R3,#+78
   \      0x108   0xDBDF             BLT.N    ??touying_19
    162             if(r1!=100&&r2!=100&&c1!=100&&c2!=100)
   \                     ??touying_21: (+1)
   \      0x10A   0x2964             CMP      R1,#+100
   \      0x10C   0xD032             BEQ.N    ??touying_22
   \      0x10E   0x2A64             CMP      R2,#+100
   \      0x110   0xD030             BEQ.N    ??touying_22
   \      0x112   0x2C64             CMP      R4,#+100
   \      0x114   0xD02E             BEQ.N    ??touying_22
   \      0x116   0x2D64             CMP      R5,#+100
   \      0x118   0xD02C             BEQ.N    ??touying_22
    163             {
    164                  light_flag=1;
   \      0x11A   0x2001             MOVS     R0,#+1
   \      0x11C   0x....             LDR.N    R3,??DataTable1_10
   \      0x11E   0x6018             STR      R0,[R3, #+0]
    165                  if(r1 == r2)
   \      0x120   0x4291             CMP      R1,R2
   \      0x122   0xD102             BNE.N    ??touying_23
    166                  {
    167                    light_x = r1;
   \      0x124   0x....             LDR.N    R0,??DataTable1_11
   \      0x126   0x6001             STR      R1,[R0, #+0]
   \      0x128   0xE009             B.N      ??touying_24
    168                  }
    169                  else
    170                  {
    171                     light_x=(int)(my_abs(r1+r2)/2);
   \                     ??touying_23: (+1)
   \      0x12A   0x1851             ADDS     R1,R2,R1
   \      0x12C   0x0008             MOVS     R0,R1
   \      0x12E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \      0x130   0x....'....        BL       my_abs
   \      0x134   0x2102             MOVS     R1,#+2
   \      0x136   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \      0x13A   0x....             LDR.N    R1,??DataTable1_11
   \      0x13C   0x6008             STR      R0,[R1, #+0]
    172                  }
    173                  if(c1 == c2)
   \                     ??touying_24: (+1)
   \      0x13E   0x42AC             CMP      R4,R5
   \      0x140   0xD102             BNE.N    ??touying_25
    174                  {
    175                    light_y=c1;
   \      0x142   0x....             LDR.N    R0,??DataTable1_12
   \      0x144   0x6004             STR      R4,[R0, #+0]
   \      0x146   0xE01E             B.N      ??touying_26
    176                  }
    177                  else
    178                  {
    179                     light_y=(int)(my_abs(c1+c2)/2);
   \                     ??touying_25: (+1)
   \      0x148   0x1928             ADDS     R0,R5,R4
   \      0x14A   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \      0x14C   0x....'....        BL       my_abs
   \      0x150   0x2102             MOVS     R1,#+2
   \      0x152   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \      0x156   0x....             LDR.N    R1,??DataTable1_12
   \      0x158   0x6008             STR      R0,[R1, #+0]
    180                     LCD_Write_Int(80, 5, c1);
   \      0x15A   0x0022             MOVS     R2,R4
   \      0x15C   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \      0x15E   0x2105             MOVS     R1,#+5
   \      0x160   0x2050             MOVS     R0,#+80
   \      0x162   0x....'....        BL       LCD_Write_Int
    181                     LCD_Write_Int(100, 5, c2);
   \      0x166   0x002A             MOVS     R2,R5
   \      0x168   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \      0x16A   0x2105             MOVS     R1,#+5
   \      0x16C   0x2064             MOVS     R0,#+100
   \      0x16E   0x....'....        BL       LCD_Write_Int
   \      0x172   0xE008             B.N      ??touying_26
    182                  }
    183             }
    184             else
    185             {
    186               light_flag=0;
   \                     ??touying_22: (+1)
   \      0x174   0x2000             MOVS     R0,#+0
   \      0x176   0x....             LDR.N    R1,??DataTable1_10
   \      0x178   0x6008             STR      R0,[R1, #+0]
    187               light_x=0;
   \      0x17A   0x2000             MOVS     R0,#+0
   \      0x17C   0x....             LDR.N    R1,??DataTable1_11
   \      0x17E   0x6008             STR      R0,[R1, #+0]
    188               light_y=0;
   \      0x180   0x2000             MOVS     R0,#+0
   \      0x182   0x....             LDR.N    R1,??DataTable1_12
   \      0x184   0x6008             STR      R0,[R1, #+0]
    189             }
    190          }
   \                     ??touying_26: (+1)
   \      0x186   0xB023             ADD      SP,SP,#+140
   \      0x188   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x....'....        DC32     img_num

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \        0x0   0x....'....        DC32     img1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \        0x0   0x....'....        DC32     imgbuff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \        0x0   0x....'....        DC32     img2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \        0x0   0x....'....        DC32     img3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \        0x0   0x....'....        DC32     img4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \        0x0   0x....'....        DC32     IMG

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \        0x0   0x....'....        DC32     IMG2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \        0x0   0x....'....        DC32     fps_num1_n

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \        0x0   0x....'....        DC32     display_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \        0x0   0x....'....        DC32     light_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \        0x0   0x....'....        DC32     light_x

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_12:
   \        0x0   0x....'....        DC32     light_y

   \                                 In section .rodata, align 4
   \        0x0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x17   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x2E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \        0x0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x17   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x2E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \       0x45   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   IMG_Handle
        16   -> my_abs
        16   -> touying
     160   touying
       160   -> LCD_Write_Int
       160   -> __aeabi_memclr4
       160   -> my_abs


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
      60  ?_0
      80  ?_1
    4800  IMG
    4800  IMG2
     454  IMG_Handle
       4  deal_flag
       4  display_flag
       4  fps1_n
       4  fps_num1_n
    4800  img1
    4800  img2
    4800  img3
    4800  img4
       1  img_num
       4  light_flag
       4  light_x
       4  light_y
     394  touying

 
 28 829 bytes in section .bss
    140 bytes in section .rodata
    900 bytes in section .text
 
    900 bytes of CODE  memory
    140 bytes of CONST memory
 28 829 bytes of DATA  memory

Errors: none
Warnings: 1
