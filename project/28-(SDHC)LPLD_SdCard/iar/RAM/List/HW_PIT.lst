###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.1.169/W32 for ARM         18/May/2019  16:18:20
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Users\que\Desktop\AAA_xinbiao\smartcar\lib\LPLD\HW\HW_PIT.c
#    Command line =  
#        -f C:\Users\TEMPLA~1.000\AppData\Local\Temp\EW8C06.tmp
#        (C:\Users\que\Desktop\AAA_xinbiao\smartcar\lib\LPLD\HW\HW_PIT.c -D
#        LPLD_K60 -lCN
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\RAM\List"
#        -lB
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\RAM\List"
#        -o
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\RAM\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\@@\605110 IAR for
#        ARM 8.30\arm\inc\c\DLib_Config_Normal.h" -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\app\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\CPU\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\common\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\HW\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\DEV\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Ports\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Source\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\option\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\common\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\driver\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\descriptor\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\class\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\Me\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\app\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\app\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\common\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\CPU\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\Jay\"
#        -Ol -I "D:\@@\605110 IAR for ARM 8.30\arm\CMSIS\Core\Include\" -I
#        "D:\@@\605110 IAR for ARM 8.30\arm\CMSIS\DSP\Include\" -D
#        ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\RAM\List\HW_PIT.lst
#    Object file  =  
#        C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\RAM\Obj\HW_PIT.o
#
###############################################################################

C:\Users\que\Desktop\AAA_xinbiao\smartcar\lib\LPLD\HW\HW_PIT.c
      1          /**
      2           * @file HW_PIT.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief PIT底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_EnableIRQ(IRQn_Type)
   \                     __NVIC_EnableIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD408             BMI.N    ??__NVIC_EnableIRQ_0
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0xE   0x408A             LSLS     R2,R2,R1
   \       0x10   0x....             LDR.N    R1,??DataTable9  ;; 0xe000e100
   \       0x12   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \       0x14   0x0940             LSRS     R0,R0,#+5
   \       0x16   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \       0x1A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_DisableIRQ(IRQn_Type)
   \                     __NVIC_DisableIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD40C             BMI.N    ??__NVIC_DisableIRQ_0
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0xE   0x408A             LSLS     R2,R2,R1
   \       0x10   0x....             LDR.N    R1,??DataTable9_1  ;; 0xe000e180
   \       0x12   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \       0x14   0x0940             LSRS     R0,R0,#+5
   \       0x16   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \       0x1A   0xF3BF 0x8F4F      DSB      SY
   \       0x1E   0xF3BF 0x8F6F      ISB      SY
   \                     ??__NVIC_DisableIRQ_0: (+1)
   \       0x22   0x4770             BX       LR               ;; return
     23          #include "HW_PIT.h"
     24          
     25          //用户自定义中断服务函数数组

   \                                 In section .bss, align 4
     26          PIT_ISR_CALLBACK PIT_ISR[4];
   \                     PIT_ISR:
   \        0x0                      DS8 16
     27          
     28          /*
     29           * LPLD_PIT_Init
     30           * PIT通用初始化函数，选择PITx、配置中断周期、中断函数
     31           * 
     32           * 参数:
     33           *    pit_init_structure--PIT初始化结构体，
     34           *                        具体定义见PIT_InitTypeDef
     35           *
     36           * 输出:
     37           *    0--配置错误
     38           *    1--配置成功
     39           */

   \                                 In section .text, align 2, keep-with-next
     40          uint8 LPLD_PIT_Init(PIT_InitTypeDef pit_init_structure)
     41          { 
   \                     LPLD_PIT_Init: (+1)
   \        0x0   0xB40F             PUSH     {R0-R3}
   \        0x2   0xB570             PUSH     {R4-R6,LR}
     42            //计算定时加载值
     43            uint32 ldval = pit_init_structure.PIT_PeriodUs*(g_bus_clock/1000000)
     44                         + pit_init_structure.PIT_PeriodMs*1000*(g_bus_clock/1000000)
     45                         + pit_init_structure.PIT_PeriodS*1000000*(g_bus_clock/1000000);
   \        0x4   0x....             LDR.N    R2,??DataTable9_2
   \        0x6   0x9905             LDR      R1,[SP, #+20]
   \        0x8   0x6810             LDR      R0,[R2, #+0]
   \        0xA   0x....             LDR.N    R3,??DataTable9_3  ;; 0xf4240
   \        0xC   0xFBB0 0xF3F3      UDIV     R3,R0,R3
   \       0x10   0x9C06             LDR      R4,[SP, #+24]
   \       0x12   0x6810             LDR      R0,[R2, #+0]
   \       0x14   0x....             LDR.N    R5,??DataTable9_3  ;; 0xf4240
   \       0x16   0xFBB0 0xF0F5      UDIV     R0,R0,R5
   \       0x1A   0x4344             MULS     R4,R0,R4
   \       0x1C   0xF44F 0x707A      MOV      R0,#+1000
   \       0x20   0x4344             MULS     R4,R0,R4
   \       0x22   0xFB03 0x4101      MLA      R1,R3,R1,R4
   \       0x26   0x9C07             LDR      R4,[SP, #+28]
   \       0x28   0x6810             LDR      R0,[R2, #+0]
   \       0x2A   0x....             LDR.N    R2,??DataTable9_3  ;; 0xf4240
   \       0x2C   0xFBB0 0xF0F2      UDIV     R0,R0,R2
   \       0x30   0x4344             MULS     R4,R0,R4
   \       0x32   0x....             LDR.N    R0,??DataTable9_3  ;; 0xf4240
   \       0x34   0xFB00 0x1404      MLA      R4,R0,R4,R1
     46            PITx pitx = pit_init_structure.PIT_Pitx;
   \       0x38   0xF89D 0x5010      LDRB     R5,[SP, #+16]
     47            PIT_ISR_CALLBACK isr_func = pit_init_structure.PIT_Isr;
   \       0x3C   0x9E08             LDR      R6,[SP, #+32]
     48            
     49            //参数检查
     50            ASSERT( pitx <= PIT3);        //判断模块号
   \       0x3E   0x0028             MOVS     R0,R5
   \       0x40   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x42   0x2804             CMP      R0,#+4
   \       0x44   0xDB03             BLT.N    ??LPLD_PIT_Init_0
   \       0x46   0x2132             MOVS     R1,#+50
   \       0x48   0x....             LDR.N    R0,??DataTable9_4
   \       0x4A   0x....'....        BL       assert_failed
     51            ASSERT( ldval > 0);           //判断时加载值                
   \                     ??LPLD_PIT_Init_0: (+1)
   \       0x4E   0x2C00             CMP      R4,#+0
   \       0x50   0xD103             BNE.N    ??LPLD_PIT_Init_1
   \       0x52   0x2133             MOVS     R1,#+51
   \       0x54   0x....             LDR.N    R0,??DataTable9_4
   \       0x56   0x....'....        BL       assert_failed
     52            
     53            //开启定时模块时钟
     54            SIM->SCGC6 |= SIM_SCGC6_PIT_MASK;
   \                     ??LPLD_PIT_Init_1: (+1)
   \       0x5A   0x....             LDR.N    R0,??DataTable9_5  ;; 0x4004803c
   \       0x5C   0x6801             LDR      R1,[R0, #+0]
   \       0x5E   0xF451 0x0100      ORRS     R1,R1,#0x800000
   \       0x62   0x6001             STR      R1,[R0, #+0]
     55            
     56            // 开启 PIT
     57            PIT->MCR = 0x00;
   \       0x64   0x2000             MOVS     R0,#+0
   \       0x66   0x....             LDR.N    R1,??DataTable9_6  ;; 0x40037000
   \       0x68   0x6008             STR      R0,[R1, #+0]
     58           
     59            if(isr_func != NULL){
   \       0x6A   0x0030             MOVS     R0,R6
   \       0x6C   0x2800             CMP      R0,#+0
   \       0x6E   0xD00B             BEQ.N    ??LPLD_PIT_Init_2
     60              PIT_ISR[pitx] = isr_func;
   \       0x70   0x....             LDR.N    R0,??DataTable9_7
   \       0x72   0x0029             MOVS     R1,R5
   \       0x74   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x76   0xF840 0x6021      STR      R6,[R0, R1, LSL #+2]
     61              //使能中断
     62              PIT->CHANNEL[pitx].TCTRL = PIT_TCTRL_TIE_MASK;
   \       0x7A   0x2002             MOVS     R0,#+2
   \       0x7C   0x....             LDR.N    R1,??DataTable9_8  ;; 0x40037100
   \       0x7E   0x002A             MOVS     R2,R5
   \       0x80   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \       0x82   0x0112             LSLS     R2,R2,#+4
   \       0x84   0x4411             ADD      R1,R1,R2
   \       0x86   0x6088             STR      R0,[R1, #+8]
     63              //在NVIC中使能PIT中断
     64              //enable_irq((IRQn_Type)(PIT0_IRQn + (IRQn_Type)pitx)); 
     65            }
     66            
     67            //period = (period_ns/bus_period_ns)-1
     68            PIT->CHANNEL[pitx].LDVAL = ldval-1;
   \                     ??LPLD_PIT_Init_2: (+1)
   \       0x88   0x....             LDR.N    R0,??DataTable9_8  ;; 0x40037100
   \       0x8A   0x1E64             SUBS     R4,R4,#+1
   \       0x8C   0x0029             MOVS     R1,R5
   \       0x8E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x90   0x0109             LSLS     R1,R1,#+4
   \       0x92   0x5044             STR      R4,[R0, R1]
     69            //使能中断
     70            //PIT->CHANNEL[pitx].TCTRL = PIT_TCTRL_TIE_MASK;
     71            //开始定时
     72            PIT->CHANNEL[pitx].TCTRL |= PIT_TCTRL_TEN_MASK;
   \       0x94   0x0029             MOVS     R1,R5
   \       0x96   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x98   0x0109             LSLS     R1,R1,#+4
   \       0x9A   0x4401             ADD      R1,R0,R1
   \       0x9C   0x6889             LDR      R1,[R1, #+8]
   \       0x9E   0xF051 0x0101      ORRS     R1,R1,#0x1
   \       0xA2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \       0xA4   0x012A             LSLS     R2,R5,#+4
   \       0xA6   0x4410             ADD      R0,R0,R2
   \       0xA8   0x6081             STR      R1,[R0, #+8]
     73            
     74            return 1;
   \       0xAA   0x2001             MOVS     R0,#+1
   \       0xAC   0xBC70             POP      {R4-R6}
   \       0xAE   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
     75          }
     76          
     77          /*
     78           * LPLD_PIT_Deinit
     79           * PIT反初始化函数，关闭选择的PITx
     80           * 
     81           * 参数:
     82           *    pit_init_structure--PIT初始化结构体，
     83           *                        具体定义见PIT_InitTypeDef
     84           *
     85           * 输出:
     86           *    无
     87           */

   \                                 In section .text, align 2, keep-with-next
     88          void LPLD_PIT_Deinit(PIT_InitTypeDef pit_init_structure)
     89          { 
   \                     LPLD_PIT_Deinit: (+1)
   \        0x0   0xB40F             PUSH     {R0-R3}
   \        0x2   0xB510             PUSH     {R4,LR}
     90            PITx pitx = pit_init_structure.PIT_Pitx;
   \        0x4   0xF89D 0x4008      LDRB     R4,[SP, #+8]
     91            
     92            //参数检查
     93            ASSERT( pitx <= PIT3);        //判断模块号              
   \        0x8   0x0020             MOVS     R0,R4
   \        0xA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \        0xC   0x2804             CMP      R0,#+4
   \        0xE   0xDB03             BLT.N    ??LPLD_PIT_Deinit_0
   \       0x10   0x215D             MOVS     R1,#+93
   \       0x12   0x....             LDR.N    R0,??DataTable9_4
   \       0x14   0x....'....        BL       assert_failed
     94          
     95            disable_irq((IRQn_Type)(PIT0_IRQn + (IRQn_Type)pitx)); 
   \                     ??LPLD_PIT_Deinit_0: (+1)
   \       0x18   0xF114 0x0044      ADDS     R0,R4,#+68
   \       0x1C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \       0x1E   0x....'....        BL       __NVIC_DisableIRQ
     96          
     97            //禁用中断\停止定时
     98            PIT->CHANNEL[pitx].TCTRL = 0;
   \       0x22   0x2000             MOVS     R0,#+0
   \       0x24   0x....             LDR.N    R1,??DataTable9_8  ;; 0x40037100
   \       0x26   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0x28   0x0122             LSLS     R2,R4,#+4
   \       0x2A   0x4411             ADD      R1,R1,R2
   \       0x2C   0x6088             STR      R0,[R1, #+8]
     99          }
   \       0x2E   0xBC10             POP      {R4}
   \       0x30   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    100          
    101          /*
    102           * LPLD_PIT_EnableIrq
    103           * 使能PITx中断
    104           * 
    105           * 参数:
    106           *    pit_init_structure--PIT初始化结构体，
    107           *                        具体定义见PIT_InitTypeDef
    108           *
    109           * 输出:
    110           *    无
    111           *
    112           */

   \                                 In section .text, align 2, keep-with-next
    113          void LPLD_PIT_EnableIrq(PIT_InitTypeDef pit_init_structure)
    114          {
   \                     LPLD_PIT_EnableIrq: (+1)
   \        0x0   0xB40F             PUSH     {R0-R3}
   \        0x2   0xB510             PUSH     {R4,LR}
    115            PITx pitx = pit_init_structure.PIT_Pitx;
   \        0x4   0xF89D 0x4008      LDRB     R4,[SP, #+8]
    116            
    117            //参数检查
    118            ASSERT( pitx <= PIT3);                //判断PITx
   \        0x8   0x0020             MOVS     R0,R4
   \        0xA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \        0xC   0x2804             CMP      R0,#+4
   \        0xE   0xDB03             BLT.N    ??LPLD_PIT_EnableIrq_0
   \       0x10   0x2176             MOVS     R1,#+118
   \       0x12   0x....             LDR.N    R0,??DataTable9_4
   \       0x14   0x....'....        BL       assert_failed
    119          
    120            enable_irq((IRQn_Type)(PIT0_IRQn + (IRQn_Type)pitx)); 
   \                     ??LPLD_PIT_EnableIrq_0: (+1)
   \       0x18   0x3444             ADDS     R4,R4,#+68
   \       0x1A   0x0020             MOVS     R0,R4
   \       0x1C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \       0x1E   0x....'....        BL       __NVIC_EnableIRQ
    121          }
   \       0x22   0xBC10             POP      {R4}
   \       0x24   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    122          
    123          /*
    124           * LPLD_PIT_DisableIrq
    125           * 禁用PITx中断
    126           * 
    127           * 参数:
    128           *    pit_init_structure--PIT初始化结构体，
    129           *                        具体定义见PIT_InitTypeDef
    130           *
    131           * 输出:
    132           *    无
    133           *
    134           */

   \                                 In section .text, align 2, keep-with-next
    135          void LPLD_PIT_DisableIrq(PIT_InitTypeDef pit_init_structure)
    136          {
   \                     LPLD_PIT_DisableIrq: (+1)
   \        0x0   0xB40F             PUSH     {R0-R3}
   \        0x2   0xB510             PUSH     {R4,LR}
    137            PITx pitx = pit_init_structure.PIT_Pitx;
   \        0x4   0xF89D 0x4008      LDRB     R4,[SP, #+8]
    138            
    139            //参数检查
    140            ASSERT( pitx <= PIT3);                //判断PITx
   \        0x8   0x0020             MOVS     R0,R4
   \        0xA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \        0xC   0x2804             CMP      R0,#+4
   \        0xE   0xDB03             BLT.N    ??LPLD_PIT_DisableIrq_0
   \       0x10   0x218C             MOVS     R1,#+140
   \       0x12   0x....             LDR.N    R0,??DataTable9_4
   \       0x14   0x....'....        BL       assert_failed
    141            
    142            disable_irq((IRQn_Type)(PIT0_IRQn + (IRQn_Type)pitx));
   \                     ??LPLD_PIT_DisableIrq_0: (+1)
   \       0x18   0x3444             ADDS     R4,R4,#+68
   \       0x1A   0x0020             MOVS     R0,R4
   \       0x1C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \       0x1E   0x....'....        BL       __NVIC_DisableIRQ
    143          }
   \       0x22   0xBC10             POP      {R4}
   \       0x24   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    144          
    145          
    146          /*
    147           * PIT0--PIT3中断处理函数
    148           * 与启动文件startup_K60.s中的中断向量表关联
    149           * 用户无需修改，程序自动进入对应通道中断函数
    150           */
    151          

   \                                 In section .text, align 2, keep-with-next
    152          void PIT0_IRQHandler(void)
    153          {
   \                     PIT0_IRQHandler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    154          #if (UCOS_II > 0u)
    155            OS_CPU_SR  cpu_sr = 0u;
    156            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    157            OSIntEnter();
    158            OS_EXIT_CRITICAL();
    159          #endif
    160            
    161            //调用用户自定义中断服务
    162            PIT_ISR[0]();  
   \        0x2   0x....             LDR.N    R0,??DataTable9_7
   \        0x4   0x6800             LDR      R0,[R0, #+0]
   \        0x6   0x4780             BLX      R0
    163            //清除中断标志位
    164            PIT->CHANNEL[0].TFLG |= PIT_TFLG_TIF_MASK;
   \        0x8   0x....             LDR.N    R0,??DataTable9_9  ;; 0x4003710c
   \        0xA   0x6801             LDR      R1,[R0, #+0]
   \        0xC   0xF051 0x0101      ORRS     R1,R1,#0x1
   \       0x10   0x6001             STR      R1,[R0, #+0]
    165            
    166          #if (UCOS_II > 0u)
    167            OSIntExit();          //告知系统此时即将离开中断服务子函数
    168          #endif
    169          }
   \       0x12   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    170          void PIT1_IRQHandler(void)
    171          {
   \                     PIT1_IRQHandler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    172          #if (UCOS_II > 0u)
    173            OS_CPU_SR  cpu_sr = 0u;
    174            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    175            OSIntEnter();
    176            OS_EXIT_CRITICAL();
    177          #endif
    178            
    179            //调用用户自定义中断服务
    180            PIT_ISR[1]();  
   \        0x2   0x....             LDR.N    R0,??DataTable9_7
   \        0x4   0x6840             LDR      R0,[R0, #+4]
   \        0x6   0x4780             BLX      R0
    181            //清除中断标志位
    182            PIT->CHANNEL[1].TFLG |= PIT_TFLG_TIF_MASK;
   \        0x8   0x....             LDR.N    R0,??DataTable9_10  ;; 0x4003711c
   \        0xA   0x6801             LDR      R1,[R0, #+0]
   \        0xC   0xF051 0x0101      ORRS     R1,R1,#0x1
   \       0x10   0x6001             STR      R1,[R0, #+0]
    183            
    184          #if (UCOS_II > 0u)
    185            OSIntExit();          //告知系统此时即将离开中断服务子函数
    186          #endif
    187          }
   \       0x12   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    188          void PIT2_IRQHandler(void)
    189          {
   \                     PIT2_IRQHandler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    190          #if (UCOS_II > 0u)
    191            OS_CPU_SR  cpu_sr = 0u;
    192            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    193            OSIntEnter();
    194            OS_EXIT_CRITICAL();
    195          #endif
    196            
    197            //调用用户自定义中断服务
    198            PIT_ISR[2]();  
   \        0x2   0x....             LDR.N    R0,??DataTable9_7
   \        0x4   0x6880             LDR      R0,[R0, #+8]
   \        0x6   0x4780             BLX      R0
    199            //清除中断标志位
    200            PIT->CHANNEL[2].TFLG |= PIT_TFLG_TIF_MASK;
   \        0x8   0x....             LDR.N    R0,??DataTable9_11  ;; 0x4003712c
   \        0xA   0x6801             LDR      R1,[R0, #+0]
   \        0xC   0xF051 0x0101      ORRS     R1,R1,#0x1
   \       0x10   0x6001             STR      R1,[R0, #+0]
    201            
    202          #if (UCOS_II > 0u)
    203            OSIntExit();          //告知系统此时即将离开中断服务子函数
    204          #endif
    205          }
   \       0x12   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    206          void PIT3_IRQHandler(void)
    207          {
   \                     PIT3_IRQHandler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    208          #if (UCOS_II > 0u)
    209            OS_CPU_SR  cpu_sr = 0u;
    210            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    211            OSIntEnter();
    212            OS_EXIT_CRITICAL();
    213          #endif
    214            
    215            //调用用户自定义中断服务
    216            PIT_ISR[3]();  
   \        0x2   0x....             LDR.N    R0,??DataTable9_7
   \        0x4   0x68C0             LDR      R0,[R0, #+12]
   \        0x6   0x4780             BLX      R0
    217            //清除中断标志位
    218            PIT->CHANNEL[3].TFLG |= PIT_TFLG_TIF_MASK;
   \        0x8   0x....             LDR.N    R0,??DataTable9_12  ;; 0x4003713c
   \        0xA   0x6801             LDR      R1,[R0, #+0]
   \        0xC   0xF051 0x0101      ORRS     R1,R1,#0x1
   \       0x10   0x6001             STR      R1,[R0, #+0]
    219            
    220          #if (UCOS_II > 0u)
    221            OSIntExit();          //告知系统此时即将离开中断服务子函数
    222          #endif
    223          }
   \       0x12   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \        0x0   0xE000'E100        DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \        0x0   0xE000'E180        DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \        0x0   0x....'....        DC32     g_bus_clock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \        0x0   0x000F'4240        DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \        0x0   0x4004'803C        DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \        0x0   0x4003'7000        DC32     0x40037000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \        0x0   0x....'....        DC32     PIT_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \        0x0   0x4003'7100        DC32     0x40037100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \        0x0   0x4003'710C        DC32     0x4003710c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_10:
   \        0x0   0x4003'711C        DC32     0x4003711c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_11:
   \        0x0   0x4003'712C        DC32     0x4003712c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_12:
   \        0x0   0x4003'713C        DC32     0x4003713c

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x43 0x3A          DC8 43H, 3AH, 5CH, 55H, 73H, 65H, 72H, 73H
   \              0x5C 0x55    
   \              0x73 0x65    
   \              0x72 0x73    
   \        0x8   0x5C 0x71          DC8 5CH, 71H, 75H, 65H, 5CH, 44H, 65H, 73H
   \              0x75 0x65    
   \              0x5C 0x44    
   \              0x65 0x73    
   \       0x10   0x6B 0x74          DC8 6BH, 74H, 6FH, 70H, 5CH, 41H, 41H, 41H
   \              0x6F 0x70    
   \              0x5C 0x41    
   \              0x41 0x41    
   \       0x18   0x5F 0x78          DC8 5FH, 78H, 69H, 6EH, 62H, 69H, 61H, 6FH
   \              0x69 0x6E    
   \              0x62 0x69    
   \              0x61 0x6F    
   \       0x20   0x5C 0x73          DC8 5CH, 73H, 6DH, 61H, 72H, 74H, 63H, 61H
   \              0x6D 0x61    
   \              0x72 0x74    
   \              0x63 0x61    
   \       0x28   0x72 0x5C          DC8 72H, 5CH, 6CH, 69H, 62H, 5CH, 4CH, 50H
   \              0x6C 0x69    
   \              0x62 0x5C    
   \              0x4C 0x50    
   \       0x30   0x4C 0x44          DC8 4CH, 44H, 5CH, 48H, 57H, 5CH, 48H, 57H
   \              0x5C 0x48    
   \              0x57 0x5C    
   \              0x48 0x57    
   \       0x38   0x5F 0x50          DC8 5FH, 50H, 49H, 54H, 2EH, 63H, 0
   \              0x49 0x54    
   \              0x2E 0x63    
   \              0x00         
   \       0x3F   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   LPLD_PIT_Deinit
        24   -> __NVIC_DisableIRQ
        24   -> assert_failed
      24   LPLD_PIT_DisableIrq
        24   -> __NVIC_DisableIRQ
        24   -> assert_failed
      24   LPLD_PIT_EnableIrq
        24   -> __NVIC_EnableIRQ
        24   -> assert_failed
      32   LPLD_PIT_Init
        32   -> assert_failed
       8   PIT0_IRQHandler
         8   -- Indirect call
       8   PIT1_IRQHandler
         8   -- Indirect call
       8   PIT2_IRQHandler
         8   -- Indirect call
       8   PIT3_IRQHandler
         8   -- Indirect call
       0   __NVIC_DisableIRQ
       0   __NVIC_EnableIRQ


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_10
       4  ??DataTable9_11
       4  ??DataTable9_12
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
      64  ?_0
      52  LPLD_PIT_Deinit
      40  LPLD_PIT_DisableIrq
      40  LPLD_PIT_EnableIrq
     178  LPLD_PIT_Init
      20  PIT0_IRQHandler
      20  PIT1_IRQHandler
      20  PIT2_IRQHandler
      20  PIT3_IRQHandler
      16  PIT_ISR
      36  __NVIC_DisableIRQ
      28  __NVIC_EnableIRQ

 
  16 bytes in section .bss
  64 bytes in section .rodata
 506 bytes in section .text
 
 506 bytes of CODE  memory
  64 bytes of CONST memory
  16 bytes of DATA  memory

Errors: none
Warnings: 1
