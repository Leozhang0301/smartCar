///////////////////////////////////////////////////////////////////////////////
//
// IAR ANSI C/C++ Compiler V8.32.1.169/W32 for ARM        21/May/2019  22:07:19
// Copyright 1999-2018 IAR Systems AB.
//
//    Cpu mode     =  
//    Endian       =  little
//    Source file  =  C:\Users\que\Desktop\AAA_xinbiao\xiugai\lib\Jay\OLED.c
//    Command line =  
//        -f C:\Users\TEMPLA~1.000\AppData\Local\Temp\EW430B.tmp
//        (C:\Users\que\Desktop\AAA_xinbiao\xiugai\lib\Jay\OLED.c -D LPLD_K60
//        -lCN
//        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\RAM\List"
//        -lB
//        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\RAM\List"
//        -o
//        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\RAM\Obj"
//        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
//        --no_clustering --no_scheduling --debug --endian=little
//        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\@@\605110 IAR for
//        ARM 8.30\arm\inc\c\DLib_Config_Normal.h" -I
//        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\app\"
//        -I
//        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\CPU\"
//        -I
//        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\common\"
//        -I
//        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\"
//        -I
//        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\HW\"
//        -I
//        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\DEV\"
//        -I
//        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Ports\"
//        -I
//        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Source\"
//        -I
//        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\"
//        -I
//        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\option\"
//        -I
//        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\common\"
//        -I
//        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\driver\"
//        -I
//        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\descriptor\"
//        -I
//        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\class\"
//        -I
//        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\Me\"
//        -I
//        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\app\"
//        -I
//        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\app\"
//        -I
//        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\"
//        -I
//        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\common\"
//        -I
//        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\CPU\"
//        -I
//        "C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\Jay\"
//        -Ol -I "D:\@@\605110 IAR for ARM 8.30\arm\CMSIS\Core\Include\" -I
//        "D:\@@\605110 IAR for ARM 8.30\arm\CMSIS\DSP\Include\" -D
//        ARM_MATH_CM4)
//    Locale       =  C
//    List file    =  
//        C:\Users\que\Desktop\AAA_xinbiao\xiugai\project\28-(SDHC)LPLD_SdCard\iar\RAM\List\OLED.s
//
///////////////////////////////////////////////////////////////////////////////

        #define SHT_PROGBITS 0x1

        EXTERN LPLD_GPIO_Init
        EXTERN __aeabi_cfcmple
        EXTERN __aeabi_d2iz
        EXTERN __aeabi_dadd
        EXTERN __aeabi_ddiv
        EXTERN __aeabi_dmul
        EXTERN __aeabi_f2d
        EXTERN __aeabi_f2iz
        EXTERN __aeabi_f2uiz
        EXTERN __aeabi_fmul
        EXTERN __aeabi_fsub
        EXTERN __aeabi_i2f
        EXTERN __aeabi_memcpy4
        EXTERN __aeabi_ui2f

        PUBLIC Change_To_Bit
        PUBLIC Delay_temp
        PUBLIC Draw_BMP
        PUBLIC F14x16
        PUBLIC F14x16_Idx
        PUBLIC F6x8
        PUBLIC F8X16
        PUBLIC Float_To_String
        PUBLIC LCD_CLS
        PUBLIC LCD_DLY_ms
        PUBLIC LCD_Fill
        PUBLIC LCD_Fill_Line
        PUBLIC LCD_Init
        PUBLIC LCD_P14x16Str
        PUBLIC LCD_P6x8Str
        PUBLIC LCD_P8x16Str
        PUBLIC LCD_Print
        PUBLIC LCD_PutPixel
        PUBLIC LCD_Set_Pos
        PUBLIC LCD_WrCmd
        PUBLIC LCD_WrDat
        PUBLIC LCD_Write_Float
        PUBLIC LCD_Write_Float_Dot
        PUBLIC LCD_Write_Float_Dot_Chinese
        PUBLIC LCD_Write_Int
        PUBLIC LED_PrintImage
        PUBLIC LIBLOGO60x58
        PUBLIC List_Move
        PUBLIC List_Paint
        PUBLIC OLED_Write_Data
        PUBLIC Paint_Angle
        PUBLIC Paint_List
        PUBLIC SetAddressingMode
        PUBLIC SetColumnAddress
        PUBLIC SetContrastControl
        PUBLIC SetPageAddress
        PUBLIC SetStartColumn
        PUBLIC SetStartLine
        PUBLIC SetStartPage
        PUBLIC Set_Charge_Pump
        PUBLIC Set_Common_Config
        PUBLIC Set_Common_Remap
        PUBLIC Set_Display_Clock
        PUBLIC Set_Display_Offset
        PUBLIC Set_Display_On_Off
        PUBLIC Set_Entire_Display
        PUBLIC Set_Inverse_Display
        PUBLIC Set_Multiplex_Ratio
        PUBLIC Set_NOP
        PUBLIC Set_Preint8ge_Period
        PUBLIC Set_Segment_Remap
        PUBLIC Set_VCOMH
        PUBLIC Temp_List
        PUBLIC adjust
        PUBLIC gpio_init_struct_OLED
        PUBLIC init_gpio_OLED
        PUBLIC longqiu96x64
        PUBLIC str1
        PUBLIC str2
        PUBLIC str3
        PUBLIC str4
        PUBLIC str5
        PUBLIC str6

// C:\Users\que\Desktop\AAA_xinbiao\xiugai\lib\Jay\OLED.c
//    1 /*
//    2  *  
//    3  *  
//    4  *  @JayLin林杰 @厦门大学嘉庚学院 @博学队
//    5  */
//    6 #include  "common.h"
//    7 #include "include.h"
//    8 
//    9 #define HIGH  1u
//   10 #define LOW   0u
//   11 
//   12 #define LED_IMAGE_WHITE       1
//   13 #define LED_IMAGE_BLACK       0
//   14 

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
        DATA
//   15 GPIO_InitTypeDef gpio_init_struct_OLED;
gpio_init_struct_OLED:
        DS8 20

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//   16 void init_gpio_OLED()
//   17 {
init_gpio_OLED:
        PUSH     {R3-R5,LR}
//   18  /*
//   19   *配置 PTC16~PTC19 为GPIO功能,输出,高电平，禁用中断
//   20   */
//   21   gpio_init_struct_OLED.GPIO_PTx = PTC;
        LDR.W    R4,??DataTable12
        LDR.W    R5,??DataTable12_1  ;; 0x400ff080
        STR      R5,[R4, #+0]
//   22   gpio_init_struct_OLED.GPIO_Pins = GPIO_Pin7|GPIO_Pin8;
        MOV      R0,#+384
        STR      R0,[R4, #+4]
//   23   gpio_init_struct_OLED.GPIO_Dir = DIR_OUTPUT;
        MOVS     R0,#+1
        STRB     R0,[R4, #+12]
//   24   gpio_init_struct_OLED.GPIO_Output = OUTPUT_H;
        MOVS     R0,#+1
        STRB     R0,[R4, #+13]
//   25   gpio_init_struct_OLED.GPIO_PinControl = IRQC_DIS;
        MOVS     R0,#+0
        STR      R0,[R4, #+8]
//   26   LPLD_GPIO_Init(gpio_init_struct_OLED);
        MOVS     R1,R4
        SUB      SP,SP,#+16
        MOV      R0,SP
        MOVS     R2,#+20
        BL       __aeabi_memcpy4
        POP      {R0-R3}
        BL       LPLD_GPIO_Init
//   27   
//   28   gpio_init_struct_OLED.GPIO_PTx = PTC;
        STR      R5,[R4, #+0]
//   29   gpio_init_struct_OLED.GPIO_Pins = GPIO_Pin9|GPIO_Pin10;
        MOV      R0,#+1536
        STR      R0,[R4, #+4]
//   30   LPLD_GPIO_Init(gpio_init_struct_OLED);
        MOVS     R1,R4
        SUB      SP,SP,#+16
        MOV      R0,SP
        MOVS     R2,#+20
        BL       __aeabi_memcpy4
        POP      {R0-R3}
        BL       LPLD_GPIO_Init
//   31 }
        POP      {R0,R4,R5,PC}    ;; return
//   32 
//   33 //void init_gpio_OLED()
//   34 //{
//   35 // /*
//   36 //  *配置 PTC16~PTC19 为GPIO功能,输出,高电平，禁用中断
//   37 //  */
//   38 //  gpio_init_struct_OLED.GPIO_PTx = PTC;
//   39 //  gpio_init_struct_OLED.GPIO_Pins = GPIO_Pin10|GPIO_Pin9;
//   40 //  gpio_init_struct_OLED.GPIO_Dir = DIR_OUTPUT;
//   41 //  gpio_init_struct_OLED.GPIO_Output = OUTPUT_H;
//   42 //  gpio_init_struct_OLED.GPIO_PinControl = IRQC_DIS;
//   43 //  LPLD_GPIO_Init(gpio_init_struct_OLED);
//   44 //  
//   45 //  gpio_init_struct_OLED.GPIO_PTx = PTC;
//   46 //  gpio_init_struct_OLED.GPIO_Pins = GPIO_Pin8|GPIO_Pin7;
//   47 //  LPLD_GPIO_Init(gpio_init_struct_OLED);
//   48 //}
//   49 
//   50 //======================================

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
        DATA
//   51 const uint8 F6x8[][6] =
F6x8:
        DATA8
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 7, 0, 7, 0, 0, 20, 127
        DC8 20, 127, 20, 0, 36, 42, 127, 42, 18, 0, 98, 100, 8, 19, 35, 0, 54
        DC8 73, 85, 34, 80, 0, 0, 5, 3, 0, 0, 0, 0, 28, 34, 65, 0, 0, 0, 65, 34
        DC8 28, 0, 0, 20, 8, 62, 8, 20, 0, 8, 8, 62, 8, 8, 0, 0, 0, 160, 96, 0
        DC8 0, 8, 8, 8, 8, 8, 0, 0, 96, 96, 0, 0, 0, 32, 16, 8, 4, 2, 0, 62, 81
        DC8 73, 69, 62, 0, 0, 66, 127, 64, 0, 0, 66, 97, 81, 73, 70, 0, 33, 65
        DC8 69, 75, 49, 0, 24, 20, 18, 127, 16, 0, 39, 69, 69, 69, 57, 0, 60
        DC8 74, 73, 73, 48, 0, 1, 113, 9, 5, 3, 0, 54, 73, 73, 73, 54, 0, 6, 73
        DC8 73, 41, 30, 0, 0, 54, 54, 0, 0, 0, 0, 86, 54, 0, 0, 0, 8, 20, 34
        DC8 65, 0, 0, 20, 20, 20, 20, 20, 0, 0, 65, 34, 20, 8, 0, 2, 1, 81, 9
        DC8 6, 0, 50, 73, 89, 81, 62, 0, 124, 18, 17, 18, 124, 0, 127, 73, 73
        DC8 73, 54, 0, 62, 65, 65, 65, 34, 0, 127, 65, 65, 34, 28, 0, 127, 73
        DC8 73, 73, 65, 0, 127, 9, 9, 9, 1, 0, 62, 65, 73, 73, 122, 0, 127, 8
        DC8 8, 8, 127, 0, 0, 65, 127, 65, 0, 0, 32, 64, 65, 63, 1, 0, 127, 8
        DC8 20, 34, 65, 0, 127, 64, 64, 64, 64, 0, 127, 2, 12, 2, 127, 0, 127
        DC8 4, 8, 16, 127, 0, 62, 65, 65, 65, 62, 0, 127, 9, 9, 9, 6, 0, 62, 65
        DC8 81, 33, 94, 0, 127, 9, 25, 41, 70, 0, 70, 73, 73, 73, 49, 0, 1, 1
        DC8 127, 1, 1, 0, 63, 64, 64, 64, 63, 0, 31, 32, 64, 32, 31, 0, 63, 64
        DC8 56, 64, 63, 0, 99, 20, 8, 20, 99, 0, 7, 8, 112, 8, 7, 0, 97, 81, 73
        DC8 69, 67, 0, 0, 127, 65, 65, 0, 0, 85, 42, 85, 42, 85, 0, 0, 65, 65
        DC8 127, 0, 0, 4, 2, 1, 2, 4, 0, 64, 64, 64, 64, 64, 0, 0, 1, 2, 4, 0
        DC8 0, 32, 84, 84, 84, 120, 0, 127, 72, 68, 68, 56, 0, 56, 68, 68, 68
        DC8 32, 0, 56, 68, 68, 72, 127, 0, 56, 84, 84, 84, 24, 0, 8, 126, 9, 1
        DC8 2, 0, 24, 164, 164, 164, 124, 0, 127, 8, 4, 4, 120, 0, 0, 68, 125
        DC8 64, 0, 0, 64, 128, 132, 125, 0, 0, 127, 16, 40, 68, 0, 0, 0, 65
        DC8 127, 64, 0, 0, 124, 4, 24, 4, 120, 0, 124, 8, 4, 4, 120, 0, 56, 68
        DC8 68, 68, 56, 0, 252, 36, 36, 36, 24, 0, 24, 36, 36, 24, 252, 0, 124
        DC8 8, 4, 4, 8, 0, 72, 84, 84, 84, 32, 0, 4, 63, 68, 64, 32, 0, 60, 64
        DC8 64, 32, 124, 0, 28, 32, 64, 32, 28, 0, 60, 64, 48, 64, 60, 0, 68
        DC8 40, 16, 40, 68, 0, 28, 160, 160, 160, 124, 0, 68, 100, 84, 76, 68
        DC8 20, 20, 20, 20, 20, 20
//   52 {
//   53     { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
//   54     { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
//   55     { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
//   56     { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
//   57     { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
//   58     { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
//   59     { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
//   60     { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
//   61     { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
//   62     { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
//   63     { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
//   64     { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
//   65     { 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
//   66     { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
//   67     { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
//   68     { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
//   69     { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
//   70     { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
//   71     { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
//   72     { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
//   73     { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
//   74     { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
//   75     { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
//   76     { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
//   77     { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
//   78     { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
//   79     { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
//   80     { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
//   81     { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
//   82     { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
//   83     { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
//   84     { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
//   85     { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
//   86     { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
//   87     { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
//   88     { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
//   89     { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
//   90     { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
//   91     { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
//   92     { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
//   93     { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
//   94     { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
//   95     { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
//   96     { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
//   97     { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
//   98     { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
//   99     { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
//  100     { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
//  101     { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
//  102     { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
//  103     { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
//  104     { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
//  105     { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
//  106     { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
//  107     { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
//  108     { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
//  109     { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
//  110     { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
//  111     { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
//  112     { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
//  113     { 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
//  114     { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
//  115     { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
//  116     { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
//  117     { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
//  118     { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
//  119     { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
//  120     { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
//  121     { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
//  122     { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
//  123     { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
//  124     { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
//  125     { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
//  126     { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
//  127     { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
//  128     { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
//  129     { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
//  130     { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
//  131     { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
//  132     { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
//  133     { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
//  134     { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
//  135     { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
//  136     { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
//  137     { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
//  138     { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
//  139     { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
//  140     { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
//  141     { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
//  142     { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
//  143     { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
//  144     { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
//  145 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(0)
        DATA
//  146 const uint8 F14x16_Idx[] = 
F14x16_Idx:
        DC8 ""
//  147 {
//  148 	""
//  149 };

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
        DATA
//  150 const uint8 F14x16[] = {  
F14x16:
        DATA8
        DC8 0, 0, 64, 64, 64, 254, 0, 0, 254, 128, 64, 32, 32, 0, 0, 48, 16, 16
        DC8 8, 127, 0, 0, 127, 64, 64, 64, 120, 0, 0, 8, 8, 232, 72, 72, 74, 76
        DC8 72, 72, 232, 8, 8, 0, 0, 64, 32, 19, 10, 66, 254, 2, 2, 10, 19, 96
        DC8 0, 0, 0, 0, 32, 32, 32, 254, 34, 32, 224, 36, 168, 160, 16, 0, 0
        DC8 64, 32, 16, 12, 35, 16, 8, 127, 66, 65, 64, 120, 0, 0, 0, 0, 248
        DC8 136, 136, 136, 136, 132, 132, 134, 192, 0, 0, 0, 0, 32, 63, 32, 32
        DC8 32, 32, 63, 32, 32, 32, 32, 0, 0, 0, 252, 68, 68, 196, 66, 64, 252
        DC8 4, 196, 52, 12, 0, 0, 48, 31, 16, 16, 15, 16, 16, 127, 0, 16, 17
        DC8 30, 0, 0, 0, 72, 252, 68, 66, 0, 136, 16, 0, 254, 2, 0, 0, 0, 12, 2
        DC8 127, 1, 3, 8, 8, 5, 4, 255, 4, 2, 0, 0, 16, 16, 254, 16, 144, 144
        DC8 144, 144, 254, 144, 144, 16, 0, 0, 2, 65, 127, 129, 128, 64, 39, 40
        DC8 24, 38, 65, 64, 0, 0, 132, 132, 132, 252, 132, 132, 132, 132, 252
        DC8 132, 134, 128, 0, 0, 64, 32, 16, 15, 0, 0, 0, 0, 127, 0, 0, 0, 0, 0
        DC8 0, 24, 36, 160, 124, 34, 32, 34, 36, 172, 32, 0, 0, 0, 64, 48, 140
        DC8 131, 65, 39, 25, 25, 39, 97, 64, 64, 0, 0, 0, 224, 254, 144, 32
        DC8 248, 200, 72, 68, 196, 98, 0, 0, 0, 6, 1, 127, 65, 184, 71, 33, 22
        DC8 28, 35, 96, 64, 0, 0, 48, 44, 170, 120, 168, 164, 32, 252, 136, 136
        DC8 120, 0, 0, 0, 2, 2, 1, 126, 82, 83, 83, 82, 82, 126, 0, 0, 0, 0
        DC8 112, 168, 164, 162, 232, 48, 0, 126, 144, 136, 184, 64, 0, 0, 0
        DC8 127, 10, 74, 127, 0, 0, 126, 72, 68, 66, 112, 0, 0, 0, 8, 200, 56
        DC8 12, 10, 232, 8, 8, 136, 8, 0, 0, 0, 8, 8, 9, 9, 9, 9, 127, 9, 9, 8
        DC8 8, 8, 0, 0, 16, 16, 208, 82, 76, 112, 80, 76, 82, 208, 16, 0, 0, 0
        DC8 0, 0, 127, 74, 74, 74, 74, 74, 74, 127, 0, 0, 0, 0, 0, 132, 72, 192
        DC8 160, 156, 144, 254, 144, 144, 144, 128, 0, 0, 32, 31, 16, 32, 80
        DC8 78, 65, 64, 95, 80, 88, 80, 0, 0, 64, 132, 224, 16, 200, 56, 152
        DC8 238, 88, 72, 200, 8, 0, 0, 8, 126, 1, 2, 255, 129, 65, 38, 27, 62
        DC8 97, 64, 0, 0, 0, 0, 128, 124, 84, 84, 84, 84, 84, 126, 0, 0, 0, 0
        DC8 0, 127, 73, 73, 127, 0, 0, 127, 73, 73, 63, 1, 0, 0, 32, 88, 72, 72
        DC8 200, 74, 76, 72, 200, 40, 24, 0, 0, 0, 64, 64, 75, 75, 74, 126, 74
        DC8 74, 74, 75, 64, 64, 0, 0, 32, 4, 248, 16, 252, 148, 148, 148, 148
        DC8 252, 0, 0, 0, 0, 0, 126, 65, 126, 66, 126, 66, 66, 126, 66, 126, 64
        DC8 0, 0, 0, 248, 72, 72, 232, 88, 70, 72, 248, 72, 40, 0, 0, 64, 56
        DC8 135, 128, 128, 68, 77, 53, 53, 77, 66, 64, 64, 0, 0, 0, 32, 254
        DC8 144, 32, 24, 144, 106, 20, 16, 48, 24, 0, 0, 2, 65, 127, 128, 129
        DC8 71, 73, 49, 25, 23, 33, 64, 0, 0, 112, 206, 80, 72, 232, 152, 168
        DC8 168, 254, 168, 248, 32, 0, 0, 2, 127, 178, 66, 36, 30, 41, 74, 127
        DC8 74, 73, 68, 0, 0, 0, 4, 248, 16, 192, 48, 46, 224, 32, 32, 32, 16
        DC8 0, 0, 0, 63, 128, 65, 32, 16, 14, 1, 14, 16, 96, 64, 0, 0, 0, 240
        DC8 144, 144, 144, 254, 144, 144, 144, 240, 16, 0, 0, 0, 0, 15, 4, 4, 4
        DC8 127, 68, 68, 68, 79, 80, 96, 0, 0, 0, 252, 4, 4, 4, 4, 252, 4, 4, 4
        DC8 134, 4, 0, 0, 32, 95, 64, 64, 65, 65, 63, 65, 67, 77, 64, 32, 0, 0
        DC8 0, 240, 68, 196, 192, 36, 220, 52, 180, 68, 252, 4, 0, 0, 0, 127
        DC8 19, 20, 47, 25, 11, 14, 17, 124, 127, 0, 0, 0, 128, 240, 12, 8, 200
        DC8 72, 40, 94, 72, 232, 8, 8, 0, 0, 0, 127, 0, 0, 111, 149, 149, 149
        DC8 149, 127, 128, 64, 0, 0, 0, 0, 0, 0, 0, 254, 64, 64, 64, 64, 64, 0
        DC8 0, 0, 64, 64, 64, 64, 64, 63, 64, 64, 64, 64, 64, 32, 0, 0, 0, 8, 8
        DC8 8, 8, 248, 72, 136, 136, 8, 4, 4, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0
        DC8 1, 0, 0, 0, 0, 0, 16, 16, 208, 62, 16, 16, 16, 16, 16, 8, 0, 0, 0
        DC8 16, 8, 70, 65, 65, 65, 127, 65, 65, 65, 96, 64, 0, 0, 16, 16, 16
        DC8 144, 112, 14, 16, 16, 16, 16, 16, 0, 0, 0, 8, 4, 2, 63, 65, 65, 65
        DC8 65, 65, 127, 1, 0, 0, 0, 132, 136, 128, 8, 232, 40, 40, 254, 40, 40
        DC8 232, 8, 0, 0, 32, 16, 31, 48, 73, 69, 67, 127, 69, 69, 73, 64, 0, 0
        DC8 0, 248, 72, 72, 232, 88, 70, 72, 248, 72, 40, 0, 0, 64, 56, 135
        DC8 128, 128, 68, 77, 53, 53, 77, 66, 64, 64, 0, 0, 16, 16, 16, 16, 16
        DC8 242, 156, 144, 144, 144, 16, 24, 0, 0, 0, 64, 48, 8, 7, 64, 64, 64
        DC8 120, 7, 0, 0, 0, 0, 0, 240, 16, 144, 140, 146, 144, 144, 16, 16
        DC8 248, 0, 0, 0, 0, 127, 0, 7, 8, 8, 8, 15, 0, 64, 127, 0, 0, 0, 16
        DC8 16, 254, 144, 48, 144, 80, 12, 20, 80, 176, 24, 0, 0, 66, 65, 127
        DC8 0, 1, 66, 66, 62, 66, 66, 67, 32, 0, 0, 0, 64, 240, 44, 42, 40, 248
        DC8 40, 32, 32, 224, 0, 0, 0, 64, 32, 31, 5, 5, 5, 127, 5, 69, 69, 127
        DC8 0, 0, 0, 32, 32, 32, 32, 32, 254, 162, 32, 32, 32, 32, 32, 0, 0
        DC8 128, 64, 32, 16, 12, 3, 3, 4, 8, 48, 96, 64, 0, 0, 0, 0, 128, 96, 0
        DC8 0, 254, 0, 64, 128, 0, 0, 0, 0, 4, 2, 1, 0, 64, 64, 63, 0, 0, 0, 3
        DC8 6, 0, 0, 8, 8, 8, 232, 168, 166, 168, 168, 248, 8, 8, 4, 0, 0, 0
        DC8 127, 2, 46, 18, 18, 18, 62, 66, 66, 127, 0, 0, 0, 192, 240, 12, 0
        DC8 248, 136, 136, 248, 132, 132, 132, 128, 0, 0, 0, 127, 0, 0, 63, 32
        DC8 48, 81, 14, 16, 32, 112, 0, 64, 64, 196, 0, 32, 104, 168, 168, 126
        DC8 168, 40, 96, 32, 0, 0, 0, 63, 32, 152, 137, 74, 41, 24, 39, 40, 72
        DC8 0, 0, 0, 0, 14, 140, 116, 68, 68, 68, 68, 68, 52, 12, 4, 0, 0, 8, 8
        DC8 9, 9, 9, 9, 9, 9, 73, 113, 15, 0, 0, 0, 0, 132, 200, 0, 0, 252, 164
        DC8 164, 164, 252, 4, 0, 0, 0, 32, 16, 31, 32, 32, 95, 74, 66, 66, 70
        DC8 73, 0, 0, 0, 0, 240, 128, 128, 128, 252, 128, 128, 128, 240, 8, 0
        DC8 0, 0, 0, 126, 64, 64, 64, 63, 64, 64, 64, 67, 124, 0, 0, 0, 0, 252
        DC8 244, 12, 0, 252, 36, 36, 36, 36, 252, 0, 0, 0, 0, 127, 8, 15, 0
        DC8 127, 33, 7, 9, 53, 99, 2, 0, 0, 96, 88, 80, 254, 80, 80, 80, 0, 248
        DC8 0, 252, 2, 0, 0, 30, 2, 2, 127, 18, 62, 1, 0, 15, 64, 127, 0, 0, 0
        DC8 16, 96, 0, 254, 64, 64, 64, 254, 192, 68, 56, 0, 0, 0, 12, 2, 2
        DC8 127, 64, 48, 14, 1, 7, 24, 32, 64, 0, 0, 16, 16, 16, 144, 240, 30
        DC8 48, 80, 144, 16, 8, 0, 0, 0, 34, 26, 1, 124, 64, 69, 74, 64, 112, 1
        DC8 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 50, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 46, 160, 112, 64, 112, 76, 66
        DC8 64, 80, 224, 0, 0, 67, 36, 24, 15, 48, 0, 126, 66, 66, 66, 127, 2
        DC8 0, 0, 224, 152, 134, 96, 32, 144, 144, 144, 254, 144, 144, 16, 0, 0
        DC8 100, 39, 36, 20, 20, 124, 68, 68, 68, 68, 126, 0, 0, 0, 8, 8, 232
        DC8 40, 40, 254, 42, 40, 40, 232, 40, 8, 0, 0, 64, 32, 19, 10, 6, 255
        DC8 2, 14, 18, 51, 32, 32, 0, 0, 0, 4, 196, 68, 4, 4, 252, 4, 4, 4, 132
        DC8 4, 0, 0, 64, 64, 63, 64, 64, 64, 63, 65, 65, 65, 32, 0, 0, 0, 0, 0
        DC8 248, 72, 200, 68, 68, 68, 68, 194, 64, 0, 0, 0, 96, 156, 131, 64
        DC8 33, 34, 20, 24, 54, 33, 64, 64, 0, 0, 0, 0, 0, 0, 0, 254, 32, 32
        DC8 32, 32, 16, 0, 0, 0, 0, 0, 127, 66, 66, 65, 66, 66, 66, 127, 0, 0
        DC8 0, 0, 32, 152, 144, 80, 48, 18, 20, 16, 48, 112, 208, 8, 0, 0, 65
        DC8 64, 64, 66, 66, 126, 66, 66, 66, 65, 64, 64, 0, 0, 0, 254, 128, 128
        DC8 64, 128, 254, 128, 64, 32, 16, 0, 0, 0, 0, 63, 32, 32, 16, 16, 63
        DC8 64, 64, 64, 88, 32, 0, 0, 32, 16, 8, 246, 88, 88, 88, 88, 88, 248
        DC8 4, 0, 0, 0, 128, 144, 136, 69, 79, 53, 21, 61, 79, 69, 64, 64, 0, 0
        DC8 128, 96, 252, 34, 160, 32, 34, 44, 32, 224, 80, 0, 0, 0, 1, 0, 127
        DC8 64, 64, 67, 76, 32, 94, 65, 64, 32, 0, 0, 0, 240, 32, 32, 32, 254
        DC8 34, 32, 32, 32, 240, 0, 0, 0, 0, 3, 2, 2, 2, 255, 2, 2, 2, 2, 3, 0
        DC8 0, 0, 0, 32, 32, 34, 44, 224, 16, 40, 38, 32, 16, 0, 0, 0, 128, 66
        DC8 34, 18, 10, 7, 2, 14, 18, 34, 65, 65, 0, 0, 0, 248, 66, 76, 64, 196
        DC8 252, 68, 68, 68, 252, 4, 0, 0, 0, 127, 8, 4, 2, 33, 63, 0, 0, 64
        DC8 127, 0, 0, 0, 16, 16, 210, 44, 144, 8, 8, 248, 8, 8, 8, 248, 0, 0
        DC8 2, 1, 127, 1, 66, 48, 14, 1, 0, 64, 126, 1, 0, 0, 128, 64, 248, 6
        DC8 0, 0, 254, 0, 128, 96, 16, 0, 0, 0, 1, 0, 127, 8, 4, 4, 62, 65, 64
        DC8 64, 64, 120, 0, 0, 64, 66, 204, 128, 64, 188, 132, 132, 132, 188
        DC8 192, 32, 0, 0, 0, 0, 191, 152, 72, 65, 38, 24, 60, 35, 64, 64, 0, 0
        DC8 0, 94, 212, 84, 92, 244, 84, 92, 84, 212, 62, 0, 0, 64, 64, 64, 127
        DC8 107, 107, 106, 107, 107, 107, 127, 64, 64, 0, 0, 0, 248, 44, 80
        DC8 248, 32, 24, 200, 14, 8, 152, 8, 0, 0, 121, 7, 3, 69, 127, 0, 0
        DC8 127, 66, 65, 64, 112, 0, 0, 0, 160, 254, 160, 0, 248, 8, 8, 8, 252
        DC8 0, 0, 0, 24, 6, 1, 127, 64, 33, 31, 0, 0, 0, 127, 64, 112, 0, 0, 4
        DC8 132, 116, 76, 68, 228, 4, 252, 4, 132, 68, 4, 0, 0, 66, 33, 17, 10
        DC8 7, 0, 0, 63, 65, 64, 64, 120, 0, 0, 0, 252, 4, 20, 36, 68, 132, 196
        DC8 52, 20, 6, 4, 0, 0, 0, 127, 64, 72, 68, 66, 65, 67, 70, 72, 64, 64
        DC8 0, 0, 16, 208, 80, 82, 204, 16, 16, 204, 18, 208, 48, 8, 0, 0, 0
        DC8 127, 9, 9, 127, 0, 0, 31, 64, 127, 0, 0, 0, 0, 252, 72, 248, 4, 240
        DC8 40, 102, 40, 216, 44, 96, 144, 0, 0, 63, 18, 63, 96, 31, 1, 115, 91
        DC8 90, 91, 119, 0, 0, 0, 56, 68, 196, 68, 124, 0, 252, 68, 68, 68, 228
        DC8 4, 0, 0, 63, 34, 31, 18, 1, 0, 127, 68, 68, 68, 71, 32, 0, 0, 0, 8
        DC8 248, 136, 88, 42, 44, 88, 8, 248, 8, 4, 0, 0, 0, 126, 3, 26, 23, 19
        DC8 19, 11, 51, 66, 126, 0, 0, 0, 64, 68, 244, 76, 196, 68, 228, 20
        DC8 236, 36, 228, 2, 0, 0, 0, 0, 127, 0, 128, 128, 79, 32, 31, 16, 31
        DC8 96, 0, 0, 64, 66, 204, 128, 64, 188, 132, 132, 132, 188, 192, 32, 0
        DC8 0, 0, 0, 191, 152, 72, 65, 38, 24, 60, 35, 64, 64, 0, 0, 0, 160
        DC8 254, 160, 96, 160, 152, 134, 136, 80, 32, 64, 0, 0, 6, 1, 127, 64
        DC8 64, 92, 64, 78, 96, 94, 65, 64, 0, 0, 32, 4, 192, 252, 4, 244, 4
        DC8 252, 0, 240, 252, 0, 0, 0, 0, 127, 64, 39, 24, 7, 16, 103, 0, 15
        DC8 127, 0, 0, 0, 192, 0, 254, 32, 24, 8, 8, 8, 248, 8, 8, 4, 0, 0, 96
        DC8 24, 7, 8, 16, 0, 0, 64, 127, 0, 0, 0, 0, 0, 0, 254, 128, 128, 64
        DC8 128, 254, 128, 64, 32, 16, 0, 0, 0, 0, 63, 32, 32, 16, 16, 63, 64
        DC8 64, 64, 88, 32, 0, 0, 128, 248, 6, 136, 120, 72, 200, 68, 224, 16
        DC8 252, 0, 0, 0, 0, 127, 64, 33, 17, 14, 3, 0, 7, 64, 127, 0, 0, 0, 8
        DC8 196, 36, 184, 168, 190, 184, 192, 248, 38, 224, 16, 0, 0, 1, 127, 0
        DC8 48, 14, 130, 94, 73, 35, 28, 39, 64, 0, 0, 0, 192, 160, 152, 132
        DC8 128, 128, 142, 176, 64, 128, 128, 0, 0, 129, 64, 32, 16, 15, 0, 64
        DC8 64, 63, 1, 0, 0, 0, 0, 0, 72, 252, 68, 32, 64, 248, 8, 8, 8, 248, 0
        DC8 0, 0, 4, 3, 127, 1, 67, 32, 17, 13, 1, 5, 25, 96, 0, 0, 0, 0, 82
        DC8 76, 208, 112, 80, 72, 86, 80, 8, 0, 0, 0, 33, 17, 73, 71, 73, 73
        DC8 121, 73, 73, 69, 65, 65, 0, 0, 8, 232, 8, 222, 42, 136, 104, 94
        DC8 200, 72, 40, 0, 0, 0, 64, 67, 124, 71, 124, 69, 124, 68, 68, 127
        DC8 64, 64, 0, 0, 0, 68, 124, 68, 68, 68, 196, 252, 68, 68, 70, 68, 0
        DC8 0, 32, 32, 16, 8, 4, 67, 64, 63, 0, 0, 0, 0, 0, 0, 0, 132, 132, 132
        DC8 132, 252, 132, 132, 132, 132, 68, 64, 0, 0, 128, 64, 32, 16, 14, 1
        DC8 63, 64, 64, 64, 64, 120, 0, 0, 96, 88, 198, 96, 48, 32, 44, 242, 36
        DC8 44, 144, 128, 0, 0, 36, 39, 36, 20, 67, 65, 33, 31, 25, 37, 66, 112
        DC8 0, 0, 0, 0, 252, 148, 148, 148, 148, 148, 148, 252, 0, 0, 0, 0, 0
        DC8 36, 56, 32, 63, 32, 32, 63, 48, 45, 34, 0, 0, 0, 64, 64, 68, 68, 68
        DC8 196, 68, 68, 68, 68, 68, 64, 0, 0, 16, 8, 6, 3, 64, 127, 0, 0, 2, 4
        DC8 24, 16, 0, 0, 8, 72, 136, 136, 120, 8, 56, 200, 8, 136, 120, 0, 0
        DC8 0, 16, 8, 4, 3, 6, 88, 32, 17, 14, 27, 32, 32, 0
//  151 0x00,0x00,0x40,0x40,0x40,0xFE,0x00,0x00,0xFE,0x80,0x40,0x20,0x20,0x00,
//  152 0x00,0x30,0x10,0x10,0x08,0x7F,0x00,0x00,0x7F,0x40,0x40,0x40,0x78,0x00,//北0
//  153 
//  154 0x00,0x08,0x08,0xE8,0x48,0x48,0x4A,0x4C,0x48,0x48,0xE8,0x08,0x08,0x00,
//  155 0x00,0x40,0x20,0x13,0x0A,0x42,0xFE,0x02,0x02,0x0A,0x13,0x60,0x00,0x00,//京1
//  156 
//  157 0x00,0x00,0x20,0x20,0x20,0xFE,0x22,0x20,0xE0,0x24,0xA8,0xA0,0x10,0x00,
//  158 0x00,0x40,0x20,0x10,0x0C,0x23,0x10,0x08,0x7F,0x42,0x41,0x40,0x78,0x00,//龙2
//  159 
//  160 0x00,0x00,0x00,0xF8,0x88,0x88,0x88,0x88,0x84,0x84,0x86,0xC0,0x00,0x00,
//  161 0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x3F,0x20,0x20,0x20,0x20,0x00,//丘3
//  162 
//  163 0x00,0x00,0xFC,0x44,0x44,0xC4,0x42,0x40,0xFC,0x04,0xC4,0x34,0x0C,0x00,
//  164 0x00,0x30,0x1F,0x10,0x10,0x0F,0x10,0x10,0x7F,0x00,0x10,0x11,0x1E,0x00,//邱4
//  165 
//  166 0x00,0x00,0x48,0xFC,0x44,0x42,0x00,0x88,0x10,0x00,0xFE,0x02,0x00,0x00,
//  167 0x00,0x0C,0x02,0x7F,0x01,0x03,0x08,0x08,0x05,0x04,0xFF,0x04,0x02,0x00,//科5
//  168 
//  169 0x00,0x10,0x10,0xFE,0x10,0x90,0x90,0x90,0x90,0xFE,0x90,0x90,0x10,0x00,
//  170 0x00,0x02,0x41,0x7F,0x81,0x80,0x40,0x27,0x28,0x18,0x26,0x41,0x40,0x00,//技6
//  171 
//  172 0x00,0x84,0x84,0x84,0xFC,0x84,0x84,0x84,0x84,0xFC,0x84,0x86,0x80,0x00,
//  173 0x00,0x40,0x20,0x10,0x0F,0x00,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x00,//开7
//  174 
//  175 0x00,0x00,0x18,0x24,0xA0,0x7C,0x22,0x20,0x22,0x24,0xAC,0x20,0x00,0x00,
//  176 0x00,0x40,0x30,0x8C,0x83,0x41,0x27,0x19,0x19,0x27,0x61,0x40,0x40,0x00,//发8
//  177 
//  178 0x00,0x00,0xE0,0xFE,0x90,0x20,0xF8,0xC8,0x48,0x44,0xC4,0x62,0x00,0x00,
//  179 0x00,0x06,0x01,0x7F,0x41,0xB8,0x47,0x21,0x16,0x1C,0x23,0x60,0x40,0x00,//板9
//  180 
//  181 0x00,0x30,0x2C,0xAA,0x78,0xA8,0xA4,0x20,0xFC,0x88,0x88,0x78,0x00,0x00,
//  182 0x00,0x02,0x02,0x01,0x7E,0x52,0x53,0x53,0x52,0x52,0x7E,0x00,0x00,0x00,//智10
//  183 
//  184 0x00,0x70,0xA8,0xA4,0xA2,0xE8,0x30,0x00,0x7E,0x90,0x88,0xB8,0x40,0x00,
//  185 0x00,0x00,0x7F,0x0A,0x4A,0x7F,0x00,0x00,0x7E,0x48,0x44,0x42,0x70,0x00,//能11
//  186 
//  187 0x00,0x00,0x08,0xC8,0x38,0x0C,0x0A,0xE8,0x08,0x08,0x88,0x08,0x00,0x00,
//  188 0x00,0x08,0x08,0x09,0x09,0x09,0x09,0x7F,0x09,0x09,0x08,0x08,0x08,0x00,//车12
//  189 
//  190 0x00,0x10,0x10,0xD0,0x52,0x4C,0x70,0x50,0x4C,0x52,0xD0,0x10,0x00,0x00,
//  191 0x00,0x00,0x00,0x7F,0x4A,0x4A,0x4A,0x4A,0x4A,0x4A,0x7F,0x00,0x00,0x00,//首13
//  192 
//  193 0x00,0x00,0x84,0x48,0xC0,0xA0,0x9C,0x90,0xFE,0x90,0x90,0x90,0x80,0x00,
//  194 0x00,0x20,0x1F,0x10,0x20,0x50,0x4E,0x41,0x40,0x5F,0x50,0x58,0x50,0x00,//选14
//  195 
//  196 0x00,0x40,0x84,0xE0,0x10,0xC8,0x38,0x98,0xEE,0x58,0x48,0xC8,0x08,0x00,
//  197 0x00,0x08,0x7E,0x01,0x02,0xFF,0x81,0x41,0x26,0x1B,0x3E,0x61,0x40,0x00,//液15
//  198 
//  199 0x00,0x00,0x00,0x80,0x7C,0x54,0x54,0x54,0x54,0x54,0x7E,0x00,0x00,0x00,
//  200 0x00,0x00,0x7F,0x49,0x49,0x7F,0x00,0x00,0x7F,0x49,0x49,0x3F,0x01,0x00,//晶16
//  201 
//  202 0x00,0x20,0x58,0x48,0x48,0xC8,0x4A,0x4C,0x48,0xC8,0x28,0x18,0x00,0x00,
//  203 0x00,0x40,0x40,0x4B,0x4B,0x4A,0x7E,0x4A,0x4A,0x4A,0x4B,0x40,0x40,0x00,//室17
//  204 
//  205 0x00,0x20,0x04,0xF8,0x10,0xFC,0x94,0x94,0x94,0x94,0xFC,0x00,0x00,0x00,
//  206 0x00,0x00,0x7E,0x41,0x7E,0x42,0x7E,0x42,0x42,0x7E,0x42,0x7E,0x40,0x00,//温18
//  207 
//  208 0x00,0x00,0xF8,0x48,0x48,0xE8,0x58,0x46,0x48,0xF8,0x48,0x28,0x00,0x00,
//  209 0x40,0x38,0x87,0x80,0x80,0x44,0x4D,0x35,0x35,0x4D,0x42,0x40,0x40,0x00,//度19
//  210 
//  211 0x00,0x00,0x20,0xFE,0x90,0x20,0x18,0x90,0x6A,0x14,0x10,0x30,0x18,0x00,
//  212 0x00,0x02,0x41,0x7F,0x80,0x81,0x47,0x49,0x31,0x19,0x17,0x21,0x40,0x00,//按20
//  213 
//  214 0x00,0x70,0xCE,0x50,0x48,0xE8,0x98,0xA8,0xA8,0xFE,0xA8,0xF8,0x20,0x00,
//  215 0x00,0x02,0x7F,0xB2,0x42,0x24,0x1E,0x29,0x4A,0x7F,0x4A,0x49,0x44,0x00,//键21
//  216 
//  217 0x00,0x00,0x04,0xF8,0x10,0xC0,0x30,0x2E,0xE0,0x20,0x20,0x20,0x10,0x00,
//  218 0x00,0x00,0x3F,0x80,0x41,0x20,0x10,0x0E,0x01,0x0E,0x10,0x60,0x40,0x00,//次22
//  219 
//  220 0x00,0x00,0xF0,0x90,0x90,0x90,0xFE,0x90,0x90,0x90,0xF0,0x10,0x00,0x00,
//  221 0x00,0x00,0x0F,0x04,0x04,0x04,0x7F,0x44,0x44,0x44,0x4F,0x50,0x60,0x00,//电23
//  222 
//  223 0x00,0x00,0xFC,0x04,0x04,0x04,0x04,0xFC,0x04,0x04,0x04,0x86,0x04,0x00,
//  224 0x00,0x20,0x5F,0x40,0x40,0x41,0x41,0x3F,0x41,0x43,0x4D,0x40,0x20,0x00,//压24
//  225 
//  226 0x00,0x00,0xF0,0x44,0xC4,0xC0,0x24,0xDC,0x34,0xB4,0x44,0xFC,0x04,0x00,
//  227 0x00,0x00,0x7F,0x13,0x14,0x2F,0x19,0x0B,0x0E,0x11,0x7C,0x7F,0x00,0x00,//阈25
//  228 
//  229 0x00,0x80,0xF0,0x0C,0x08,0xC8,0x48,0x28,0x5E,0x48,0xE8,0x08,0x08,0x00,
//  230 0x00,0x00,0x7F,0x00,0x00,0x6F,0x95,0x95,0x95,0x95,0x7F,0x80,0x40,0x00,//值26
//  231 
//  232 0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x40,0x40,0x40,0x40,0x40,0x00,0x00,
//  233 0x00,0x40,0x40,0x40,0x40,0x40,0x3F,0x40,0x40,0x40,0x40,0x40,0x20,0x00,//上27
//  234 
//  235 0x00,0x00,0x08,0x08,0x08,0x08,0xF8,0x48,0x88,0x88,0x08,0x04,0x04,0x00,
//  236 0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x01,0x00,0x00,0x00,//下28
//  237 
//  238 0x00,0x00,0x10,0x10,0xD0,0x3E,0x10,0x10,0x10,0x10,0x10,0x08,0x00,0x00,
//  239 0x00,0x10,0x08,0x46,0x41,0x41,0x41,0x7F,0x41,0x41,0x41,0x60,0x40,0x00,//左29
//  240 
//  241 0x00,0x10,0x10,0x10,0x90,0x70,0x0E,0x10,0x10,0x10,0x10,0x10,0x00,0x00,
//  242 0x00,0x08,0x04,0x02,0x3F,0x41,0x41,0x41,0x41,0x41,0x7F,0x01,0x00,0x00,//右30
//  243 
//  244 0x00,0x84,0x88,0x80,0x08,0xE8,0x28,0x28,0xFE,0x28,0x28,0xE8,0x08,0x00,
//  245 0x00,0x20,0x10,0x1F,0x30,0x49,0x45,0x43,0x7F,0x45,0x45,0x49,0x40,0x00,//速31
//  246 
//  247 0x00,0x00,0xF8,0x48,0x48,0xE8,0x58,0x46,0x48,0xF8,0x48,0x28,0x00,0x00,
//  248 0x40,0x38,0x87,0x80,0x80,0x44,0x4D,0x35,0x35,0x4D,0x42,0x40,0x40,0x00,//度32
//  249 
//  250 0x00,0x10,0x10,0x10,0x10,0x10,0xF2,0x9C,0x90,0x90,0x90,0x10,0x18,0x00,
//  251 0x00,0x00,0x40,0x30,0x08,0x07,0x40,0x40,0x40,0x78,0x07,0x00,0x00,0x00,//方33
//  252 
//  253 0x00,0x00,0xF0,0x10,0x90,0x8C,0x92,0x90,0x90,0x10,0x10,0xF8,0x00,0x00,
//  254 0x00,0x00,0x7F,0x00,0x07,0x08,0x08,0x08,0x0F,0x00,0x40,0x7F,0x00,0x00,//向34
//  255 
//  256 0x00,0x10,0x10,0xFE,0x90,0x30,0x90,0x50,0x0C,0x14,0x50,0xB0,0x18,0x00,
//  257 0x00,0x42,0x41,0x7F,0x00,0x01,0x42,0x42,0x3E,0x42,0x42,0x43,0x20,0x00,//控35
//  258 
//  259 0x00,0x00,0x40,0xF0,0x2C,0x2A,0x28,0xF8,0x28,0x20,0x20,0xE0,0x00,0x00,
//  260 0x00,0x40,0x20,0x1F,0x05,0x05,0x05,0x7F,0x05,0x45,0x45,0x7F,0x00,0x00,//角36
//  261 
//  262 0x00,0x20,0x20,0x20,0x20,0x20,0xFE,0xA2,0x20,0x20,0x20,0x20,0x20,0x00,
//  263 0x00,0x80,0x40,0x20,0x10,0x0C,0x03,0x03,0x04,0x08,0x30,0x60,0x40,0x00,//大37
//  264 
//  265 0x00,0x00,0x00,0x80,0x60,0x00,0x00,0xFE,0x00,0x40,0x80,0x00,0x00,0x00,
//  266 0x00,0x04,0x02,0x01,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x03,0x06,0x00,//小38
//  267 
//  268 0x00,0x08,0x08,0x08,0xE8,0xA8,0xA6,0xA8,0xA8,0xF8,0x08,0x08,0x04,0x00,
//  269 0x00,0x00,0x7F,0x02,0x2E,0x12,0x12,0x12,0x3E,0x42,0x42,0x7F,0x00,0x00,//高39
//  270 
//  271 0x00,0xC0,0xF0,0x0C,0x00,0xF8,0x88,0x88,0xF8,0x84,0x84,0x84,0x80,0x00,
//  272 0x00,0x00,0x7F,0x00,0x00,0x3F,0x20,0x30,0x51,0x0E,0x10,0x20,0x70,0x00,//低40
//  273 
//  274 0x40,0x40,0xC4,0x00,0x20,0x68,0xA8,0xA8,0x7E,0xA8,0x28,0x60,0x20,0x00,
//  275 0x00,0x00,0x3F,0x20,0x98,0x89,0x4A,0x29,0x18,0x27,0x28,0x48,0x00,0x00,//读41
//  276 
//  277 0x00,0x00,0x0E,0x8C,0x74,0x44,0x44,0x44,0x44,0x44,0x34,0x0C,0x04,0x00,
//  278 0x00,0x08,0x08,0x09,0x09,0x09,0x09,0x09,0x09,0x49,0x71,0x0F,0x00,0x00,//写42
//  279 
//  280 0x00,0x00,0x84,0xC8,0x00,0x00,0xFC,0xA4,0xA4,0xA4,0xFC,0x04,0x00,0x00,
//  281 0x00,0x20,0x10,0x1F,0x20,0x20,0x5F,0x4A,0x42,0x42,0x46,0x49,0x00,0x00,//退43
//  282 
//  283 0x00,0x00,0xF0,0x80,0x80,0x80,0xFC,0x80,0x80,0x80,0xF0,0x08,0x00,0x00,
//  284 0x00,0x00,0x7E,0x40,0x40,0x40,0x3F,0x40,0x40,0x40,0x43,0x7C,0x00,0x00,//出44
//  285 
//  286 0x00,0x00,0xFC,0xF4,0x0C,0x00,0xFC,0x24,0x24,0x24,0x24,0xFC,0x00,0x00,
//  287 0x00,0x00,0x7F,0x08,0x0F,0x00,0x7F,0x21,0x07,0x09,0x35,0x63,0x02,0x00,//限45
//  288 
//  289 0x00,0x60,0x58,0x50,0xFE,0x50,0x50,0x50,0x00,0xF8,0x00,0xFC,0x02,0x00,
//  290 0x00,0x1E,0x02,0x02,0x7F,0x12,0x3E,0x01,0x00,0x0F,0x40,0x7F,0x00,0x00,//制46
//  291 
//  292 0x00,0x10,0x60,0x00,0xFE,0x40,0x40,0x40,0xFE,0xC0,0x44,0x38,0x00,0x00,
//  293 0x00,0x0C,0x02,0x02,0x7F,0x40,0x30,0x0E,0x01,0x07,0x18,0x20,0x40,0x00,//状47
//  294 
//  295 0x00,0x10,0x10,0x10,0x90,0xF0,0x1E,0x30,0x50,0x90,0x10,0x08,0x00,0x00,
//  296 0x00,0x22,0x1A,0x01,0x7C,0x40,0x45,0x4A,0x40,0x70,0x01,0x1B,0x00,0x00,//态48
//  297 
//  298 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  299 0x00,0x00,0x33,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//：49
//  300 
//  301 0x00,0x00,0xF0,0x2E,0xA0,0x70,0x40,0x70,0x4C,0x42,0x40,0x50,0xE0,0x00,
//  302 0x00,0x43,0x24,0x18,0x0F,0x30,0x00,0x7E,0x42,0x42,0x42,0x7F,0x02,0x00,//始50
//  303 
//  304 0x00,0xE0,0x98,0x86,0x60,0x20,0x90,0x90,0x90,0xFE,0x90,0x90,0x10,0x00,
//  305 0x00,0x64,0x27,0x24,0x14,0x14,0x7C,0x44,0x44,0x44,0x44,0x7E,0x00,0x00,//结51
//  306 
//  307 0x00,0x08,0x08,0xE8,0x28,0x28,0xFE,0x2A,0x28,0x28,0xE8,0x28,0x08,0x00,
//  308 0x00,0x40,0x20,0x13,0x0A,0x06,0xFF,0x02,0x0E,0x12,0x33,0x20,0x20,0x00,//束52
//  309 
//  310 0x00,0x00,0x04,0xC4,0x44,0x04,0x04,0xFC,0x04,0x04,0x04,0x84,0x04,0x00,
//  311 0x00,0x40,0x40,0x3F,0x40,0x40,0x40,0x3F,0x41,0x41,0x41,0x20,0x00,0x00,//正53
//  312 
//  313 0x00,0x00,0x00,0xF8,0x48,0xC8,0x44,0x44,0x44,0x44,0xC2,0x40,0x00,0x00,
//  314 0x00,0x60,0x9C,0x83,0x40,0x21,0x22,0x14,0x18,0x36,0x21,0x40,0x40,0x00,//反54
//  315 
//  316 0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x20,0x20,0x20,0x20,0x10,0x00,0x00,
//  317 0x00,0x00,0x00,0x7F,0x42,0x42,0x41,0x42,0x42,0x42,0x7F,0x00,0x00,0x00,//占55
//  318 
//  319 0x00,0x20,0x98,0x90,0x50,0x30,0x12,0x14,0x10,0x30,0x70,0xD0,0x08,0x00,
//  320 0x00,0x41,0x40,0x40,0x42,0x42,0x7E,0x42,0x42,0x42,0x41,0x40,0x40,0x00,//空56
//  321 
//  322 0x00,0x00,0xFE,0x80,0x80,0x40,0x80,0xFE,0x80,0x40,0x20,0x10,0x00,0x00,
//  323 0x00,0x00,0x3F,0x20,0x20,0x10,0x10,0x3F,0x40,0x40,0x40,0x58,0x20,0x00,//比57
//  324 
//  325 0x00,0x20,0x10,0x08,0xF6,0x58,0x58,0x58,0x58,0x58,0xF8,0x04,0x00,0x00,
//  326 0x00,0x80,0x90,0x88,0x45,0x4F,0x35,0x15,0x3D,0x4F,0x45,0x40,0x40,0x00,//复58
//  327 
//  328 0x00,0x80,0x60,0xFC,0x22,0xA0,0x20,0x22,0x2C,0x20,0xE0,0x50,0x00,0x00,
//  329 0x00,0x01,0x00,0x7F,0x40,0x40,0x43,0x4C,0x20,0x5E,0x41,0x40,0x20,0x00,//位59
//  330 
//  331 0x00,0x00,0xF0,0x20,0x20,0x20,0xFE,0x22,0x20,0x20,0x20,0xF0,0x00,0x00,
//  332 0x00,0x00,0x03,0x02,0x02,0x02,0xFF,0x02,0x02,0x02,0x02,0x03,0x00,0x00,//中60
//  333 
//  334 0x00,0x00,0x20,0x20,0x22,0x2C,0xE0,0x10,0x28,0x26,0x20,0x10,0x00,0x00,
//  335 0x00,0x80,0x42,0x22,0x12,0x0A,0x07,0x02,0x0E,0x12,0x22,0x41,0x41,0x00,//关61
//  336 
//  337 0x00,0x00,0xF8,0x42,0x4C,0x40,0xC4,0xFC,0x44,0x44,0x44,0xFC,0x04,0x00,
//  338 0x00,0x00,0x7F,0x08,0x04,0x02,0x21,0x3F,0x00,0x00,0x40,0x7F,0x00,0x00,//闭62
//  339 
//  340 0x00,0x10,0x10,0xD2,0x2C,0x90,0x08,0x08,0xF8,0x08,0x08,0x08,0xF8,0x00,
//  341 0x00,0x02,0x01,0x7F,0x01,0x42,0x30,0x0E,0x01,0x00,0x40,0x7E,0x01,0x00,//初63
//  342 
//  343 0x00,0x80,0x40,0xF8,0x06,0x00,0x00,0xFE,0x00,0x80,0x60,0x10,0x00,0x00,
//  344 0x00,0x01,0x00,0x7F,0x08,0x04,0x04,0x3E,0x41,0x40,0x40,0x40,0x78,0x00,//化64
//  345 
//  346 0x00,0x40,0x42,0xCC,0x80,0x40,0xBC,0x84,0x84,0x84,0xBC,0xC0,0x20,0x00,
//  347 0x00,0x00,0x00,0xBF,0x98,0x48,0x41,0x26,0x18,0x3C,0x23,0x40,0x40,0x00,//设65
//  348 
//  349 0x00,0x00,0x5E,0xD4,0x54,0x5C,0xF4,0x54,0x5C,0x54,0xD4,0x3E,0x00,0x00,
//  350 0x40,0x40,0x40,0x7F,0x6B,0x6B,0x6A,0x6B,0x6B,0x6B,0x7F,0x40,0x40,0x00,//置66
//  351 
//  352 0x00,0x00,0xF8,0x2C,0x50,0xF8,0x20,0x18,0xC8,0x0E,0x08,0x98,0x08,0x00,
//  353 0x00,0x79,0x07,0x03,0x45,0x7F,0x00,0x00,0x7F,0x42,0x41,0x40,0x70,0x00,//舵67
//  354 
//  355 0x00,0x00,0xA0,0xFE,0xA0,0x00,0xF8,0x08,0x08,0x08,0xFC,0x00,0x00,0x00,
//  356 0x18,0x06,0x01,0x7F,0x40,0x21,0x1F,0x00,0x00,0x00,0x7F,0x40,0x70,0x00,//机68
//  357 
//  358 0x00,0x04,0x84,0x74,0x4C,0x44,0xE4,0x04,0xFC,0x04,0x84,0x44,0x04,0x00,
//  359 0x00,0x42,0x21,0x11,0x0A,0x07,0x00,0x00,0x3F,0x41,0x40,0x40,0x78,0x00,//死0
//  360 
//  361 0x00,0x00,0xFC,0x04,0x14,0x24,0x44,0x84,0xC4,0x34,0x14,0x06,0x04,0x00,
//  362 0x00,0x00,0x7F,0x40,0x48,0x44,0x42,0x41,0x43,0x46,0x48,0x40,0x40,0x00,//区1
//  363 
//  364 0x00,0x10,0xD0,0x50,0x52,0xCC,0x10,0x10,0xCC,0x12,0xD0,0x30,0x08,0x00,
//  365 0x00,0x00,0x7F,0x09,0x09,0x7F,0x00,0x00,0x1F,0x40,0x7F,0x00,0x00,0x00,//前0
//  366 
//  367 0x00,0xFC,0x48,0xF8,0x04,0xF0,0x28,0x66,0x28,0xD8,0x2C,0x60,0x90,0x00,
//  368 0x00,0x3F,0x12,0x3F,0x60,0x1F,0x01,0x73,0x5B,0x5A,0x5B,0x77,0x00,0x00,//瞻1
//  369 
//  370 0x00,0x38,0x44,0xC4,0x44,0x7C,0x00,0xFC,0x44,0x44,0x44,0xE4,0x04,0x00,
//  371 0x00,0x3F,0x22,0x1F,0x12,0x01,0x00,0x7F,0x44,0x44,0x44,0x47,0x20,0x00,//距0
//  372 
//  373 0x00,0x00,0x08,0xF8,0x88,0x58,0x2A,0x2C,0x58,0x08,0xF8,0x08,0x04,0x00,
//  374 0x00,0x00,0x7E,0x03,0x1A,0x17,0x13,0x13,0x0B,0x33,0x42,0x7E,0x00,0x00,//离1
//  375 
//  376 0x00,0x40,0x44,0xF4,0x4C,0xC4,0x44,0xE4,0x14,0xEC,0x24,0xE4,0x02,0x00,
//  377 0x00,0x00,0x00,0x7F,0x00,0x80,0x80,0x4F,0x20,0x1F,0x10,0x1F,0x60,0x00,//预0
//  378 
//  379 0x00,0x40,0x42,0xCC,0x80,0x40,0xBC,0x84,0x84,0x84,0xBC,0xC0,0x20,0x00,
//  380 0x00,0x00,0x00,0xBF,0x98,0x48,0x41,0x26,0x18,0x3C,0x23,0x40,0x40,0x00,//设1
//  381 
//  382 0x00,0x00,0xA0,0xFE,0xA0,0x60,0xA0,0x98,0x86,0x88,0x50,0x20,0x40,0x00,
//  383 0x00,0x06,0x01,0x7F,0x40,0x40,0x5C,0x40,0x4E,0x60,0x5E,0x41,0x40,0x00,//检0
//  384 
//  385 0x00,0x20,0x04,0xC0,0xFC,0x04,0xF4,0x04,0xFC,0x00,0xF0,0xFC,0x00,0x00,
//  386 0x00,0x00,0x7F,0x40,0x27,0x18,0x07,0x10,0x67,0x00,0x0F,0x7F,0x00,0x00,//测1
//  387 
//  388 0x00,0xC0,0x00,0xFE,0x20,0x18,0x08,0x08,0x08,0xF8,0x08,0x08,0x04,0x00,
//  389 0x00,0x60,0x18,0x07,0x08,0x10,0x00,0x00,0x40,0x7F,0x00,0x00,0x00,0x00,//灯0
//  390 
//  391 0x00,0x00,0xFE,0x80,0x80,0x40,0x80,0xFE,0x80,0x40,0x20,0x10,0x00,0x00,
//  392 0x00,0x00,0x3F,0x20,0x20,0x10,0x10,0x3F,0x40,0x40,0x40,0x58,0x20,0x00,//比0
//  393 
//  394 0x00,0x80,0xF8,0x06,0x88,0x78,0x48,0xC8,0x44,0xE0,0x10,0xFC,0x00,0x00,
//  395 0x00,0x00,0x7F,0x40,0x21,0x11,0x0E,0x03,0x00,0x07,0x40,0x7F,0x00,0x00,//例1
//  396 
//  397 0x00,0x08,0xC4,0x24,0xB8,0xA8,0xBE,0xB8,0xC0,0xF8,0x26,0xE0,0x10,0x00,
//  398 0x00,0x01,0x7F,0x00,0x30,0x0E,0x82,0x5E,0x49,0x23,0x1C,0x27,0x40,0x00,//微2
//  399 
//  400 0x00,0x00,0xC0,0xA0,0x98,0x84,0x80,0x80,0x8E,0xB0,0x40,0x80,0x80,0x00,
//  401 0x00,0x81,0x40,0x20,0x10,0x0F,0x00,0x40,0x40,0x3F,0x01,0x00,0x00,0x00,//分3
//  402 
//  403 0x00,0x00,0x48,0xFC,0x44,0x20,0x40,0xF8,0x08,0x08,0x08,0xF8,0x00,0x00,
//  404 0x00,0x04,0x03,0x7F,0x01,0x43,0x20,0x11,0x0D,0x01,0x05,0x19,0x60,0x00,//积0
//  405 
//  406 0x00,0x00,0x00,0x52,0x4C,0xD0,0x70,0x50,0x48,0x56,0x50,0x08,0x00,0x00,
//  407 0x00,0x21,0x11,0x49,0x47,0x49,0x49,0x79,0x49,0x49,0x45,0x41,0x41,0x00,//差 0
//  408 
//  409 0x00,0x08,0xE8,0x08,0xDE,0x2A,0x88,0x68,0x5E,0xC8,0x48,0x28,0x00,0x00,
//  410 0x00,0x40,0x43,0x7C,0x47,0x7C,0x45,0x7C,0x44,0x44,0x7F,0x40,0x40,0x00,//蓝0
//  411 
//  412 0x00,0x00,0x44,0x7C,0x44,0x44,0x44,0xC4,0xFC,0x44,0x44,0x46,0x44,0x00,
//  413 0x00,0x20,0x20,0x10,0x08,0x04,0x43,0x40,0x3F,0x00,0x00,0x00,0x00,0x00,//牙1
//  414 
//  415 0x00,0x00,0x84,0x84,0x84,0x84,0xFC,0x84,0x84,0x84,0x84,0x44,0x40,0x00,
//  416 0x00,0x80,0x40,0x20,0x10,0x0E,0x01,0x3F,0x40,0x40,0x40,0x40,0x78,0x00,//无2
//  417 
//  418 0x00,0x60,0x58,0xC6,0x60,0x30,0x20,0x2C,0xF2,0x24,0x2C,0x90,0x80,0x00,
//  419 0x00,0x24,0x27,0x24,0x14,0x43,0x41,0x21,0x1F,0x19,0x25,0x42,0x70,0x00,//线3
//  420 
//  421 0x00,0x00,0x00,0xFC,0x94,0x94,0x94,0x94,0x94,0x94,0xFC,0x00,0x00,0x00,
//  422 0x00,0x00,0x24,0x38,0x20,0x3F,0x20,0x20,0x3F,0x30,0x2D,0x22,0x00,0x00,//显0
//  423 
//  424 0x00,0x40,0x40,0x44,0x44,0x44,0xC4,0x44,0x44,0x44,0x44,0x44,0x40,0x00,
//  425 0x00,0x10,0x08,0x06,0x03,0x40,0x7F,0x00,0x00,0x02,0x04,0x18,0x10,0x00,//示1
//  426 
//  427 0x00,0x08,0x48,0x88,0x88,0x78,0x08,0x38,0xC8,0x08,0x88,0x78,0x00,0x00,
//  428 0x00,0x10,0x08,0x04,0x03,0x06,0x58,0x20,0x11,0x0E,0x1B,0x20,0x20,0x00,//双0
//  429 };
//  430 
//  431 //======================================================
//  432 // 128X64I液晶底层驱动[8X16]字体库
//  433 // 设计者: powerint
//  434 // 描  述: [8X16]西文字符的字模数据 (纵向取模,字节倒序)
//  435 // !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
//  436 //======================================================

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
        DATA
//  437 const uint8 F8X16[]=
F8X16:
        DATA8
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0
        DC8 0, 0, 0, 0, 0, 51, 48, 0, 0, 0, 0, 16, 12, 6, 16, 12, 6, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 64, 192, 120, 64, 192, 120, 64, 0, 4, 63, 4, 4, 63
        DC8 4, 4, 0, 0, 112, 136, 252, 8, 48, 0, 0, 0, 24, 32, 255, 33, 30, 0
        DC8 0, 240, 8, 240, 0, 224, 24, 0, 0, 0, 33, 28, 3, 30, 33, 30, 0, 0
        DC8 240, 8, 136, 112, 0, 0, 0, 30, 33, 35, 36, 25, 39, 33, 16, 16, 22
        DC8 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 24, 4, 2
        DC8 0, 0, 0, 0, 7, 24, 32, 64, 0, 0, 2, 4, 24, 224, 0, 0, 0, 0, 64, 32
        DC8 24, 7, 0, 0, 0, 64, 64, 128, 240, 128, 64, 64, 0, 2, 2, 1, 15, 1, 2
        DC8 2, 0, 0, 0, 0, 240, 0, 0, 0, 0, 1, 1, 1, 31, 1, 1, 1, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 128, 176, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 48, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 128, 96, 24, 4, 0, 96, 24, 6, 1, 0, 0, 0, 0, 224, 16
        DC8 8, 8, 16, 224, 0, 0, 15, 16, 32, 32, 16, 15, 0, 0, 16, 16, 248, 0
        DC8 0, 0, 0, 0, 32, 32, 63, 32, 32, 0, 0, 0, 112, 8, 8, 8, 136, 112, 0
        DC8 0, 48, 40, 36, 34, 33, 48, 0, 0, 48, 8, 136, 136, 72, 48, 0, 0, 24
        DC8 32, 32, 32, 17, 14, 0, 0, 0, 192, 32, 16, 248, 0, 0, 0, 7, 4, 36
        DC8 36, 63, 36, 0, 0, 248, 8, 136, 136, 8, 8, 0, 0, 25, 33, 32, 32, 17
        DC8 14, 0, 0, 224, 16, 136, 136, 24, 0, 0, 0, 15, 17, 32, 32, 17, 14, 0
        DC8 0, 56, 8, 8, 200, 56, 8, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 112, 136, 8
        DC8 8, 136, 112, 0, 0, 28, 34, 33, 33, 34, 28, 0, 0, 224, 16, 8, 8, 16
        DC8 224, 0, 0, 0, 49, 34, 34, 17, 15, 0, 0, 0, 0, 192, 192, 0, 0, 0, 0
        DC8 0, 0, 48, 48, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 128, 96, 0
        DC8 0, 0, 0, 0, 0, 128, 64, 32, 16, 8, 0, 0, 1, 2, 4, 8, 16, 32, 0, 64
        DC8 64, 64, 64, 64, 64, 64, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 8, 16, 32, 64
        DC8 128, 0, 0, 0, 32, 16, 8, 4, 2, 1, 0, 0, 112, 72, 8, 8, 8, 240, 0, 0
        DC8 0, 0, 48, 54, 1, 0, 0, 192, 48, 200, 40, 232, 16, 224, 0, 7, 24, 39
        DC8 36, 35, 20, 11, 0, 0, 0, 192, 56, 224, 0, 0, 0, 32, 60, 35, 2, 2
        DC8 39, 56, 32, 8, 248, 136, 136, 136, 112, 0, 0, 32, 63, 32, 32, 32
        DC8 17, 14, 0, 192, 48, 8, 8, 8, 8, 56, 0, 7, 24, 32, 32, 32, 16, 8, 0
        DC8 8, 248, 8, 8, 8, 16, 224, 0, 32, 63, 32, 32, 32, 16, 15, 0, 8, 248
        DC8 136, 136, 232, 8, 16, 0, 32, 63, 32, 32, 35, 32, 24, 0, 8, 248, 136
        DC8 136, 232, 8, 16, 0, 32, 63, 32, 0, 3, 0, 0, 0, 192, 48, 8, 8, 8, 56
        DC8 0, 0, 7, 24, 32, 32, 34, 30, 2, 0, 8, 248, 8, 0, 0, 8, 248, 8, 32
        DC8 63, 33, 1, 1, 33, 63, 32, 0, 8, 8, 248, 8, 8, 0, 0, 0, 32, 32, 63
        DC8 32, 32, 0, 0, 0, 0, 8, 8, 248, 8, 8, 0, 192, 128, 128, 128, 127, 0
        DC8 0, 0, 8, 248, 136, 192, 40, 24, 8, 0, 32, 63, 32, 1, 38, 56, 32, 0
        DC8 8, 248, 8, 0, 0, 0, 0, 0, 32, 63, 32, 32, 32, 32, 48, 0, 8, 248
        DC8 248, 0, 248, 248, 8, 0, 32, 63, 0, 63, 0, 63, 32, 0, 8, 248, 48
        DC8 192, 0, 8, 248, 8, 32, 63, 32, 0, 7, 24, 63, 0, 224, 16, 8, 8, 8
        DC8 16, 224, 0, 15, 16, 32, 32, 32, 16, 15, 0, 8, 248, 8, 8, 8, 8, 240
        DC8 0, 32, 63, 33, 1, 1, 1, 0, 0, 224, 16, 8, 8, 8, 16, 224, 0, 15, 24
        DC8 36, 36, 56, 80, 79, 0, 8, 248, 136, 136, 136, 136, 112, 0, 32, 63
        DC8 32, 0, 3, 12, 48, 32, 0, 112, 136, 8, 8, 8, 56, 0, 0, 56, 32, 33
        DC8 33, 34, 28, 0, 24, 8, 8, 248, 8, 8, 24, 0, 0, 0, 32, 63, 32, 0, 0
        DC8 0, 8, 248, 8, 0, 0, 8, 248, 8, 0, 31, 32, 32, 32, 32, 31, 0, 8, 120
        DC8 136, 0, 0, 200, 56, 8, 0, 0, 7, 56, 14, 1, 0, 0, 248, 8, 0, 248, 0
        DC8 8, 248, 0, 3, 60, 7, 0, 7, 60, 3, 0, 8, 24, 104, 128, 128, 104, 24
        DC8 8, 32, 48, 44, 3, 3, 44, 48, 32, 8, 56, 200, 0, 200, 56, 8, 0, 0, 0
        DC8 32, 63, 32, 0, 0, 0, 16, 8, 8, 8, 200, 56, 8, 0, 32, 56, 38, 33, 32
        DC8 32, 24, 0, 0, 0, 0, 254, 2, 2, 2, 0, 0, 0, 0, 127, 64, 64, 64, 0, 0
        DC8 12, 48, 192, 0, 0, 0, 0, 0, 0, 0, 1, 6, 56, 192, 0, 0, 2, 2, 2, 254
        DC8 0, 0, 0, 0, 64, 64, 64, 127, 0, 0, 0, 0, 0, 4, 2, 2, 2, 4, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 128, 128, 0, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 128, 128, 128, 0, 0, 0, 25, 36, 34, 34, 34, 63, 32, 8, 248, 0
        DC8 128, 128, 0, 0, 0, 0, 63, 17, 32, 32, 17, 14, 0, 0, 0, 0, 128, 128
        DC8 128, 0, 0, 0, 14, 17, 32, 32, 32, 17, 0, 0, 0, 0, 128, 128, 136
        DC8 248, 0, 0, 14, 17, 32, 32, 16, 63, 32, 0, 0, 128, 128, 128, 128, 0
        DC8 0, 0, 31, 34, 34, 34, 34, 19, 0, 0, 128, 128, 240, 136, 136, 136
        DC8 24, 0, 32, 32, 63, 32, 32, 0, 0, 0, 0, 128, 128, 128, 128, 128, 0
        DC8 0, 107, 148, 148, 148, 147, 96, 0, 8, 248, 0, 128, 128, 128, 0, 0
        DC8 32, 63, 33, 0, 0, 32, 63, 32, 0, 128, 152, 152, 0, 0, 0, 0, 0, 32
        DC8 32, 63, 32, 32, 0, 0, 0, 0, 0, 128, 152, 152, 0, 0, 0, 192, 128
        DC8 128, 128, 127, 0, 0, 8, 248, 0, 0, 128, 128, 128, 0, 32, 63, 36, 2
        DC8 45, 48, 32, 0, 0, 8, 8, 248, 0, 0, 0, 0, 0, 32, 32, 63, 32, 32, 0
        DC8 0, 128, 128, 128, 128, 128, 128, 128, 0, 32, 63, 32, 0, 63, 32, 0
        DC8 63, 128, 128, 0, 128, 128, 128, 0, 0, 32, 63, 33, 0, 0, 32, 63, 32
        DC8 0, 0, 128, 128, 128, 128, 0, 0, 0, 31, 32, 32, 32, 32, 31, 0, 128
        DC8 128, 0, 128, 128, 0, 0, 0, 128, 255, 161, 32, 32, 17, 14, 0, 0, 0
        DC8 0, 128, 128, 128, 128, 0, 0, 14, 17, 32, 32, 160, 255, 128, 128
        DC8 128, 128, 0, 128, 128, 128, 0, 32, 32, 63, 33, 32, 0, 1, 0, 0, 0
        DC8 128, 128, 128, 128, 128, 0, 0, 51, 36, 36, 36, 36, 25, 0, 0, 128
        DC8 128, 224, 128, 128, 0, 0, 0, 0, 0, 31, 32, 32, 0, 0, 128, 128, 0, 0
        DC8 0, 128, 128, 0, 0, 31, 32, 32, 32, 16, 63, 32, 128, 128, 128, 0, 0
        DC8 128, 128, 128, 0, 1, 14, 48, 8, 6, 1, 0, 128, 128, 0, 128, 0, 128
        DC8 128, 128, 15, 48, 12, 3, 12, 48, 15, 0, 0, 128, 128, 0, 128, 128
        DC8 128, 0, 0, 32, 49, 46, 14, 49, 32, 0, 128, 128, 128, 0, 0, 128, 128
        DC8 128, 128, 129, 142, 112, 24, 6, 1, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 0, 0, 33, 48, 44, 34, 33, 48, 0, 0, 0, 0, 0, 128, 124, 2, 2, 0
        DC8 0, 0, 0, 0, 63, 64, 64, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255
        DC8 0, 0, 0, 0, 2, 2, 124, 128, 0, 0, 0, 0, 64, 64, 63, 0, 0, 0, 0, 0
        DC8 6, 1, 1, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0
//  438 {
//  439 	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0
//  440   0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//!1
//  441   0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//"2
//  442   0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//#3
//  443   0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$4
//  444   0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//%5
//  445   0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//&6
//  446   0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//'7
//  447   0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//(8
//  448   0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//)9
//  449   0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//*10
//  450   0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+11
//  451   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//,12
//  452   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//-13
//  453   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//.14
//  454   0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,///15
//  455   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//016
//  456   0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//117
//  457   0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//218
//  458   0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//319
//  459   0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//420
//  460   0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//521
//  461   0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//622
//  462   0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//723
//  463   0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//824
//  464   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//925
//  465   0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//:26
//  466   0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//;27
//  467   0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//<28
//  468   0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//=29
//  469   0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//>30
//  470   0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//?31
//  471   0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@32
//  472   0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A33
//  473   0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B34
//  474   0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C35
//  475   0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D36
//  476   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E37
//  477   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F38
//  478   0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G39
//  479   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H40
//  480   0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I41
//  481   0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J42
//  482   0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K43
//  483   0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L44
//  484   0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M45
//  485   0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N46
//  486   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O47
//  487   0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P48
//  488   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q49
//  489   0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R50
//  490   0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S51
//  491   0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T52
//  492   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U53
//  493   0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V54
//  494   0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W55
//  495   0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X56
//  496   0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y57
//  497   0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z58
//  498   0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[59
//  499   0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\60
//  500   0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//]61
//  501   0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^62
//  502   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_63
//  503   0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//`64
//  504   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a65
//  505   0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b66
//  506   0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c67
//  507   0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d68
//  508   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e69
//  509   0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f70
//  510   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g71
//  511   0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h72
//  512   0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i73
//  513   0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j74
//  514   0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k75
//  515   0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l76
//  516   0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m77
//  517   0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n78
//  518   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o79
//  519   0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p80
//  520   0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q81
//  521   0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r82
//  522   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s83
//  523   0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t84
//  524   0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//u85
//  525   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v86
//  526   0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w87
//  527   0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x88
//  528   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y89
//  529   0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z90
//  530   0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{91
//  531   0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//|92
//  532   0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//}93
//  533   0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~94
//  534 
//  535 };
//  536 //数据水平，字节垂直

        SECTION `.data`:DATA:REORDER:NOROOT(2)
        DATA
//  537 uint8 longqiu96x64[768] = {
longqiu96x64:
        DATA8
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 192
        DC8 192, 192, 96, 96, 96, 48, 48, 48, 56, 24, 24, 24, 24, 12, 12, 12
        DC8 12, 12, 14, 14, 14, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 14, 14
        DC8 12, 12, 12, 12, 12, 28, 24, 24, 24, 24, 48, 48, 48, 112, 96, 96
        DC8 224, 192, 192, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 192, 224, 112, 48, 56, 28, 12
        DC8 6, 7, 3, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 128, 128, 0, 0, 0, 0, 0, 128, 128, 240, 248, 248, 240, 128, 0
        DC8 0, 128, 224, 240, 248, 252, 60, 28, 12, 12, 28, 252, 248, 240, 224
        DC8 128, 0, 0, 0, 192, 192, 193, 1, 3, 3, 7, 6, 14, 12, 24, 56, 112, 96
        DC8 192, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 192, 240, 120, 30, 7, 51, 49
        DC8 56, 120, 252, 254, 246, 192, 128, 0, 0, 0, 0, 192, 192, 128, 0, 248
        DC8 252, 222, 14, 15, 30, 190, 252, 240, 6, 255, 255, 255, 255, 3, 7
        DC8 255, 255, 254, 128, 30, 63, 255, 255, 249, 249, 255, 255, 127, 31
        DC8 14, 127, 255, 255, 255, 193, 128, 206, 206, 198, 192, 255, 255, 255
        DC8 255, 63, 128, 252, 252, 253, 125, 1, 192, 248, 248, 240, 112, 0
        DC8 192, 128, 128, 128, 0, 0, 1, 7, 14, 60, 248, 224, 128, 0, 0, 254
        DC8 255, 3, 0, 0, 0, 0, 0, 0, 0, 1, 3, 15, 31, 127, 254, 252, 240, 240
        DC8 240, 127, 127, 62, 16, 3, 3, 15, 31, 31, 15, 15, 3, 4, 7, 7, 7, 7
        DC8 6, 0, 7, 7, 7, 15, 30, 63, 127, 127, 127, 121, 115, 63, 63, 31, 14
        DC8 0, 1, 3, 3, 7, 7, 6, 14, 15, 15, 31, 63, 61, 8, 12, 31, 31, 31, 25
        DC8 60, 127, 127, 127, 243, 240, 252, 254, 63, 31, 7, 1, 0, 0, 0, 0, 0
        DC8 0, 0, 207, 255, 112, 0, 3, 31, 126, 240, 192, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 3, 3, 1, 1, 0, 0, 0, 0, 192, 192, 64, 64, 64, 64, 248, 120
        DC8 64, 192, 64, 88, 88, 64, 64, 64, 0, 0, 0, 0, 0, 128, 128, 128, 0, 0
        DC8 0, 0, 0, 0, 96, 240, 224, 32, 32, 32, 32, 48, 48, 56, 24, 16, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 224, 248, 63, 15, 0, 0, 0, 0, 0, 0, 3, 7, 14, 28, 56, 48, 96
        DC8 224, 192, 128, 0, 0, 0, 0, 0, 0, 0, 64, 96, 96, 112, 48, 24, 12, 7
        DC8 17, 8, 63, 125, 102, 231, 227, 192, 192, 192, 224, 96, 0, 0, 0, 3
        DC8 3, 3, 0, 0, 96, 96, 96, 96, 96, 127, 127, 97, 97, 97, 97, 127, 127
        DC8 97, 97, 225, 224, 224, 192, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 192, 192, 224, 112, 56, 24, 12, 7, 3, 1, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 3, 6, 6, 12, 12, 24, 24, 56
        DC8 48, 48, 112, 96, 96, 224, 192, 192, 192, 192, 192, 128, 128, 128
        DC8 129, 128, 128, 128, 128, 128, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128
        DC8 128, 128, 128, 128, 128, 128, 128, 192, 192, 192, 192, 192, 96, 96
        DC8 96, 48, 48, 48, 24, 24, 28, 12, 14, 6, 7, 3, 3, 1, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1
        DC8 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
//  538 /* 
//  539   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  540   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0X80,0XC0,0XC0,0XC0,
//  541   0XC0,0XC0,0X60,0X60,0X60,0X60,0X60,0X70,0X70,0X70,0X30,0X30,0X30,0X30,0X30,0X30,
//  542   0X30,0X30,0X30,0X30,0X30,0X30,0X30,0X70,0X70,0X60,0X60,0X60,0X60,0X60,0XE0,0XC0,
//  543   0XC0,0XC0,0XC0,0X80,0X80,0X80,0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  544   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  545   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0XC0,0XE0,0X60,0X30,
//  546   0X38,0X18,0X1C,0X0C,0X0E,0X06,0X06,0X03,0X03,0X03,0X01,0X01,0X01,0X01,0X00,0X00,
//  547   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  548   0X80,0XC0,0XC0,0X80,0X00,0X00,0X00,0X00,0X00,0X80,0XC0,0XE0,0XE0,0XE0,0X60,0X60,
//  549   0XE0,0XE0,0XC0,0X81,0X01,0X01,0X03,0X03,0X03,0X07,0X06,0X0E,0X0C,0X1C,0X18,0X38,
//  550   0X30,0X70,0X60,0XC0,0XC0,0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  551   0X00,0X00,0X00,0X80,0XC0,0XF0,0X38,0X9C,0X8E,0XC7,0XC3,0XE1,0XF1,0XB0,0X00,0X00,
//  552   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XC0,0XE0,0XF0,0X70,0X78,0XF0,0XF0,0XE0,
//  553   0X80,0X30,0XF8,0XF8,0XF8,0XF8,0X1C,0X3C,0XFC,0XF8,0XF0,0X00,0XF0,0XF8,0XFC,0XFC,
//  554   0XCF,0XCF,0XFF,0XFF,0XFC,0XF8,0X70,0XFC,0XFF,0XFF,0XFF,0X0F,0X01,0X70,0X70,0X30,
//  555   0X00,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0XE0,0XE0,0XEE,0XEE,0X0E,0X00,0XC0,0XC0,0X80,
//  556   0X80,0X00,0X00,0X00,0X01,0X03,0X03,0X06,0X0C,0X3C,0X70,0XE0,0XC0,0X00,0X00,0X00,
//  557   0X00,0XF0,0XFE,0X1F,0X03,0X00,0X00,0X01,0X01,0X01,0X03,0X0F,0X1F,0X7F,0XFE,0XFC,
//  558   0XF0,0XE0,0X80,0X80,0X86,0XFE,0XFC,0XF0,0X87,0X1F,0X1E,0X78,0XF8,0XF8,0X7D,0X7F,
//  559   0X1F,0X20,0X3F,0X3F,0X3F,0X3F,0X30,0X00,0X3F,0X3F,0X3F,0X7C,0XF0,0XF9,0XFF,0XFF,
//  560   0XFF,0XCF,0X9F,0XFF,0XFB,0XF8,0X70,0X03,0X0F,0X1F,0X1F,0X3E,0X3C,0X36,0X76,0X7E,
//  561   0X7E,0XFF,0XFF,0XEF,0X47,0X61,0XFC,0XFF,0XFF,0XCF,0XE3,0XF8,0XFE,0XFF,0X9F,0X87,
//  562   0XE3,0XF0,0XFE,0XFC,0X3C,0X0C,0X00,0X00,0X00,0X00,0X00,0X01,0X07,0X7F,0XFC,0X80,
//  563   0X00,0X1F,0XFF,0XF0,0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X03,
//  564   0X1F,0X1F,0X0F,0X0F,0X07,0X03,0X03,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0XC0,0XC0,
//  565   0X00,0X00,0X00,0XC0,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X03,0X03,
//  566   0X03,0X03,0X03,0X01,0X01,0X00,0X00,0X80,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0XC0,
//  567   0XC0,0X80,0X01,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X03,0X03,0X03,0X07,0X0F,
//  568   0X0F,0X0F,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XC0,0XFE,0X7F,0X03,
//  569   0X00,0X00,0X00,0X03,0X07,0X1E,0X38,0X70,0XE0,0XC0,0X80,0X00,0X00,0X00,0X00,0X00,
//  570   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X06,0X86,0X82,0XC2,0X62,0X3A,0X8F,0X43,
//  571   0XFA,0XEE,0X32,0X3A,0X1A,0X02,0X02,0X02,0X00,0X00,0X00,0X00,0X00,0X1C,0X1C,0X1C,
//  572   0X00,0X00,0X00,0X00,0X00,0X00,0X03,0XFF,0XFF,0X09,0X09,0X09,0X09,0XF9,0XF9,0X09,
//  573   0X08,0X08,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  574   0X00,0X00,0X00,0X00,0X00,0X80,0XC0,0XC0,0X60,0X38,0X1C,0X0F,0X07,0X01,0X00,0X00,
//  575   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X01,0X03,0X07,0X0E,0X0C,0X18,
//  576   0X18,0X30,0X30,0X60,0X60,0XC0,0XC2,0XC3,0X83,0X83,0X81,0X00,0X00,0X00,0X00,0X00,
//  577   0X01,0X03,0X03,0X07,0X07,0X06,0X0E,0X06,0X07,0X03,0X00,0X00,0X00,0X00,0X00,0X00,
//  578   0X00,0X00,0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X03,
//  579   0X03,0X07,0X07,0X07,0X06,0X06,0X80,0X80,0X80,0XC0,0XC0,0XE0,0X60,0X70,0X30,0X38,
//  580   0X18,0X1C,0X0E,0X06,0X07,0X03,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  581   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  582   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X01,0X01,0X03,0X03,0X03,0X07,0X06,0X06,
//  583   0X06,0X06,0X0E,0X0C,0X0C,0X0C,0X0C,0X0C,0X0C,0X1C,0X1C,0X1C,0X18,0X18,0X18,0X18,
//  584   0X18,0X18,0X18,0X18,0X1C,0X1C,0X1C,0X0C,0X0C,0X0C,0X0C,0X0C,0X0C,0X0C,0X06,0X06,
//  585   0X06,0X06,0X06,0X03,0X03,0X03,0X01,0X01,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  586   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  587 */
//  588 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  589 0X00,0X00,0X80,0X80,0XC0,0XC0,0XC0,0X60,0X60,0X60,0X30,0X30,0X30,0X38,0X18,0X18,
//  590 0X18,0X18,0X0C,0X0C,0X0C,0X0C,0X0C,0X0E,0X0E,0X0E,0X06,0X06,0X06,0X06,0X06,0X06,
//  591 0X06,0X06,0X06,0X06,0X06,0X06,0X06,0X0E,0X0E,0X0C,0X0C,0X0C,0X0C,0X0C,0X1C,0X18,
//  592 0X18,0X18,0X18,0X30,0X30,0X30,0X70,0X60,0X60,0XE0,0XC0,0XC0,0X80,0X80,0X00,0X00,
//  593 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  594 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X80,0XC0,0XE0,0X70,0X30,0X38,0X1C,0X0C,0X06,
//  595 0X07,0X03,0X03,0X01,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  596 0X00,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0X80,0X00,0X00,0X00,0X00,0X00,0X80,0X80,
//  597 0XF0,0XF8,0XF8,0XF0,0X80,0X00,0X00,0X80,0XE0,0XF0,0XF8,0XFC,0X3C,0X1C,0X0C,0X0C,
//  598 0X1C,0XFC,0XF8,0XF0,0XE0,0X80,0X00,0X00,0X00,0XC0,0XC0,0XC1,0X01,0X03,0X03,0X07,
//  599 0X06,0X0E,0X0C,0X18,0X38,0X70,0X60,0XC0,0X80,0X80,0X00,0X00,0X00,0X00,0X00,0X00,
//  600 0X00,0X00,0XC0,0XF0,0X78,0X1E,0X07,0X33,0X31,0X38,0X78,0XFC,0XFE,0XF6,0XC0,0X80,
//  601 0X00,0X00,0X00,0X00,0XC0,0XC0,0X80,0X00,0XF8,0XFC,0XDE,0X0E,0X0F,0X1E,0XBE,0XFC,
//  602 0XF0,0X06,0XFF,0XFF,0XFF,0XFF,0X03,0X07,0XFF,0XFF,0XFE,0X80,0X1E,0X3F,0XFF,0XFF,
//  603 0XF9,0XF9,0XFF,0XFF,0X7F,0X1F,0X0E,0X7F,0XFF,0XFF,0XFF,0XC1,0X80,0XCE,0XCE,0XC6,
//  604 0XC0,0XFF,0XFF,0XFF,0XFF,0X3F,0X80,0XFC,0XFC,0XFD,0X7D,0X01,0XC0,0XF8,0XF8,0XF0,
//  605 0X70,0X00,0XC0,0X80,0X80,0X80,0X00,0X00,0X01,0X07,0X0E,0X3C,0XF8,0XE0,0X80,0X00,
//  606 0X00,0XFE,0XFF,0X03,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X03,0X0F,0X1F,0X7F,
//  607 0XFE,0XFC,0XF0,0XF0,0XF0,0X7F,0X7F,0X3E,0X10,0X03,0X03,0X0F,0X1F,0X1F,0X0F,0X0F,
//  608 0X03,0X04,0X07,0X07,0X07,0X07,0X06,0X00,0X07,0X07,0X07,0X0F,0X1E,0X3F,0X7F,0X7F,
//  609 0X7F,0X79,0X73,0X3F,0X3F,0X1F,0X0E,0X00,0X01,0X03,0X03,0X07,0X07,0X06,0X0E,0X0F,
//  610 0X0F,0X1F,0X3F,0X3D,0X08,0X0C,0X1F,0X1F,0X1F,0X19,0X3C,0X7F,0X7F,0X7F,0XF3,0XF0,
//  611 0XFC,0XFE,0X3F,0X1F,0X07,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XCF,0XFF,0X70,
//  612 0X00,0X03,0X1F,0X7E,0XF0,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  613 0X03,0X03,0X01,0X01,0X00,0X00,0X00,0X00,0XC0,0XC0,0X40,0X40,0X40,0X40,0XF8,0X78,
//  614 0X40,0XC0,0X40,0X58,0X58,0X40,0X40,0X40,0X00,0X00,0X00,0X00,0X00,0X80,0X80,0X80,
//  615 0X00,0X00,0X00,0X00,0X00,0X00,0X60,0XF0,0XE0,0X20,0X20,0X20,0X20,0X30,0X30,0X38,
//  616 0X18,0X10,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,
//  617 0X01,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X80,0XE0,0XF8,0X3F,0X0F,0X00,
//  618 0X00,0X00,0X00,0X00,0X00,0X03,0X07,0X0E,0X1C,0X38,0X30,0X60,0XE0,0XC0,0X80,0X00,
//  619 0X00,0X00,0X00,0X00,0X00,0X00,0X40,0X60,0X60,0X70,0X30,0X18,0X0C,0X07,0X11,0X08,
//  620 0X3F,0X7D,0X66,0XE7,0XE3,0XC0,0XC0,0XC0,0XE0,0X60,0X00,0X00,0X00,0X03,0X03,0X03,
//  621 0X00,0X00,0X60,0X60,0X60,0X60,0X60,0X7F,0X7F,0X61,0X61,0X61,0X61,0X7F,0X7F,0X61,
//  622 0X61,0XE1,0XE0,0XE0,0XC0,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  623 0X00,0X80,0XC0,0XC0,0XE0,0X70,0X38,0X18,0X0C,0X07,0X03,0X01,0X00,0X00,0X00,0X00,
//  624 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X01,0X03,
//  625 0X03,0X06,0X06,0X0C,0X0C,0X18,0X18,0X38,0X30,0X30,0X70,0X60,0X60,0XE0,0XC0,0XC0,
//  626 0XC0,0XC0,0XC0,0X80,0X80,0X80,0X81,0X80,0X80,0X80,0X80,0X80,0X00,0X00,0X00,0X00,
//  627 0X00,0X00,0X00,0X00,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,0XC0,0XC0,
//  628 0XC0,0XC0,0XC0,0X60,0X60,0X60,0X30,0X30,0X30,0X18,0X18,0X1C,0X0C,0X0E,0X06,0X07,
//  629 0X03,0X03,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  630 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  631 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  632 0X00,0X00,0X01,0X01,0X01,0X01,0X01,0X01,0X01,0X03,0X03,0X03,0X03,0X03,0X03,0X03,
//  633 0X03,0X03,0X03,0X03,0X03,0X03,0X03,0X01,0X01,0X01,0X01,0X01,0X01,0X01,0X00,0X00,
//  634 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  635 0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  636 
//  637 };

        SECTION `.data`:DATA:REORDER:NOROOT(2)
        DATA
//  638 uint8 LIBLOGO60x58[480] = { 
LIBLOGO60x58:
        DATA8
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192
        DC8 224, 248, 252, 254, 127, 63, 15, 15, 7, 7, 7, 135, 199, 199, 199
        DC8 231, 239, 255, 255, 255, 239, 231, 231, 231, 231, 231, 239, 255
        DC8 255, 255, 239, 231, 231, 231, 231, 231, 247, 7, 15, 63, 127, 255
        DC8 254, 252, 240, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 220, 223
        DC8 223, 223, 223, 215, 1, 0, 0, 0, 0, 0, 0, 62, 127, 255, 255, 227
        DC8 225, 225, 255, 255, 255, 224, 224, 224, 224, 224, 224, 224, 255
        DC8 255, 255, 224, 224, 224, 224, 193, 131, 7, 0, 0, 0, 0, 1, 215, 223
        DC8 223, 223, 223, 220, 216, 0, 0, 0, 0, 0, 0, 0, 1, 3, 15, 31, 63, 255
        DC8 255, 254, 248, 240, 224, 192, 128, 0, 0, 248, 240, 224, 192, 192
        DC8 192, 255, 255, 255, 192, 192, 192, 192, 192, 192, 192, 255, 255
        DC8 255, 192, 224, 225, 243, 255, 127, 63, 0, 192, 224, 248, 254, 255
        DC8 255, 255, 63, 31, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
        DC8 7, 15, 63, 127, 255, 254, 252, 249, 243, 193, 129, 1, 1, 255, 255
        DC8 255, 1, 1, 1, 1, 1, 1, 1, 255, 255, 255, 3, 1, 129, 192, 240, 252
        DC8 254, 255, 255, 127, 63, 15, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 15, 63, 127, 255
        DC8 255, 255, 251, 243, 227, 195, 3, 3, 3, 3, 3, 131, 195, 243, 243
        DC8 251, 255, 255, 255, 127, 63, 15, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 3, 7, 7, 31, 63, 127, 255, 254, 252, 252, 254, 255, 255
        DC8 127, 63, 15, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 15, 15, 7, 1, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
//  639   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  640   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  641   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  642   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  643   0X00,0X00,0XC0,0XE0,0XF8,0XFC,0XFE,0X7F,0X3F,0X0F,0X0F,0X07,0X07,0X07,0X87,0XC7,
//  644   0XC7,0XC7,0XE7,0XEF,0XFF,0XFF,0XFF,0XEF,0XE7,0XE7,0XE7,0XE7,0XE7,0XEF,0XFF,0XFF,
//  645   0XFF,0XEF,0XE7,0XE7,0XE7,0XE7,0XE7,0XF7,0X07,0X0F,0X3F,0X7F,0XFF,0XFE,0XFC,0XF0,
//  646   0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XD8,0XDC,0XDF,0XDF,0XDF,
//  647   0XDF,0XD7,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X3E,0X7F,0XFF,0XFF,0XE3,0XE1,0XE1,
//  648   0XFF,0XFF,0XFF,0XE0,0XE0,0XE0,0XE0,0XE0,0XE0,0XE0,0XFF,0XFF,0XFF,0XE0,0XE0,0XE0,
//  649   0XE0,0XC1,0X83,0X07,0X00,0X00,0X00,0X00,0X01,0XD7,0XDF,0XDF,0XDF,0XDF,0XDC,0XD8,
//  650   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X03,0X0F,0X1F,0X3F,0XFF,0XFF,0XFE,0XF8,
//  651   0XF0,0XE0,0XC0,0X80,0X00,0X00,0XF8,0XF0,0XE0,0XC0,0XC0,0XC0,0XFF,0XFF,0XFF,0XC0,
//  652   0XC0,0XC0,0XC0,0XC0,0XC0,0XC0,0XFF,0XFF,0XFF,0XC0,0XE0,0XE1,0XF3,0XFF,0X7F,0X3F,
//  653   0X00,0XC0,0XE0,0XF8,0XFE,0XFF,0XFF,0XFF,0X3F,0X1F,0X07,0X01,0X00,0X00,0X00,0X00,
//  654   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X01,0X07,0X0F,0X3F,0X7F,0XFF,
//  655   0XFE,0XFC,0XF9,0XF3,0XC1,0X81,0X01,0X01,0XFF,0XFF,0XFF,0X01,0X01,0X01,0X01,0X01,
//  656   0X01,0X01,0XFF,0XFF,0XFF,0X03,0X01,0X81,0XC0,0XF0,0XFC,0XFE,0XFF,0XFF,0X7F,0X3F,
//  657   0X0F,0X07,0X03,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  658   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X03,0X07,0X0F,0X3F,
//  659   0X7F,0XFF,0XFF,0XFF,0XFB,0XF3,0XE3,0XC3,0X03,0X03,0X03,0X03,0X03,0X83,0XC3,0XF3,
//  660   0XF3,0XFB,0XFF,0XFF,0XFF,0X7F,0X3F,0X0F,0X03,0X01,0X00,0X00,0X00,0X00,0X00,0X00,
//  661   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  662   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X03,0X07,
//  663   0X07,0X1F,0X3F,0X7F,0XFF,0XFE,0XFC,0XFC,0XFE,0XFF,0XFF,0X7F,0X3F,0X0F,0X07,0X03,
//  664   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  665   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  666   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  667   0X00,0X03,0X07,0X0F,0X0F,0X07,0X01,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  668   0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
//  669 }; 
//  670 
//  671 
//  672 

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
        DATA
//  673  uint8 str1[6];
str1:
        DS8 8

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
        DATA
//  674  uint8 str2[6];
str2:
        DS8 8

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
        DATA
//  675  uint8 str3[8];
str3:
        DS8 8
//  676 

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
        DATA
//  677  uint8 str4[6];
str4:
        DS8 8

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
        DATA
//  678  uint8 str5[6];
str5:
        DS8 8

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
        DATA
//  679  uint8 str6[8];
str6:
        DS8 8
//  680 
//  681 
//  682 

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  683 void LCD_WrDat(uint8 data)    //数据逐位发送
//  684 {
LCD_WrDat:
        PUSH     {R4}
//  685 	uint8 i=8;
        MOVS     R2,#+8
//  686 	//LCD_CS=0;;
//  687 	LCD_DC=1;    //DC为1，表示数据发送
        MOVS     R1,#+1
        LDR.W    R3,??DataTable12_2  ;; 0x43fe1024
        STR      R1,[R3, #+0]
//  688   LCD_SCL=0;
        LDR.W    R3,??DataTable12_3  ;; 0x43fe1020
        MOVS     R1,#+0
        STR      R1,[R3, #+0]
        B.N      ??LCD_WrDat_0
//  689   //asm("nop");    
//  690   while(i--)
//  691   {
//  692     if(data&0x80){LCD_SDA=1;}
//  693     else{LCD_SDA=0;}
??LCD_WrDat_1:
        MOVS     R1,#+0
        LDR.W    R4,??DataTable12_4  ;; 0x43fe101c
        STR      R1,[R4, #+0]
        B.N      ??LCD_WrDat_2
??LCD_WrDat_3:
        LSLS     R1,R0,#+24
        BPL.N    ??LCD_WrDat_1
        MOVS     R1,#+1
        LDR.W    R4,??DataTable12_4  ;; 0x43fe101c
        STR      R1,[R4, #+0]
//  694     LCD_SCL=1; 
??LCD_WrDat_2:
        MOVS     R1,#+1
        STR      R1,[R3, #+0]
//  695     asm("nop");
        nop
//  696 		//asm("nop");            
//  697     LCD_SCL=0;;    
        MOVS     R1,#+0
        STR      R1,[R3, #+0]
//  698     data<<=1;    
        LSLS     R0,R0,#+1
//  699   }
??LCD_WrDat_0:
        MOVS     R1,R2
        SUBS     R2,R1,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        CMP      R1,#+0
        BNE.N    ??LCD_WrDat_3
//  700 	//LCD_CS=1;
//  701 }
??LCD_WrDat_4:
        POP      {R4}
        BX       LR               ;; return

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  702 void LCD_WrCmd(uint8 cmd)
//  703 {
LCD_WrCmd:
        PUSH     {R4}
//  704 	uint8 i=8;
        MOVS     R2,#+8
//  705 	
//  706 	//LCD_CS=0;;
//  707 	LCD_DC=0;;
        MOVS     R1,#+0
        LDR.W    R3,??DataTable12_2  ;; 0x43fe1024
        STR      R1,[R3, #+0]
//  708   LCD_SCL=0;;
        LDR.W    R3,??DataTable12_3  ;; 0x43fe1020
        MOVS     R1,#+0
        STR      R1,[R3, #+0]
        B.N      ??LCD_WrCmd_0
//  709   //asm("nop");   
//  710   while(i--)
//  711   {
//  712     if(cmd&0x80){LCD_SDA=1;}
//  713     else{LCD_SDA=0;;}
??LCD_WrCmd_1:
        MOVS     R1,#+0
        LDR.W    R4,??DataTable12_4  ;; 0x43fe101c
        STR      R1,[R4, #+0]
        B.N      ??LCD_WrCmd_2
??LCD_WrCmd_3:
        LSLS     R1,R0,#+24
        BPL.N    ??LCD_WrCmd_1
        MOVS     R1,#+1
        LDR.W    R4,??DataTable12_4  ;; 0x43fe101c
        STR      R1,[R4, #+0]
//  714     LCD_SCL=1;;
??LCD_WrCmd_2:
        MOVS     R1,#+1
        STR      R1,[R3, #+0]
//  715     asm("nop");;
        nop
//  716 		//asm("nop");             
//  717     LCD_SCL=0;;    
        MOVS     R1,#+0
        STR      R1,[R3, #+0]
//  718     cmd<<=1;;   
        LSLS     R0,R0,#+1
//  719   } 	
??LCD_WrCmd_0:
        MOVS     R1,R2
        SUBS     R2,R1,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        CMP      R1,#+0
        BNE.N    ??LCD_WrCmd_3
//  720 	//LCD_CS=1;
//  721 }
??LCD_WrCmd_4:
        POP      {R4}
        BX       LR               ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  722 void LCD_Set_Pos(uint8 x, uint8 y)    //设置位置
//  723 { 
LCD_Set_Pos:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  724   LCD_WrCmd(0xb0+y);       //表示从第y页开始
        SUBS     R0,R1,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  725   LCD_WrCmd(((x&0xf0)>>4)|0x10);
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LSRS     R0,R0,#+4
        ORRS     R0,R0,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  726   LCD_WrCmd((x&0x0f)|0x01); 
        ANDS     R4,R4,#0xF
        ORRS     R4,R4,#0x1
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  727 }
        POP      {R4,PC}          ;; return
//  728 //************************************************

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  729 void LCD_Fill_Line(uint8 line,uint8 bmp_data)   //自加填充整行亮或暗
//  730 {
LCD_Fill_Line:
        PUSH     {R3-R5,LR}
        MOVS     R4,R1
//  731   LCD_WrCmd(0xb0+line);
        SUBS     R0,R0,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  732   LCD_WrCmd(0x01);
        MOVS     R0,#+1
        BL       LCD_WrCmd
//  733   LCD_WrCmd(0x10);
        MOVS     R0,#+16
        BL       LCD_WrCmd
//  734   for(uint8 x=0;x<X_WIDTH;x++)
        MOVS     R5,#+0
        B.N      ??LCD_Fill_Line_0
//  735     LCD_WrDat(bmp_data);
??LCD_Fill_Line_1:
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R5,R5,#+1
??LCD_Fill_Line_0:
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+128
        BLT.N    ??LCD_Fill_Line_1
//  736 }
        POP      {R0,R4,R5,PC}    ;; return
//  737 //************************************************

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  738 void LCD_Fill(uint8 bmp_data)     //填充整个屏幕白或黑
//  739 {
LCD_Fill:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
//  740 	uint8 y,x;
//  741 	
//  742 	for(y=0;y<8;y++)
        MOVS     R5,#+0
        B.N      ??LCD_Fill_0
//  743 	{
//  744 		LCD_WrCmd(0xb0+y);
//  745 		LCD_WrCmd(0x01);
//  746 		LCD_WrCmd(0x10);
//  747 		for(x=0;x<X_WIDTH;x++)
//  748 			LCD_WrDat(bmp_data);
??LCD_Fill_1:
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R6,R6,#+1
??LCD_Fill_2:
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+128
        BLT.N    ??LCD_Fill_1
        ADDS     R5,R5,#+1
??LCD_Fill_0:
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+8
        BGE.N    ??LCD_Fill_3
        SUBS     R0,R5,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
        MOVS     R0,#+1
        BL       LCD_WrCmd
        MOVS     R0,#+16
        BL       LCD_WrCmd
        MOVS     R6,#+0
        B.N      ??LCD_Fill_2
//  749 	}
//  750 }
??LCD_Fill_3:
        POP      {R4-R6,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  751 void LCD_CLS(void)     //清屏
//  752 {
LCD_CLS:
        PUSH     {R3-R5,LR}
//  753 	uint8 y,x;	
//  754 	for(y=0;y<8;y++)
        MOVS     R4,#+0
        B.N      ??LCD_CLS_0
//  755 	{
//  756 		LCD_WrCmd(0xb0+y);
//  757 		LCD_WrCmd(0x01);
//  758 		LCD_WrCmd(0x10); 
//  759 		for(x=0;x<X_WIDTH;x++)
//  760 			LCD_WrDat(0);
??LCD_CLS_1:
        MOVS     R0,#+0
        BL       LCD_WrDat
        ADDS     R5,R5,#+1
??LCD_CLS_2:
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+128
        BLT.N    ??LCD_CLS_1
        ADDS     R4,R4,#+1
??LCD_CLS_0:
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+8
        BGE.N    ??LCD_CLS_3
        SUBS     R0,R4,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
        MOVS     R0,#+1
        BL       LCD_WrCmd
        MOVS     R0,#+16
        BL       LCD_WrCmd
        MOVS     R5,#+0
        B.N      ??LCD_CLS_2
//  761 	}
//  762 }
??LCD_CLS_3:
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  763 void LCD_DLY_ms(uint32 ms)
//  764 {                         
LCD_DLY_ms:
        B.N      ??LCD_DLY_ms_0
//  765   uint32 a;
//  766   while(ms)
//  767   {
//  768     a=1335;
??LCD_DLY_ms_1:
        MOVW     R2,#+1335
//  769     while(a--);
??LCD_DLY_ms_2:
        MOVS     R1,R2
        SUBS     R2,R1,#+1
        CMP      R1,#+0
        BNE.N    ??LCD_DLY_ms_2
//  770     ms--;
        SUBS     R0,R0,#+1
//  771   }
??LCD_DLY_ms_0:
        CMP      R0,#+0
        BNE.N    ??LCD_DLY_ms_1
//  772   return;
        BX       LR               ;; return
//  773 }

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  774 void adjust(uint8 a)
//  775 {
adjust:
        PUSH     {R7,LR}
//  776   LCD_WrCmd(a);	//指令数据0x0000~0x003f  
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  777 }
        POP      {R0,PC}          ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  778 void SetStartColumn(uint8 d)
//  779 {
SetStartColumn:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  780 	LCD_WrCmd(0x00+d%16);		// Set Lower Column Start Address for Page Addressing Mode
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        MOVS     R1,#+16
        SDIV     R2,R0,R1
        MLS      R0,R1,R2,R0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  781 						//   Default => 0x00
//  782 	LCD_WrCmd(0x10+d/16);		// Set Higher Column Start Address for Page Addressing Mode
        UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
        MOVS     R0,#+16
        SDIV     R0,R4,R0
        ADDS     R0,R0,#+16
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  783 						//   Default => 0x10
//  784 }
        POP      {R4,PC}          ;; return
//  785 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  786 void SetAddressingMode(uint8 d)
//  787 {
SetAddressingMode:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  788 	LCD_WrCmd(0x20);			// Set Memory Addressing Mode
        MOVS     R0,#+32
        BL       LCD_WrCmd
//  789 	LCD_WrCmd(d);			//   Default => 0x02
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  790 						//     0x00 => Horizontal Addressing Mode
//  791 						//     0x01 => Vertical Addressing Mode
//  792 						//     0x02 => Page Addressing Mode
//  793 }
        POP      {R4,PC}          ;; return
//  794 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  795 void SetColumnAddress(uint8 a, uint8 b)
//  796 {
SetColumnAddress:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  797 	LCD_WrCmd(0x21);			// Set Column Address
        MOVS     R0,#+33
        BL       LCD_WrCmd
//  798 	LCD_WrCmd(a);			//   Default => 0x00 (Column Start Address)
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  799 	LCD_WrCmd(b);			//   Default => 0x7F (Column End Address)
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  800 }
        POP      {R0,R4,R5,PC}    ;; return
//  801 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  802 void SetPageAddress(uint8 a, uint8 b)
//  803 {
SetPageAddress:
        PUSH     {R3-R5,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  804 	LCD_WrCmd(0x22);			// Set Page Address
        MOVS     R0,#+34
        BL       LCD_WrCmd
//  805 	LCD_WrCmd(a);			//   Default => 0x00 (Page Start Address)
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  806 	LCD_WrCmd(b);			//   Default => 0x07 (Page End Address)
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  807 }
        POP      {R0,R4,R5,PC}    ;; return
//  808 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  809 void SetStartLine(uint8 d)
//  810 {
SetStartLine:
        PUSH     {R7,LR}
//  811 	LCD_WrCmd(0x40|d);			// Set Display Start Line
        ORRS     R0,R0,#0x40
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  812 						//   Default => 0x40 (0x00)
//  813 }
        POP      {R0,PC}          ;; return
//  814 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  815 void SetContrastControl(uint8 d)
//  816 {
SetContrastControl:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  817 	LCD_WrCmd(0x81);			// Set Contrast Control
        MOVS     R0,#+129
        BL       LCD_WrCmd
//  818 	LCD_WrCmd(d);			//   Default => 0x7F
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  819 }
        POP      {R4,PC}          ;; return
//  820 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  821 void Set_Charge_Pump(uint8 d)
//  822 {
Set_Charge_Pump:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  823 	LCD_WrCmd(0x8D);			// Set Charge Pump
        MOVS     R0,#+141
        BL       LCD_WrCmd
//  824 	LCD_WrCmd(0x10|d);			//   Default => 0x10
        ORRS     R4,R4,#0x10
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  825 						//     0x10 (0x00) => Disable Charge Pump
//  826 						//     0x14 (0x04) => Enable Charge Pump
//  827 }
        POP      {R4,PC}          ;; return
//  828 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  829 void Set_Segment_Remap(uint8 d)
//  830 {
Set_Segment_Remap:
        PUSH     {R7,LR}
//  831 	LCD_WrCmd(0xA0|d);			// Set Segment Re-Map
        ORRS     R0,R0,#0xA0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  832 						//   Default => 0xA0
//  833 						//     0xA0 (0x00) => Column Address 0 Mapped to SEG0
//  834 						//     0xA1 (0x01) => Column Address 0 Mapped to SEG127
//  835 }
        POP      {R0,PC}          ;; return
//  836 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  837 void Set_Entire_Display(uint8 d)
//  838 {
Set_Entire_Display:
        PUSH     {R7,LR}
//  839 	LCD_WrCmd(0xA4|d);			// Set Entire Display On / Off
        ORRS     R0,R0,#0xA4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  840 						//   Default => 0xA4
//  841 						//     0xA4 (0x00) => Normal Display
//  842 						//     0xA5 (0x01) => Entire Display On
//  843 }
        POP      {R0,PC}          ;; return
//  844 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  845 void Set_Inverse_Display(uint8 d)
//  846 {
Set_Inverse_Display:
        PUSH     {R7,LR}
//  847 	LCD_WrCmd(0xA6|d);			// Set Inverse Display On/Off
        ORRS     R0,R0,#0xA6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  848 						//   Default => 0xA6
//  849 						//     0xA6 (0x00) => Normal Display
//  850 						//     0xA7 (0x01) => Inverse Display On
//  851 }
        POP      {R0,PC}          ;; return
//  852 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  853 void Set_Multiplex_Ratio(uint8 d)
//  854 {
Set_Multiplex_Ratio:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  855 	LCD_WrCmd(0xA8);			// Set Multiplex Ratio
        MOVS     R0,#+168
        BL       LCD_WrCmd
//  856 	LCD_WrCmd(d);			//   Default => 0x3F (1/64 Duty)
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  857 }
        POP      {R4,PC}          ;; return
//  858 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  859 void Set_Display_On_Off(uint8 d)
//  860 {
Set_Display_On_Off:
        PUSH     {R7,LR}
//  861 	LCD_WrCmd(0xAE|d);			// Set Display On/Off
        ORRS     R0,R0,#0xAE
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  862 						//   Default => 0xAE
//  863 						//     0xAE (0x00) => Display Off
//  864 						//     0xAF (0x01) => Display On
//  865 }
        POP      {R0,PC}          ;; return
//  866 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  867 void SetStartPage(uint8 d)
//  868 {
SetStartPage:
        PUSH     {R7,LR}
//  869 	LCD_WrCmd(0xB0|d);			// Set Page Start Address for Page Addressing Mode
        ORRS     R0,R0,#0xB0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  870 						//   Default => 0xB0 (0x00)
//  871 }
        POP      {R0,PC}          ;; return
//  872 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  873 void Set_Common_Remap(uint8 d)
//  874 {
Set_Common_Remap:
        PUSH     {R7,LR}
//  875 	LCD_WrCmd(0xC0|d);			// Set COM Output Scan Direction
        ORRS     R0,R0,#0xC0
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  876 						//   Default => 0xC0
//  877 						//     0xC0 (0x00) => Scan from COM0 to 63
//  878 						//     0xC8 (0x08) => Scan from COM63 to 0
//  879 }
        POP      {R0,PC}          ;; return
//  880 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  881 void Set_Display_Offset(uint8 d)
//  882 {
Set_Display_Offset:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  883 	LCD_WrCmd(0xD3);			// Set Display Offset
        MOVS     R0,#+211
        BL       LCD_WrCmd
//  884 	LCD_WrCmd(d);			//   Default => 0x00
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  885 }
        POP      {R4,PC}          ;; return
//  886 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  887 void Set_Display_Clock(uint8 d)
//  888 {
Set_Display_Clock:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  889 	LCD_WrCmd(0xD5);			// Set Display Clock Divide Ratio / Oscillator Frequency
        MOVS     R0,#+213
        BL       LCD_WrCmd
//  890 	LCD_WrCmd(d);			//   Default => 0x80
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  891 						//     D[3:0] => Display Clock Divider
//  892 						//     D[7:4] => Oscillator Frequency
//  893 }
        POP      {R4,PC}          ;; return
//  894 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  895 void Set_Preint8ge_Period(uint8 d)
//  896 {
Set_Preint8ge_Period:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  897 	LCD_WrCmd(0xD9);			// Set Pre-Charge Period
        MOVS     R0,#+217
        BL       LCD_WrCmd
//  898 	LCD_WrCmd(d);			//   Default => 0x22 (2 Display Clocks [Phase 2] / 2 Display Clocks [Phase 1])
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  899 						//     D[3:0] => Phase 1 Period in 1~15 Display Clocks
//  900 						//     D[7:4] => Phase 2 Period in 1~15 Display Clocks
//  901 }
        POP      {R4,PC}          ;; return
//  902 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  903 void Set_Common_Config(uint8 d)
//  904 {
Set_Common_Config:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  905 	LCD_WrCmd(0xDA);			// Set COM Pins Hardware Configuration
        MOVS     R0,#+218
        BL       LCD_WrCmd
//  906 	LCD_WrCmd(0x02|d);			//   Default => 0x12 (0x10)
        ORRS     R4,R4,#0x2
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  907 						//     Alternative COM Pin Configuration
//  908 						//     Disable COM Left/Right Re-Map
//  909 }
        POP      {R4,PC}          ;; return
//  910 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  911 void Set_VCOMH(uint8 d)
//  912 {
Set_VCOMH:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  913 	LCD_WrCmd(0xDB);			// Set VCOMH Deselect Level
        MOVS     R0,#+219
        BL       LCD_WrCmd
//  914 	LCD_WrCmd(d);			//   Default => 0x20 (0.77*VCC)
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  915 }
        POP      {R4,PC}          ;; return
//  916 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  917 void Set_NOP(void)
//  918 {
Set_NOP:
        PUSH     {R7,LR}
//  919 	LCD_WrCmd(0xE3);			// Command for No Operation
        MOVS     R0,#+227
        BL       LCD_WrCmd
//  920 }
        POP      {R0,PC}          ;; return
//  921 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  922 void LCD_Init(void)        
//  923 {
LCD_Init:
        PUSH     {R4,LR}
//  924   init_gpio_OLED();
        BL       init_gpio_OLED
//  925   
//  926   LCD_SCL=1;
        MOVS     R0,#+1
        LDR.W    R1,??DataTable12_3  ;; 0x43fe1020
        STR      R0,[R1, #+0]
//  927   //LCD_CS=1;	//预制SLK和SS为高电平   	
//  928   LCD_RST=0;
        LDR.W    R4,??DataTable12_5  ;; 0x43fe1028
        MOVS     R0,#+0
        STR      R0,[R4, #+0]
//  929   LCD_DLY_ms(50);
        MOVS     R0,#+50
        BL       LCD_DLY_ms
//  930   LCD_RST=1;
        MOVS     R0,#+1
        STR      R0,[R4, #+0]
//  931 	
//  932   //从上电到下面开始初始化要有足够的时间，即等待RC复位完毕
//  933   Set_Display_On_Off(0x00);		  // Display Off (0x00/0x01)
        MOVS     R0,#+0
        BL       Set_Display_On_Off
//  934   Set_Display_Clock(0x80);		  // Set Clock as 100 Frames/Sec
        MOVS     R0,#+128
        BL       Set_Display_Clock
//  935   Set_Multiplex_Ratio(0x3F);		// 1/64 Duty (0x0F~0x3F)
        MOVS     R0,#+63
        BL       Set_Multiplex_Ratio
//  936   Set_Display_Offset(0x00);		  // Shift Mapping RAM Counter (0x00~0x3F)
        MOVS     R0,#+0
        BL       Set_Display_Offset
//  937   SetStartLine(0x00);			      // Set Mapping RAM Display Start Line (0x00~0x3F)
        MOVS     R0,#+0
        BL       SetStartLine
//  938   Set_Charge_Pump(0x04);		    // Enable Embedded DC/DC Converter (0x00/0x04)
        MOVS     R0,#+4
        BL       Set_Charge_Pump
//  939   SetAddressingMode(0x02);		  // Set Page Addressing Mode (0x00/0x01/0x02)
        MOVS     R0,#+2
        BL       SetAddressingMode
//  940   Set_Segment_Remap(0x01);		  // Set SEG/Column Mapping     0x00左右反置 0x01正常
        MOVS     R0,#+1
        BL       Set_Segment_Remap
//  941   Set_Common_Remap(0x08);			  // Set COM/Row Scan Direction 0x00上下反置 0x08正常
        MOVS     R0,#+8
        BL       Set_Common_Remap
//  942   Set_Common_Config(0x10);		  // Set Sequential Configuration (0x00/0x10)
        MOVS     R0,#+16
        BL       Set_Common_Config
//  943   SetContrastControl(Brightness);	// Set SEG Output Current
        MOVS     R0,#+207
        BL       SetContrastControl
//  944   Set_Preint8ge_Period(0xF1);		// Set Pre-Charge as 15 Clocks & Disint8ge as 1 Clock
        MOVS     R0,#+241
        BL       Set_Preint8ge_Period
//  945   Set_VCOMH(0x40);			        // Set VCOM Deselect Level
        MOVS     R0,#+64
        BL       Set_VCOMH
//  946   Set_Entire_Display(0x00);		  // Disable Entire Display On (0x00/0x01)
        MOVS     R0,#+0
        BL       Set_Entire_Display
//  947   Set_Inverse_Display(0x00);		// Disable Inverse Display On (0x00/0x01)  
        MOVS     R0,#+0
        BL       Set_Inverse_Display
//  948   Set_Display_On_Off(0x01);		  // Display On (0x00/0x01)
        MOVS     R0,#+1
        BL       Set_Display_On_Off
//  949   LCD_Fill(0x00);  //初始清屏
        MOVS     R0,#+0
        BL       LCD_Fill
//  950   LCD_Set_Pos(0,0);  
        MOVS     R1,#+0
        MOVS     R0,#+0
        BL       LCD_Set_Pos
//  951 	
//  952 } 
        POP      {R4,PC}          ;; return
//  953 //==============================================================
//  954 //函数名： void LCD_PutPixel(uint8 x,uint8 y)
//  955 //功能描述：绘制一个点（x,y）
//  956 //参数：真实坐标值(x,y),x的范围0～127，y的范围0～64
//  957 //返回：无
//  958 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  959 void LCD_PutPixel(uint8 x,uint8 y)
//  960 {
LCD_PutPixel:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  961 	uint8 data1;  //data1当前点的数据 
//  962 
//  963 	LCD_Set_Pos(x,(uint8)(y>>3)); 
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        LSRS     R1,R1,#+3
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
//  964 	data1 =(uint8)(0x01<<(y%8)); 	
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        MOVS     R1,#+8
        MOVS     R2,#+1
        SDIV     R6,R0,R1
        MLS      R6,R1,R6,R0
        LSLS     R6,R2,R6
//  965 	LCD_WrCmd((uint8)(0xb0+(y>>3)));
        UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
        LSRS     R5,R5,#+3
        SUBS     R0,R5,#+80
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  966 	LCD_WrCmd((uint8)(((x&0xf0)>>4)|0x10));
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LSRS     R0,R0,#+4
        ORRS     R0,R0,#0x10
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrCmd
//  967 	LCD_WrCmd((uint8)((x&0x0f)|0x00));
        ANDS     R4,R4,#0xF
        MOVS     R0,R4
        BL       LCD_WrCmd
//  968 	LCD_WrDat(data1); 	 	
        MOVS     R0,R6
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
//  969 }
        POP      {R4-R6,PC}       ;; return
//  970 
//  971 //==============================================================
//  972 //函数名：LCD_P6x8Str(uint8 x,uint8 y,uint8 *p)
//  973 //功能描述：写入一组标准ASCII字符串
//  974 //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
//  975 //返回：无
//  976 //==============================================================  

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  977 void LCD_P6x8Str(uint8 x,uint8 y,uint8 ch[])
//  978 {
LCD_P6x8Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  979   uint8 c=0,i=0,j=0;      
        MOVS     R0,#+0
        MOVS     R0,#+0
        MOVS     R7,#+0
        B.N      ??LCD_P6x8Str_0
//  980   while (ch[j]!='\0')
//  981   {    
//  982     c =ch[j]-32;
//  983     if(x>126){x=0;y++;}
//  984     LCD_Set_Pos(x,y);    
//  985   	for(i=0;i<6;i++)     
//  986   	  LCD_WrDat(F6x8[c][i]);  
??LCD_P6x8Str_1:
        LDR.W    R1,??DataTable12_6
        MOV      R2,R9
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        MOVS     R0,#+6
        MULS     R2,R0,R2
        ADD      R0,R1,R2
        MOV      R1,R8
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        LDRB     R0,[R0, R1]
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
??LCD_P6x8Str_2:
        MOV      R0,R8
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+6
        BLT.N    ??LCD_P6x8Str_1
//  987   	x+=6;
        ADDS     R4,R4,#+6
//  988   	j++;
        ADDS     R7,R7,#+1
??LCD_P6x8Str_0:
        MOVS     R0,R7
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LDRB     R0,[R6, R0]
        CMP      R0,#+0
        BEQ.N    ??LCD_P6x8Str_3
        MOVS     R0,R7
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LDRB     R0,[R6, R0]
        SUBS     R9,R0,#+32
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+127
        BLT.N    ??LCD_P6x8Str_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??LCD_P6x8Str_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R8,#+0
        B.N      ??LCD_P6x8Str_2
//  989   }
//  990 }
??LCD_P6x8Str_3:
        POP      {R0,R4-R9,PC}    ;; return
//  991 //==============================================================
//  992 //函数名：LCD_P8x16Str(uint8 x,uint8 y,uint8 *p)
//  993 //功能描述：写入一组标准ASCII字符串
//  994 //参数：显示的位置（x,y），y为页范围0～7，要显示的字符串
//  995 //返回：无
//  996 //==============================================================  

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  997 void LCD_P8x16Str(uint8 x,uint8 y,uint8 ch[])
//  998 {
LCD_P8x16Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
//  999   uint8 c=0,i=0,j=0;
        MOVS     R0,#+0
        MOVS     R0,#+0
        MOVS     R7,#+0
        B.N      ??LCD_P8x16Str_0
// 1000         
// 1001   while (ch[j]!='\0')
// 1002   {    
// 1003     c =ch[j]-32;
// 1004     if(x>120){x=0;y++;}
// 1005     LCD_Set_Pos(x,y);    
// 1006   	for(i=0;i<8;i++)     
// 1007   	  LCD_WrDat(F8X16[c*16+i]);
// 1008   	LCD_Set_Pos(x,y+1);    
// 1009   	for(i=0;i<8;i++)     
// 1010   	  LCD_WrDat(F8X16[c*16+i+8]);  
??LCD_P8x16Str_1:
        LDR.W    R0,??DataTable12_7
        MOV      R1,R8
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        LSLS     R1,R1,#+4
        UXTAB    R1,R1,R9
        ADD      R0,R0,R1
        LDRB     R0,[R0, #+8]
        BL       LCD_WrDat
        ADDS     R9,R9,#+1
??LCD_P8x16Str_2:
        MOV      R0,R9
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+8
        BLT.N    ??LCD_P8x16Str_1
// 1011   	x+=8;
        ADDS     R4,R4,#+8
// 1012   	j++;
        ADDS     R7,R7,#+1
??LCD_P8x16Str_0:
        MOVS     R0,R7
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LDRB     R0,[R6, R0]
        CMP      R0,#+0
        BEQ.N    ??LCD_P8x16Str_3
        MOVS     R0,R7
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LDRB     R0,[R6, R0]
        SUBS     R8,R0,#+32
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+121
        BLT.N    ??LCD_P8x16Str_4
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??LCD_P8x16Str_4:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
        B.N      ??LCD_P8x16Str_5
??LCD_P8x16Str_6:
        LDR.W    R0,??DataTable12_7
        MOV      R1,R8
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        LSLS     R1,R1,#+4
        UXTAB    R1,R1,R9
        LDRB     R0,[R0, R1]
        BL       LCD_WrDat
        ADDS     R9,R9,#+1
??LCD_P8x16Str_5:
        MOV      R0,R9
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+8
        BLT.N    ??LCD_P8x16Str_6
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
        B.N      ??LCD_P8x16Str_2
// 1013   }
// 1014 }
??LCD_P8x16Str_3:
        POP      {R0,R4-R9,PC}    ;; return
// 1015 
// 1016 //输出汉字字符串

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1017 void LCD_P14x16Str(uint8 x,uint8 y,uint8 ch[])
// 1018 {
LCD_P14x16Str:
        PUSH     {R3-R9,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
// 1019 	uint8 wm=0,ii = 0;
        MOVS     R0,#+0
        MOVS     R7,#+0
// 1020 	uint32 adder=1; 
        MOVS     R0,#+1
        B.N      ??LCD_P14x16Str_0
// 1021 	
// 1022 	while(ch[ii] != '\0')
// 1023 	{
// 1024   	wm = 0;
// 1025   	adder = 1;
// 1026   	while(F14x16_Idx[wm] > 127)
// 1027   	{
// 1028   		if(F14x16_Idx[wm] == ch[ii])
// 1029   		{
// 1030   			if(F14x16_Idx[wm + 1] == ch[ii + 1])
// 1031   			{
// 1032   				adder = wm * 14;
// 1033   				break;
// 1034   			}
// 1035   		}
// 1036   		wm += 2;			
// 1037   	}
// 1038   	if(x>118){x=0;y++;}
// 1039   	LCD_Set_Pos(x , y); 
// 1040   	if(adder != 1)// 显示汉字					
// 1041   	{
// 1042   		LCD_Set_Pos(x , y);
// 1043   		for(wm = 0;wm < 14;wm++)               
// 1044   		{
// 1045   			LCD_WrDat(F14x16[adder]);	
// 1046   			adder += 1;
// 1047   		}      
// 1048   		LCD_Set_Pos(x,y + 1); 
// 1049   		for(wm = 0;wm < 14;wm++)          
// 1050   		{
// 1051   			LCD_WrDat(F14x16[adder]);
// 1052   			adder += 1;
// 1053   		}   		
// 1054   	}
// 1055   	else			  //显示空白字符			
// 1056   	{
// 1057   		ii += 1;
// 1058       LCD_Set_Pos(x,y);
// 1059   		for(wm = 0;wm < 16;wm++)
// 1060   		{
// 1061   				LCD_WrDat(0);
// 1062   		}
// 1063   		LCD_Set_Pos(x,y + 1);
// 1064   		for(wm = 0;wm < 16;wm++)
// 1065   		{   		
// 1066   				LCD_WrDat(0);	
??LCD_P14x16Str_1:
        MOVS     R0,#+0
        BL       LCD_WrDat
// 1067   		}
        ADDS     R8,R8,#+1
??LCD_P14x16Str_2:
        MOV      R0,R8
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+16
        BLT.N    ??LCD_P14x16Str_1
// 1068   	}
// 1069   	x += 14;
??LCD_P14x16Str_3:
        ADDS     R4,R4,#+14
// 1070   	ii += 2;
        ADDS     R7,R7,#+2
??LCD_P14x16Str_0:
        MOVS     R0,R7
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LDRB     R0,[R6, R0]
        CMP      R0,#+0
        BEQ.N    ??LCD_P14x16Str_4
        MOVS     R1,#+0
        MOVS     R8,#+1
        B.N      ??LCD_P14x16Str_5
??LCD_P14x16Str_6:
        ADDS     R1,R1,#+2
??LCD_P14x16Str_5:
        LDR.W    R0,??DataTable12_8
        MOVS     R2,R1
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        LDRB     R2,[R0, R2]
        CMP      R2,#+128
        BLT.N    ??LCD_P14x16Str_7
        MOVS     R2,R1
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        LDRB     R2,[R0, R2]
        MOVS     R3,R7
        UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
        LDRB     R3,[R6, R3]
        CMP      R2,R3
        BNE.N    ??LCD_P14x16Str_6
        MOVS     R2,R1
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        ADD      R0,R0,R2
        LDRB     R0,[R0, #+1]
        MOVS     R2,R7
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        ADD      R2,R6,R2
        LDRB     R2,[R2, #+1]
        CMP      R0,R2
        BNE.N    ??LCD_P14x16Str_6
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+14
        MULS     R1,R0,R1
        MOV      R8,R1
??LCD_P14x16Str_7:
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+119
        BLT.N    ??LCD_P14x16Str_8
        MOVS     R4,#+0
        ADDS     R5,R5,#+1
??LCD_P14x16Str_8:
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        CMP      R8,#+1
        BEQ.N    ??LCD_P14x16Str_9
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
        B.N      ??LCD_P14x16Str_10
??LCD_P14x16Str_11:
        LDR.W    R0,??DataTable12_9
        LDRB     R0,[R0, R8]
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
        ADDS     R9,R9,#+1
??LCD_P14x16Str_10:
        MOV      R0,R9
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+14
        BLT.N    ??LCD_P14x16Str_11
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R9,#+0
??LCD_P14x16Str_12:
        MOV      R0,R9
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+14
        BGE.N    ??LCD_P14x16Str_3
        LDR.W    R0,??DataTable12_9
        LDRB     R0,[R0, R8]
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
        ADDS     R9,R9,#+1
        B.N      ??LCD_P14x16Str_12
??LCD_P14x16Str_9:
        ADDS     R7,R7,#+1
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R8,#+0
        B.N      ??LCD_P14x16Str_13
??LCD_P14x16Str_14:
        MOVS     R0,#+0
        BL       LCD_WrDat
        ADDS     R8,R8,#+1
??LCD_P14x16Str_13:
        MOV      R0,R8
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+16
        BLT.N    ??LCD_P14x16Str_14
        ADDS     R1,R5,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOVS     R8,#+0
        B.N      ??LCD_P14x16Str_2
// 1071 	}
// 1072 }
??LCD_P14x16Str_4:
        POP      {R0,R4-R9,PC}    ;; return
// 1073 
// 1074 //输出汉字和字符混合字符串

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1075 void LCD_Print(uint8 x, uint8 y, uint8 ch[])
// 1076 {
LCD_Print:
        PUSH     {R3-R7,LR}
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R6,R2
// 1077 	uint8 ch2[3];
// 1078 	uint8 ii=0;        
        MOVS     R7,#+0
        B.N      ??LCD_Print_0
// 1079 	while(ch[ii] != '\0')
// 1080 	{
// 1081 		if(ch[ii] > 127)
// 1082 		{
// 1083 			ch2[0] = ch[ii];
??LCD_Print_1:
        MOVS     R0,R7
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LDRB     R0,[R6, R0]
        STRB     R0,[SP, #+0]
// 1084 	 		ch2[1] = ch[ii + 1];
        MOV      R0,SP
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        ADD      R1,R6,R1
        LDRB     R1,[R1, #+1]
        STRB     R1,[R0, #+1]
// 1085 			ch2[2] = '\0';			//汉字为两个字节
        MOVS     R1,#+0
        STRB     R1,[R0, #+2]
// 1086 			LCD_P14x16Str(x , y, ch2);	//显示汉字
        MOV      R2,SP
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_P14x16Str
// 1087 			x += 14;
        ADDS     R4,R4,#+14
// 1088 			ii += 2;
        ADDS     R7,R7,#+2
// 1089 		}
??LCD_Print_0:
        MOVS     R0,R7
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LDRB     R0,[R6, R0]
        CMP      R0,#+0
        BEQ.N    ??LCD_Print_2
        MOVS     R0,R7
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LDRB     R0,[R6, R0]
        CMP      R0,#+128
        BGE.N    ??LCD_Print_1
// 1090 		else
// 1091 		{
// 1092 			ch2[0] = ch[ii];	
        MOVS     R0,R7
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LDRB     R0,[R6, R0]
        STRB     R0,[SP, #+0]
// 1093 			ch2[1] = '\0';			//字母占一个字节
        MOVS     R0,#+0
        STRB     R0,[SP, #+1]
// 1094 			LCD_P8x16Str(x , y , ch2);	//显示字母
        MOV      R2,SP
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_P8x16Str
// 1095 			x += 8;
        ADDS     R4,R4,#+8
// 1096 			ii+= 1;
        ADDS     R7,R7,#+1
        B.N      ??LCD_Print_0
// 1097 		}
// 1098 	}
// 1099 } 
??LCD_Print_2:
        POP      {R0,R4-R7,PC}    ;; return
// 1100 
// 1101 //==============================================================
// 1102 //函数名： void Draw_BMP(uint8 x,uint8 y)
// 1103 //功能描述：显示BMP图片128×64
// 1104 //参数：起始点坐标(x,y),x的范围0～127，y为页的范围0～7
// 1105 //返回：无
// 1106 //==============================================================

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1107 void Draw_BMP(uint8 x0,uint8 y0,uint8 x1,uint8 y1,uint8 bmp[])
// 1108 { 	
Draw_BMP:
        PUSH     {R4-R10,LR}
        MOVS     R6,R3
// 1109   uint32 ii=0;
        MOVS     R7,#+0
// 1110   uint8 x,y;
// 1111   
// 1112   if(y1%8==0) y=y1/8;      
        MOVS     R3,R6
        UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
        MOVS     R4,#+8
        SDIV     R5,R3,R4
        MLS      R3,R4,R5,R3
        CMP      R3,#+0
        BNE.N    ??Draw_BMP_0
        MOVS     R3,R6
        UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
        MOVS     R4,#+8
        SDIV     R3,R3,R4
        B.N      ??Draw_BMP_1
// 1113   else y=y1/8+1;
??Draw_BMP_0:
        MOVS     R3,R6
        UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
        MOVS     R4,#+8
        SDIV     R3,R3,R4
        ADDS     R3,R3,#+1
// 1114 	for(y=y0;y<=y1;y++)
??Draw_BMP_1:
        MOVS     R4,R1
        MOVS     R5,R0
        MOV      R8,R2
        LDR      R9,[SP, #+32]
        B.N      ??Draw_BMP_2
// 1115 	{
// 1116 		LCD_Set_Pos(x0,y);				
// 1117     for(x=x0;x<x1;x++)
// 1118 	    {      
// 1119 	    	LCD_WrDat(bmp[ii++]);	    	
??Draw_BMP_3:
        LDRB     R0,[R9, R7]
        BL       LCD_WrDat
        ADDS     R7,R7,#+1
// 1120 	    }
        ADDS     R10,R10,#+1
??Draw_BMP_4:
        MOV      R0,R10
        MOV      R1,R8
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        CMP      R0,R1
        BCC.N    ??Draw_BMP_3
        ADDS     R4,R4,#+1
??Draw_BMP_2:
        MOVS     R0,R6
        MOVS     R1,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        CMP      R0,R1
        BCC.N    ??Draw_BMP_5
        MOVS     R1,R4
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_Set_Pos
        MOV      R10,R5
        B.N      ??Draw_BMP_4
// 1121 	}
// 1122 }
??Draw_BMP_5:
        POP      {R4-R10,PC}      ;; return
// 1123 /*****************************************************************************
// 1124  函 数 名  : LED_PrintImage
// 1125  功能描述  : 将图像显示出来
// 1126  输入参数  : UCHAR8 *pucTable     二维图像数组的地址
// 1127              USHORT16 usRowNum    二维图像的行数1~64
// 1128              USHORT16 usColumnNum 二维图像的列数1~128
// 1129  输出参数  : none
// 1130  返 回 值  : none
// 1131 *****************************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1132 void LED_PrintImage(uint8 *pucTable,uint16 usRowNum, uint16 usColumnNum)
// 1133 {
LED_PrintImage:
        PUSH     {R4-R10,LR}
        MOVS     R4,R0
        MOV      R10,R2
// 1134     uint8 ucData;
// 1135     uint16 i,j,k,m,n;
// 1136    uint16 usRowTmp;
// 1137 
// 1138     m = usRowNum >> 3;   //计算图片行数以8位为一组完整的组数
        MOVS     R5,R1
        UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
        LSRS     R5,R5,#+3
// 1139     n = usRowNum % 8;    //计算分完组后剩下的行数
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        MOVS     R0,#+8
        SDIV     R2,R1,R0
        MLS      R1,R0,R2,R1
        MOVS     R6,R1
// 1140     
// 1141     for(i = 0; i < m; i++) //完整组行扫描
        MOVS     R7,#+0
        B.N      ??LED_PrintImage_0
??LED_PrintImage_1:
        ADDS     R7,R7,#+1
??LED_PrintImage_0:
        MOVS     R0,R7
        MOVS     R1,R5
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        CMP      R0,R1
        BCS.N    ??LED_PrintImage_2
// 1142     {
// 1143         LCD_Set_Pos(0,(uint8)i);
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+0
        BL       LCD_Set_Pos
// 1144         usRowTmp = i << 3;    //计算当前所在行的下标                  
        LSLS     R8,R7,#+3
// 1145         for(j = 0; j < usColumnNum; j++) //列扫描        
        MOVS     R9,#+0
        B.N      ??LED_PrintImage_3
// 1146         {
// 1147             ucData = 0;
// 1148             for(k = 0; k < 8; k++) //在i组中对这8行扫描
// 1149             {
// 1150                 ucData = ucData >> 1;
??LED_PrintImage_4:
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LSRS     R0,R0,#+1
// 1151                     if((pucTable + (usRowTmp + k) * usColumnNum)[j] == WHITE)
        MOVS     R1,R2
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        UXTAH    R3,R1,R8
        MOV      R1,R10
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        MULS     R3,R1,R3
        ADD      R1,R4,R3
        MOV      R3,R9
        UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
        LDRB     R1,[R1, R3]
        CMP      R1,#+255
        BNE.N    ??LED_PrintImage_5
// 1152                     {
// 1153                        ucData = ucData | 0x80;
        ORRS     R0,R0,#0x80
// 1154                     }
// 1155             }
??LED_PrintImage_5:
        ADDS     R2,R2,#+1
??LED_PrintImage_6:
        MOVS     R1,R2
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        CMP      R1,#+8
        BLT.N    ??LED_PrintImage_4
// 1156             LCD_WrDat(ucData);
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R9,R9,#+1
??LED_PrintImage_3:
        MOV      R0,R9
        MOV      R1,R10
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        CMP      R0,R1
        BCS.N    ??LED_PrintImage_1
        MOVS     R0,#+0
        MOVS     R2,#+0
        B.N      ??LED_PrintImage_6
// 1157         }
// 1158     }
// 1159     
// 1160     LCD_Set_Pos(0,(uint8)i); //设置剩下的行显示的起始坐标
??LED_PrintImage_2:
        MOVS     R1,R7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+0
        BL       LCD_Set_Pos
// 1161     usRowTmp = i << 3;       //计算当前所在行的下标                  
        LSLS     R7,R7,#+3
// 1162     for(j = 0; j < usColumnNum; j++) //列扫描        
        MOVS     R5,#+0
        B.N      ??LED_PrintImage_7
// 1163     {
// 1164         ucData = 0;
// 1165         for(k = 0; k < n; k++) //对剩下的行扫描
// 1166         {
// 1167             ucData = ucData >> 1;
??LED_PrintImage_8:
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        LSRS     R0,R0,#+1
// 1168             
// 1169             if((pucTable + (usRowTmp + k) * usColumnNum)[j] == 255)
        MOVS     R1,R2
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        UXTAH    R3,R1,R7
        MOV      R1,R10
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        MULS     R3,R1,R3
        ADD      R1,R4,R3
        MOVS     R3,R5
        UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
        LDRB     R1,[R1, R3]
        CMP      R1,#+255
        BNE.N    ??LED_PrintImage_9
// 1170             {
// 1171                 ucData = ucData | 0x80;
        ORRS     R0,R0,#0x80
// 1172             }      
// 1173         }
??LED_PrintImage_9:
        ADDS     R2,R2,#+1
??LED_PrintImage_10:
        MOVS     R1,R2
        MOVS     R3,R6
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
        CMP      R1,R3
        BCC.N    ??LED_PrintImage_8
// 1174         ucData = ucData >> (8 - n);
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        RSBS     R1,R6,#+8
        ASRS     R0,R0,R1
// 1175         LCD_WrDat(ucData);
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_WrDat
        ADDS     R5,R5,#+1
??LED_PrintImage_7:
        MOVS     R0,R5
        MOV      R1,R10
        UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
        UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
        CMP      R0,R1
        BCS.N    ??LED_PrintImage_11
        MOVS     R0,#+0
        MOVS     R2,#+0
        B.N      ??LED_PrintImage_10
// 1176     }
// 1177 
// 1178     return;
??LED_PrintImage_11:
        POP      {R4-R10,PC}      ;; return
// 1179 }
// 1180 
// 1181 
// 1182 /*---------------------*列表移动*---------------------*/      

        SECTION `.data`:DATA:REORDER:NOROOT(2)
        DATA
// 1183 int8 Change_To_Bit[8]=
Change_To_Bit:
        DATA8
        DC8 -128, 64, 32, 16, 8, 4, 2, 1
// 1184 {
// 1185   0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01
// 1186 };

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
        DATA
// 1187 int8 Temp_List[120];
Temp_List:
        DS8 120

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
// 1188 void OLED_Write_Data(uint8 Data)
// 1189 {
OLED_Write_Data:
        PUSH     {R4}
// 1190 	uint8 Temp_i=8;
        MOVS     R2,#+8
// 1191 	LCD_DC=1;;
        MOVS     R1,#+1
        LDR.N    R3,??DataTable12_2  ;; 0x43fe1024
        STR      R1,[R3, #+0]
// 1192   LCD_SCL=0;;
        LDR.N    R3,??DataTable12_3  ;; 0x43fe1020
        MOVS     R1,#+0
        STR      R1,[R3, #+0]
        B.N      ??OLED_Write_Data_0
// 1193   while(Temp_i--)
// 1194   {
// 1195     if(Data&0x80){LCD_SDA=1;}
// 1196     else{LCD_SDA=0;}
??OLED_Write_Data_1:
        MOVS     R1,#+0
        LDR.N    R4,??DataTable12_4  ;; 0x43fe101c
        STR      R1,[R4, #+0]
        B.N      ??OLED_Write_Data_2
??OLED_Write_Data_3:
        LSLS     R1,R0,#+24
        BPL.N    ??OLED_Write_Data_1
        MOVS     R1,#+1
        LDR.N    R4,??DataTable12_4  ;; 0x43fe101c
        STR      R1,[R4, #+0]
// 1197     LCD_SCL=1; 
??OLED_Write_Data_2:
        MOVS     R1,#+1
        STR      R1,[R3, #+0]
// 1198     asm("nop");;
        nop
// 1199     LCD_SCL=0;;    
        MOVS     R1,#+0
        STR      R1,[R3, #+0]
// 1200     Data<<=1;    
        LSLS     R0,R0,#+1
// 1201   }
??OLED_Write_Data_0:
        MOVS     R1,R2
        SUBS     R2,R1,#+1
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        CMP      R1,#+0
        BNE.N    ??OLED_Write_Data_3
// 1202 }
??OLED_Write_Data_4:
        POP      {R4}
        BX       LR               ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1203 void List_Move(int8 New_Data)
// 1204 // 对数组进行移位
// 1205 {
List_Move:
        PUSH     {R4}
// 1206   static int32 Temp_i;
// 1207   int32 Temp_j;
// 1208   if(Temp_i<120)
        LDR.N    R2,??DataTable12_10
        LDR      R1,[R2, #+0]
        CMP      R1,#+120
        BGE.N    ??List_Move_0
// 1209     Temp_List[Temp_i]=New_Data;
        LDR.N    R1,??DataTable12_11
        LDR      R3,[R2, #+0]
        STRB     R0,[R1, R3]
        B.N      ??List_Move_1
// 1210   else
// 1211   {
// 1212     for(Temp_j=0;Temp_j<119;Temp_j++)
??List_Move_0:
        MOVS     R1,#+0
        B.N      ??List_Move_2
// 1213       Temp_List[Temp_j]=Temp_List[Temp_j+1];  
??List_Move_3:
        LDR.N    R3,??DataTable12_11
        ADD      R4,R3,R1
        LDRB     R4,[R4, #+1]
        STRB     R4,[R3, R1]
        ADDS     R1,R1,#+1
??List_Move_2:
        CMP      R1,#+119
        BLT.N    ??List_Move_3
// 1214     Temp_List[119]=New_Data;  
        LDR.N    R1,??DataTable12_11
        STRB     R0,[R1, #+119]
// 1215   }
// 1216 
// 1217   if(Temp_i>=120)
??List_Move_1:
        LDR      R0,[R2, #+0]
        CMP      R0,#+120
        BLT.N    ??List_Move_4
// 1218     Temp_i=120;
        MOVS     R0,#+120
        STR      R0,[R2, #+0]
        B.N      ??List_Move_5
// 1219   else
// 1220     Temp_i++; 
??List_Move_4:
        LDR      R0,[R2, #+0]
        ADDS     R0,R0,#+1
        STR      R0,[R2, #+0]
// 1221 }
??List_Move_5:
        POP      {R4}
        BX       LR               ;; return

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
        DATA
`List_Move::Temp_i`:
        DS8 4
// 1222 /*-------------------*显示列表图形*-------------------*/      

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1223 void Delay_temp(int32 x)
// 1224 {
// 1225   int32 Temp_i,Temp_j;
// 1226   for(Temp_i=0;Temp_i<1000;Temp_i++)
Delay_temp:
        MOVS     R1,#+0
        B.N      ??Delay_temp_0
// 1227     for(Temp_j=0;Temp_j<x;Temp_j++);
??Delay_temp_1:
        ADDS     R2,R2,#+1
??Delay_temp_2:
        CMP      R2,R0
        BLT.N    ??Delay_temp_1
        ADDS     R1,R1,#+1
??Delay_temp_0:
        CMP      R1,#+1000
        BGE.N    ??Delay_temp_3
        MOVS     R2,#+0
        B.N      ??Delay_temp_2
// 1228 }
??Delay_temp_3:
        BX       LR               ;; return
// 1229 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1230 void List_Paint(void)
// 1231 // 将Temp_List列表里面的数据用一整幅图画出来
// 1232 {
List_Paint:
        PUSH     {R3-R5,LR}
// 1233   uint8 Temp_i;
// 1234   uint8 Cross;  
// 1235 
// 1236   for(Cross=0;Cross<6;Cross++)
        MOVS     R4,#+0
        B.N      ??List_Paint_0
??List_Paint_1:
        ADDS     R4,R4,#+1
??List_Paint_0:
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+6
        BGE.N    ??List_Paint_2
// 1237   {
// 1238     LCD_Set_Pos(4,7-Cross);         //这边应该是设置图像起始的行数
        RSBS     R1,R4,#+7
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,#+4
        BL       LCD_Set_Pos
// 1239     for(Temp_i=0;Temp_i<120;Temp_i++) 
        MOVS     R5,#+0
??List_Paint_3:
        MOVS     R0,R5
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        CMP      R0,#+120
        BGE.N    ??List_Paint_1
// 1240     {
// 1241       if(Temp_List[Temp_i]>>3==Cross)
        LDR.N    R0,??DataTable12_11
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        LDRSB    R1,[R0, R1]
        ASRS     R1,R1,#+3
        MOVS     R2,R4
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        CMP      R1,R2
        BEQ.N    ??List_Paint_4
// 1242       {
// 1243         OLED_Write_Data(Change_To_Bit[ Temp_List[Temp_i]&0x07 ]);   
// 1244       }
// 1245       else 
// 1246       {
// 1247         OLED_Write_Data(0x00);
??List_Paint_5:
        MOVS     R0,#+0
        BL       OLED_Write_Data
        B.N      ??List_Paint_6
// 1248       }     
??List_Paint_4:
        LDR.N    R1,??DataTable12_12
        MOVS     R2,R5
        UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
        LDRB     R0,[R0, R2]
        ANDS     R0,R0,#0x7
        LDRB     R0,[R1, R0]
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       OLED_Write_Data
// 1249     }    
??List_Paint_6:
        ADDS     R5,R5,#+1
        B.N      ??List_Paint_3
// 1250   }
// 1251 }
??List_Paint_2:
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1252 void Paint_List(float New_Data,float Paint_Ave,float Paint_Margin)
// 1253 // 将某个数据以列表刷新的形式显示出来
// 1254 {
Paint_List:
        PUSH     {R3-R7,LR}
        MOVS     R7,R0
        MOVS     R6,R1
// 1255   uint8 Temp_Data;
// 1256   
// 1257   Temp_Data=(int8)(22.0/Paint_Margin*(New_Data-Paint_Ave)+26);
        MOVS     R0,R2
        BL       __aeabi_f2d
        MOVS     R2,R0
        MOVS     R3,R1
        MOVS     R0,#+0
        LDR.N    R1,??DataTable12_13  ;; 0x40360000
        BL       __aeabi_ddiv
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R0,R7
        MOVS     R1,R6
        BL       __aeabi_fsub
        BL       __aeabi_f2d
        MOVS     R2,R4
        MOVS     R3,R5
        BL       __aeabi_dmul
        MOVS     R2,#+0
        LDR.N    R3,??DataTable12_14  ;; 0x403a0000
        BL       __aeabi_dadd
        BL       __aeabi_d2iz
// 1258   List_Move(Temp_Data);
        SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
        BL       List_Move
// 1259   List_Paint();
        BL       List_Paint
// 1260 }
        POP      {R0,R4-R7,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1261 void Paint_Angle(float Angle)
// 1262 {
Paint_Angle:
        PUSH     {R4-R6,LR}
// 1263   static int32 Temp_Count;
// 1264   Temp_Count=(int)(Angle);
        LDR.N    R4,??DataTable12_15
        BL       __aeabi_f2iz
        STR      R0,[R4, #+0]
// 1265  // Temp_Count=(int)(Angle);
// 1266   Paint_List(Temp_Count,0,25);    //已更改为80，原为25   80为显示范围
        LDR.N    R2,??DataTable12_16  ;; 0x41c80000
        MOVS     R1,#+0
        MOVS     R5,R1
        MOVS     R6,R2
        LDR      R0,[R4, #+0]
        BL       __aeabi_i2f
        MOVS     R2,R6
        MOVS     R1,R5
        BL       Paint_List
// 1267   Delay_temp(56);                 //原来是200
        MOVS     R0,#+56
        BL       Delay_temp
// 1268 }
        POP      {R4-R6,PC}       ;; return

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
        DATA
`Paint_Angle::Temp_Count`:
        DS8 4
// 1269 
// 1270 /************将浮点型数据转换为字符串************/
// 1271 //fNum待变换浮点数
// 1272 //str[]存储转换后数组
// 1273 //dotsize 保留几位小数

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1274 int Float_To_String(float fNum,uint8 str[],int dotsize)
// 1275 {
Float_To_String:
        PUSH     {R4-R10,LR}
        MOV      R10,R0
        MOVS     R6,R1
        MOVS     R5,R2
// 1276 	// 定义变量
// 1277 	int iSize = 0;//记录字符串长度的数
        MOVS     R9,#+0
// 1278 	int n = 0;//用作循环的临时变量
        MOVS     R0,#+0
// 1279 	uint8 *p = str;//做换向时用的指针
        MOVS     R0,R6
// 1280 	uint8 *s = str;//做换向时用的指针
        MOVS     R7,R6
// 1281 	int8 isnegative = 0;//负数标志
        MOVS     R8,#+0
// 1282 	uint32 i_predot;//小数点前的数
// 1283 	uint32 i_afterdot;//小数点后的数
// 1284 	float f_afterdot;//实数型的小数部分
// 1285 
// 1286 	//判断是否为负数     
// 1287 	if(fNum < 0)
        MOV      R0,R10
        MOVS     R1,#+0
        BL       __aeabi_cfcmple
        BCS.N    ??Float_To_String_0
// 1288 	{
// 1289 		isnegative = 1;//设置负数标志
        MOVS     R8,#+1
// 1290 		fNum = 0 - fNum;//将负数变为正数
        EORS     R10,R10,#0x80000000
// 1291 	}
// 1292 
// 1293 	i_predot = (uint32)fNum;//将小数点之前的数变为整数
??Float_To_String_0:
        MOV      R0,R10
        BL       __aeabi_f2uiz
        MOVS     R4,R0
// 1294 	f_afterdot = fNum - i_predot;//单独取出小数点之后的数
        MOVS     R0,R4
        BL       __aeabi_ui2f
        MOVS     R1,R0
        MOV      R0,R10
        BL       __aeabi_fsub
        MOVS     R1,R0
// 1295 	//根据设定的要保存的小数点后的位数，将小数点后相应的位数变到小数点之前
// 1296 	for(n = dotsize;n > 0;n--)
        MOV      R10,R5
        B.N      ??Float_To_String_1
// 1297 	{
// 1298 	        f_afterdot = f_afterdot*10;
??Float_To_String_2:
        LDR.N    R0,??DataTable12_17  ;; 0x41200000
        BL       __aeabi_fmul
        MOVS     R1,R0
// 1299 	}
        SUBS     R10,R10,#+1
??Float_To_String_1:
        CMP      R10,#+1
        BGE.N    ??Float_To_String_2
// 1300 	i_afterdot = (uint32)f_afterdot;//将小数点后相应位数的数字变为整数
        MOVS     R0,R1
        BL       __aeabi_f2uiz
// 1301 
// 1302 	//先将小数点后的数转换为字符串
// 1303 	n=dotsize;
        MOVS     R2,R5
        B.N      ??Float_To_String_3
// 1304 	while(i_afterdot > 0 |n > 0)
// 1305 	{
// 1306 		n--;
??Float_To_String_4:
        SUBS     R2,R2,#+1
// 1307 	 	str[iSize++] = i_afterdot % 10 + '0';//对10取余并变为ASCII码
        MOVS     R1,#+10
        UDIV     R3,R0,R1
        MLS      R1,R1,R3,R0
        ADDS     R1,R1,#+48
        STRB     R1,[R6, R9]
        ADDS     R9,R9,#+1
// 1308 	 	i_afterdot = i_afterdot / 10;//对10取商
        MOVS     R1,#+10
        UDIV     R0,R0,R1
// 1309 	}
??Float_To_String_3:
        CMP      R0,#+0
        BEQ.N    ??Float_To_String_5
        MOVS     R1,#+1
        B.N      ??Float_To_String_6
??Float_To_String_5:
        MOVS     R1,#+0
??Float_To_String_6:
        CMP      R2,#+1
        BLT.N    ??Float_To_String_7
        MOVS     R3,#+1
        B.N      ??Float_To_String_8
??Float_To_String_7:
        MOVS     R3,#+0
??Float_To_String_8:
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
        ORRS     R1,R3,R1
        CMP      R1,#+0
        BNE.N    ??Float_To_String_4
// 1310         if(dotsize==0)
        CMP      R5,#+0
        BNE.N    ??Float_To_String_9
// 1311         {
// 1312           str[iSize++] = ' ';//小数点是0的时候，用空格替代
        MOVS     R0,#+32
        STRB     R0,[R6, R9]
        ADDS     R9,R9,#+1
        B.N      ??Float_To_String_10
// 1313         }
// 1314         else
// 1315         {
// 1316 	str[iSize++] = '.';//加上小数点
??Float_To_String_9:
        MOVS     R0,#+46
        STRB     R0,[R6, R9]
        ADDS     R9,R9,#+1
// 1317         }
// 1318     //处理小数点前为0的情况。
// 1319 	if(i_predot == 0)
??Float_To_String_10:
        CMP      R4,#+0
        BNE.N    ??Float_To_String_11
// 1320 		str[iSize++] = '0';
        MOVS     R0,#+48
        STRB     R0,[R6, R9]
        ADDS     R9,R9,#+1
        B.N      ??Float_To_String_11
// 1321 	//再将小数点前的数转换为字符串
// 1322 	while(i_predot > 0)
// 1323 	{
// 1324 	 	str[iSize++] = i_predot%10 + '0';//对10取余并变为ASCII码
??Float_To_String_12:
        MOVS     R0,#+10
        UDIV     R1,R4,R0
        MLS      R0,R0,R1,R4
        ADDS     R0,R0,#+48
        STRB     R0,[R6, R9]
        ADDS     R9,R9,#+1
// 1325 	 	i_predot = i_predot / 10;//对10取商
        MOVS     R0,#+10
        UDIV     R4,R4,R0
// 1326 	}
??Float_To_String_11:
        CMP      R4,#+0
        BNE.N    ??Float_To_String_12
// 1327 
// 1328 	if(isnegative == 1)
        SXTB     R8,R8            ;; SignExt  R8,R8,#+24,#+24
        CMP      R8,#+1
        BNE.N    ??Float_To_String_13
// 1329 	str[iSize++] = '-';//如果是负数，则在最后加上负号
        MOVS     R0,#+45
        STRB     R0,[R6, R9]
        ADDS     R9,R9,#+1
// 1330 	str[iSize] = '\0';//加上字符串结束标志
??Float_To_String_13:
        MOVS     R0,#+0
        STRB     R0,[R6, R9]
// 1331 	
// 1332 	p = str + iSize - 1;//将P指针指向字符串结束标志之前
        ADD      R0,R6,R9
        SUBS     R1,R0,#+1
        B.N      ??Float_To_String_14
// 1333 
// 1334 	for( ;p - s > 0;p--,s++)//将字符串中存储的数调头   
// 1335 	{   
// 1336 		*s^=*p;   
??Float_To_String_15:
        LDRB     R2,[R7, #+0]
        LDRB     R0,[R1, #+0]
        EORS     R2,R0,R2
        STRB     R2,[R7, #+0]
// 1337 		*p^=*s;   
        LDRB     R2,[R1, #+0]
        LDRB     R0,[R7, #+0]
        EORS     R2,R0,R2
        STRB     R2,[R1, #+0]
// 1338 		*s^=*p;   
        LDRB     R2,[R7, #+0]
        LDRB     R0,[R1, #+0]
        EORS     R2,R0,R2
        STRB     R2,[R7, #+0]
// 1339 	}   
        SUBS     R1,R1,#+1
        ADDS     R7,R7,#+1
??Float_To_String_14:
        SUBS     R0,R1,R7
        CMP      R0,#+1
        BGE.N    ??Float_To_String_15
// 1340 	// 返回指针字符串大小 
// 1341 	return iSize;
        MOV      R0,R9
        POP      {R4-R10,PC}      ;; return
// 1342 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12:
        DATA32
        DC32     gpio_init_struct_OLED

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_1:
        DATA32
        DC32     0x400ff080

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_2:
        DATA32
        DC32     0x43fe1024

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_3:
        DATA32
        DC32     0x43fe1020

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_4:
        DATA32
        DC32     0x43fe101c

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_5:
        DATA32
        DC32     0x43fe1028

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_6:
        DATA32
        DC32     F6x8

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_7:
        DATA32
        DC32     F8X16

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_8:
        DATA32
        DC32     F14x16_Idx

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_9:
        DATA32
        DC32     F14x16

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_10:
        DATA32
        DC32     `List_Move::Temp_i`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_11:
        DATA32
        DC32     Temp_List

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_12:
        DATA32
        DC32     Change_To_Bit

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_13:
        DATA32
        DC32     0x40360000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_14:
        DATA32
        DC32     0x403a0000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_15:
        DATA32
        DC32     `Paint_Angle::Temp_Count`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_16:
        DATA32
        DC32     0x41c80000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable12_17:
        DATA32
        DC32     0x41200000
// 1343 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1344 void LCD_Write_Float(uint8 x,uint8 y,float Number)
// 1345 {
LCD_Write_Float:
        PUSH     {R4,R5,LR}
        SUB      SP,SP,#+20
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R0,R2
// 1346   int8 Temp_Buf[17];
// 1347   Float_To_String(Number,(uint8 *)Temp_Buf,3);
        MOVS     R2,#+3
        MOV      R1,SP
        BL       Float_To_String
// 1348   LCD_P6x8Str(x,y,(uint8 *)Temp_Buf);
        MOV      R2,SP
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_P6x8Str
// 1349 }
        ADD      SP,SP,#+20
        POP      {R4,R5,PC}       ;; return
// 1350 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1351 void LCD_Write_Int(uint8 x,uint8 y,int16 Number)
// 1352 {
LCD_Write_Int:
        PUSH     {R4-R7,LR}
        SUB      SP,SP,#+20
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R0,R2
// 1353   int8 Temp_Buf[17];
// 1354   Float_To_String((float)Number,(uint8 *)Temp_Buf,0);
        MOVS     R2,#+0
        MOV      R1,SP
        MOVS     R6,R1
        MOVS     R7,R2
        SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
        BL       __aeabi_i2f
        MOVS     R2,R7
        MOVS     R1,R6
        BL       Float_To_String
// 1355   LCD_P6x8Str(x,y,(uint8 *)Temp_Buf);
        MOV      R2,SP
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_P6x8Str
// 1356 }
        ADD      SP,SP,#+20
        POP      {R4-R7,PC}       ;; return
// 1357 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1358 void LCD_Write_Float_Dot(uint8 x,uint8 y,float Number,int dotNumber)
// 1359 {
LCD_Write_Float_Dot:
        PUSH     {R4,R5,LR}
        SUB      SP,SP,#+20
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R0,R2
// 1360   int8 Temp_Buf[17];
// 1361   Float_To_String(Number,(uint8 *)Temp_Buf,dotNumber);
        MOVS     R2,R3
        MOV      R1,SP
        BL       Float_To_String
// 1362   LCD_P6x8Str(x,y,(uint8 *)Temp_Buf);
        MOV      R2,SP
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_P6x8Str
// 1363 }
        ADD      SP,SP,#+20
        POP      {R4,R5,PC}       ;; return
// 1364 
// 1365 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1366 void LCD_Write_Float_Dot_Chinese(uint8 x,uint8 y,float Number,int dotNumber)
// 1367 {
LCD_Write_Float_Dot_Chinese:
        PUSH     {R4,R5,LR}
        SUB      SP,SP,#+20
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R0,R2
// 1368   int8 Temp_Buf[17];
// 1369   Float_To_String(Number,(uint8 *)Temp_Buf,dotNumber);
        MOVS     R2,R3
        MOV      R1,SP
        BL       Float_To_String
// 1370   LCD_P8x16Str(x,y,(uint8 *)Temp_Buf);
        MOV      R2,SP
        MOVS     R1,R5
        UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
        MOVS     R0,R4
        UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
        BL       LCD_P8x16Str
// 1371 }
        ADD      SP,SP,#+20
        POP      {R4,R5,PC}       ;; return

        SECTION `.iar_vfe_header`:DATA:NOALLOC:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
        DC32 0

        END
// 
//   196 bytes in section .bss
// 1 256 bytes in section .data
// 4 677 bytes in section .rodata
// 3 040 bytes in section .text
// 
// 3 040 bytes of CODE  memory
// 4 677 bytes of CONST memory
// 1 452 bytes of DATA  memory
//
//Errors: none
//Warnings: none
