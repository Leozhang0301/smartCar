###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.1.169/W32 for ARM         18/May/2019  16:18:33
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Users\que\Desktop\AAA_xinbiao\smartcar\lib\common\printf.c
#    Command line =  
#        -f C:\Users\TEMPLA~1.000\AppData\Local\Temp\EWBD8A.tmp
#        (C:\Users\que\Desktop\AAA_xinbiao\smartcar\lib\common\printf.c -D
#        LPLD_K60 -lCN
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\RAM\List"
#        -lB
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\RAM\List"
#        -o
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\RAM\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\@@\605110 IAR for
#        ARM 8.30\arm\inc\c\DLib_Config_Normal.h" -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\app\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\CPU\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\common\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\HW\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\DEV\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Ports\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Source\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\option\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\common\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\driver\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\descriptor\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\class\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\Me\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\app\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\app\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\common\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\CPU\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\Jay\"
#        -Ol -I "D:\@@\605110 IAR for ARM 8.30\arm\CMSIS\Core\Include\" -I
#        "D:\@@\605110 IAR for ARM 8.30\arm\CMSIS\DSP\Include\" -D
#        ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\RAM\List\printf.lst
#    Object file  =  
#        C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\RAM\Obj\printf.o
#
###############################################################################

C:\Users\que\Desktop\AAA_xinbiao\smartcar\lib\common\printf.c
      1          /**
      2           * @file printf.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief C库标准printf()函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          
     23          #include "common.h"
     24          #include <stdarg.h>
     25          
     26          /********************************************************************/
     27          
     28          typedef struct
     29          {
     30              int32 dest;
     31              void (*func)(int8);
     32              int8 *loc;
     33          } PRINTK_INFO;
     34          
     35          int32 
     36          printk (PRINTK_INFO *, const int8 *, va_list);
     37          
     38          /********************************************************************/
     39          
     40          #define DEST_CONSOLE    (1)
     41          #define DEST_STRING     (2)
     42          
     43          #define FLAGS_MINUS     (0x01)
     44          #define FLAGS_PLUS      (0x02)
     45          #define FLAGS_SPACE     (0x04)
     46          #define FLAGS_ZERO      (0x08)
     47          #define FLAGS_POUND     (0x10)
     48          
     49          #define IS_FLAG_MINUS(a)    (a & FLAGS_MINUS)
     50          #define IS_FLAG_PLUS(a)     (a & FLAGS_PLUS)
     51          #define IS_FLAG_SPACE(a)    (a & FLAGS_SPACE)
     52          #define IS_FLAG_ZERO(a)     (a & FLAGS_ZERO)
     53          #define IS_FLAG_POUND(a)    (a & FLAGS_POUND)
     54          
     55          #define LENMOD_h        (0x01)
     56          #define LENMOD_l        (0x02)
     57          #define LENMOD_L        (0x04)
     58          
     59          #define IS_LENMOD_h(a)  (a & LENMOD_h)
     60          #define IS_LENMOD_l(a)  (a & LENMOD_l)
     61          #define IS_LENMOD_L(a)  (a & LENMOD_L)
     62          
     63          #define FMT_d   (0x0001)
     64          #define FMT_o   (0x0002)
     65          #define FMT_x   (0x0004)
     66          #define FMT_X   (0x0008)
     67          #define FMT_u   (0x0010)
     68          #define FMT_c   (0x0020)
     69          #define FMT_s   (0x0040)
     70          #define FMT_p   (0x0080)
     71          #define FMT_n   (0x0100)
     72          
     73          #define IS_FMT_d(a)     (a & FMT_d)
     74          #define IS_FMT_o(a)     (a & FMT_o)
     75          #define IS_FMT_x(a)     (a & FMT_x)
     76          #define IS_FMT_X(a)     (a & FMT_X)
     77          #define IS_FMT_u(a)     (a & FMT_u)
     78          #define IS_FMT_c(a)     (a & FMT_c)
     79          #define IS_FMT_s(a)     (a & FMT_s)
     80          #define IS_FMT_p(a)     (a & FMT_p)
     81          #define IS_FMT_n(a)     (a & FMT_n)
     82          
     83          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     84          static void printk_putc (int32 c, int32 *count, PRINTK_INFO *info)
     85          {
   \                     printk_putc: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x000C             MOVS     R4,R1
     86              switch (info->dest)
   \        0x4   0x6811             LDR      R1,[R2, #+0]
   \        0x6   0x2901             CMP      R1,#+1
   \        0x8   0xD002             BEQ.N    ??printk_putc_0
   \        0xA   0x2902             CMP      R1,#+2
   \        0xC   0xD004             BEQ.N    ??printk_putc_1
   \        0xE   0xE009             B.N      ??printk_putc_2
     87              {
     88                  case DEST_CONSOLE:
     89                      info->func((int8)c);
   \                     ??printk_putc_0: (+1)
   \       0x10   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \       0x12   0x6851             LDR      R1,[R2, #+4]
   \       0x14   0x4788             BLX      R1
     90                      break;
   \       0x16   0xE005             B.N      ??printk_putc_3
     91                  case DEST_STRING:
     92                      *(info->loc) = (uint8)c;
   \                     ??printk_putc_1: (+1)
   \       0x18   0x6891             LDR      R1,[R2, #+8]
   \       0x1A   0x7008             STRB     R0,[R1, #+0]
     93                      ++(info->loc);
   \       0x1C   0x6890             LDR      R0,[R2, #+8]
   \       0x1E   0x1C40             ADDS     R0,R0,#+1
   \       0x20   0x6090             STR      R0,[R2, #+8]
     94                      break;
   \       0x22   0xE7FF             B.N      ??printk_putc_3
     95                  default:
     96                      break;
     97              }
     98              *count += 1;
   \                     ??printk_putc_2: (+1)
   \                     ??printk_putc_3: (+1)
   \       0x24   0x6820             LDR      R0,[R4, #+0]
   \       0x26   0x1C40             ADDS     R0,R0,#+1
   \       0x28   0x6020             STR      R0,[R4, #+0]
     99          }
   \       0x2A   0xBD10             POP      {R4,PC}          ;; return
    100          
    101          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    102          static int32 printk_mknumstr (int8 *numstr, void *nump, int32 neg, int32 radix)
    103          {
   \                     printk_mknumstr: (+1)
   \        0x0   0xB430             PUSH     {R4,R5}
   \        0x2   0x0004             MOVS     R4,R0
    104              int32 a,b,c;
    105              uint32 ua,ub,uc;
    106          
    107              int32 nlen;
    108              int8 *nstrp;
    109          
    110              nlen = 0;
   \        0x4   0x2000             MOVS     R0,#+0
    111              nstrp = numstr;
    112              *nstrp++ = '\0';
   \        0x6   0x2500             MOVS     R5,#+0
   \        0x8   0x7025             STRB     R5,[R4, #+0]
   \        0xA   0x1C65             ADDS     R5,R4,#+1
    113          
    114              if (neg)
   \        0xC   0x2A00             CMP      R2,#+0
   \        0xE   0xD01A             BEQ.N    ??printk_mknumstr_0
    115              {
    116                  a = *(int32 *)nump;
   \       0x10   0x6809             LDR      R1,[R1, #+0]
    117                  if (a == 0)
   \       0x12   0x2900             CMP      R1,#+0
   \       0x14   0xD107             BNE.N    ??printk_mknumstr_1
    118                  {
    119                      *nstrp = '0';
   \       0x16   0x2130             MOVS     R1,#+48
   \       0x18   0x7029             STRB     R1,[R5, #+0]
    120                      ++nlen;
   \       0x1A   0x1C40             ADDS     R0,R0,#+1
    121                      goto done;
    122                  }
    123                  while (a != 0)
    124                  {
    125                      b = (int32)a / (int32)radix;
    126                      c = (int32)a - ((int32)b * (int32)radix);
    127                      if (c < 0)
    128                      {
    129                          c = ~c + 1 + '0';
    130                      }
    131                      else
    132                      {
    133                          c = c + '0';
    134                      }
    135                      a = b;
    136                      *nstrp++ = (int8)c;
    137                      ++nlen;
    138                  }
    139              }
    140              else
    141              {
    142                  ua = *(uint32 *)nump;
    143                  if (ua == 0)
    144                  {
    145                      *nstrp = '0';
    146                      ++nlen;
    147                      goto done;
    148                  }
    149                  while (ua != 0)
    150                  {
    151                      ub = (uint32)ua / (uint32)radix;
    152                      uc = (uint32)ua - ((uint32)ub * (uint32)radix);
    153                      if (uc < 10)
    154                      {
    155                          uc = uc + '0';
    156                      }
    157                      else
    158                      {
    159                          uc = uc - 10 + 'A';
    160                      }
    161                      ua = ub;
    162                      *nstrp++ = (int8)uc;
    163                      ++nlen;
    164                  }
    165              }
    166              done:
    167              return nlen;
   \                     ??printk_mknumstr_2: (+1)
   \       0x1C   0xBC30             POP      {R4,R5}
   \       0x1E   0x4770             BX       LR               ;; return
   \                     ??printk_mknumstr_3: (+1)
   \       0x20   0x3130             ADDS     R1,R1,#+48
   \       0x22   0x000C             MOVS     R4,R1
   \       0x24   0xE00A             B.N      ??printk_mknumstr_4
   \                     ??printk_mknumstr_1: (+1)
   \       0x26   0x2900             CMP      R1,#+0
   \       0x28   0xD0F8             BEQ.N    ??printk_mknumstr_2
   \       0x2A   0xFB91 0xF2F3      SDIV     R2,R1,R3
   \       0x2E   0xFB03 0x1112      MLS      R1,R3,R2,R1
   \       0x32   0x2900             CMP      R1,#+0
   \       0x34   0xD5F4             BPL.N    ??printk_mknumstr_3
   \       0x36   0x43C9             MVNS     R1,R1
   \       0x38   0x3131             ADDS     R1,R1,#+49
   \       0x3A   0x000C             MOVS     R4,R1
   \                     ??printk_mknumstr_4: (+1)
   \       0x3C   0x0011             MOVS     R1,R2
   \       0x3E   0x702C             STRB     R4,[R5, #+0]
   \       0x40   0x1C6D             ADDS     R5,R5,#+1
   \       0x42   0x1C40             ADDS     R0,R0,#+1
   \       0x44   0xE7EF             B.N      ??printk_mknumstr_1
   \                     ??printk_mknumstr_0: (+1)
   \       0x46   0x6809             LDR      R1,[R1, #+0]
   \       0x48   0x2900             CMP      R1,#+0
   \       0x4A   0xD109             BNE.N    ??printk_mknumstr_5
   \       0x4C   0x2130             MOVS     R1,#+48
   \       0x4E   0x7029             STRB     R1,[R5, #+0]
   \       0x50   0x1C40             ADDS     R0,R0,#+1
   \       0x52   0xE7E3             B.N      ??printk_mknumstr_2
   \                     ??printk_mknumstr_6: (+1)
   \       0x54   0x3137             ADDS     R1,R1,#+55
   \       0x56   0x000C             MOVS     R4,R1
   \                     ??printk_mknumstr_7: (+1)
   \       0x58   0x0011             MOVS     R1,R2
   \       0x5A   0x702C             STRB     R4,[R5, #+0]
   \       0x5C   0x1C6D             ADDS     R5,R5,#+1
   \       0x5E   0x1C40             ADDS     R0,R0,#+1
   \                     ??printk_mknumstr_5: (+1)
   \       0x60   0x2900             CMP      R1,#+0
   \       0x62   0xD0DB             BEQ.N    ??printk_mknumstr_2
   \       0x64   0xFBB1 0xF2F3      UDIV     R2,R1,R3
   \       0x68   0xFB03 0x1112      MLS      R1,R3,R2,R1
   \       0x6C   0x290A             CMP      R1,#+10
   \       0x6E   0xD2F1             BCS.N    ??printk_mknumstr_6
   \       0x70   0x3130             ADDS     R1,R1,#+48
   \       0x72   0x000C             MOVS     R4,R1
   \       0x74   0xE7F0             B.N      ??printk_mknumstr_7
    168          }
    169          
    170          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    171          static void printk_pad_zero (int32 curlen, int32 field_width, int32 *count, PRINTK_INFO *info)
    172          {
   \                     printk_pad_zero: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
   \        0x8   0x001F             MOVS     R7,R3
    173              int32 i;
    174          
    175              for (i = curlen; i < field_width; i++)
   \        0xA   0xE005             B.N      ??printk_pad_zero_0
    176              {
    177                  printk_putc('0',count, info);
   \                     ??printk_pad_zero_1: (+1)
   \        0xC   0x003A             MOVS     R2,R7
   \        0xE   0x0031             MOVS     R1,R6
   \       0x10   0x2030             MOVS     R0,#+48
   \       0x12   0x....'....        BL       printk_putc
    178              }
   \       0x16   0x1C64             ADDS     R4,R4,#+1
   \                     ??printk_pad_zero_0: (+1)
   \       0x18   0x42AC             CMP      R4,R5
   \       0x1A   0xDBF7             BLT.N    ??printk_pad_zero_1
    179          }
   \       0x1C   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    180          
    181          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    182          static void
    183          printk_pad_space (int32 curlen, int32 field_width, int32 *count, PRINTK_INFO *info)
    184          {
   \                     printk_pad_space: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
   \        0x8   0x001F             MOVS     R7,R3
    185              int32 i;
    186          
    187              for (i = curlen; i < field_width; i++)
   \        0xA   0xE005             B.N      ??printk_pad_space_0
    188              {
    189                  printk_putc(' ',count, info);
   \                     ??printk_pad_space_1: (+1)
   \        0xC   0x003A             MOVS     R2,R7
   \        0xE   0x0031             MOVS     R1,R6
   \       0x10   0x2020             MOVS     R0,#+32
   \       0x12   0x....'....        BL       printk_putc
    190              }
   \       0x16   0x1C64             ADDS     R4,R4,#+1
   \                     ??printk_pad_space_0: (+1)
   \       0x18   0x42AC             CMP      R4,R5
   \       0x1A   0xDBF7             BLT.N    ??printk_pad_space_1
    191          }
   \       0x1C   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    192          
    193          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    194          int32 printk (PRINTK_INFO *info, const int8 *fmt, va_list ap)
    195          {
   \                     printk: (+1)
   \        0x0   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \        0x4   0xB08D             SUB      SP,SP,#+52
   \        0x6   0x0005             MOVS     R5,R0
   \        0x8   0x4691             MOV      R9,R2
    196              /* va_list ap; */
    197              int8 *p;
    198              int32 c;
    199          
    200              int8 vstr[33];
    201              int8 *vstrp;
    202              int32 vlen;
    203          
    204              int32 done;
    205              int32 count = 0;
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0x9000             STR      R0,[SP, #+0]
    206          
    207              int32 flags_used;
    208              int32 field_width;
    209          #if 0
    210              int32 precision_used;
    211              int32 precision_width;
    212              int32 length_modifier;
    213          #endif
    214          
    215              int32 ival;
    216              int32 schar, dschar;
    217              int32 *ivalp;
    218              int8 *sval;
    219              int32 cval;
    220              uint32 uval;
    221          
    222              /*
    223               * Start parsing apart the format string and display appropriate
    224               * formats and data.
    225               */
    226              for (p = (int8 *)fmt; (c = *p) != 0; p++)
   \        0xE   0x4688             MOV      R8,R1
   \       0x10   0xE00C             B.N      ??printk_0
    227              {
    228                  /*
    229                   * All formats begin with a '%' marker.  Special chars like
    230                   * '\n' or '\t' are normally converted to the appropriate
    231                   * character by the __compiler__.  Thus, no need for this
    232                   * routine to account for the '\' character.
    233                   */
    234                  if (c != '%')
    235                  {
    236                      /*
    237                       * This needs to be replaced with something like
    238                       * 'out_char()' or call an OS routine.
    239                       */
    240          #ifndef UNIX_DEBUG
    241                      if (c != '\n')
    242                      {
    243                          printk_putc(c, &count, info);
    244                      }
    245                      else
    246                      {
    247                          printk_putc(0x0D /* CR */, &count, info);
    248                          printk_putc(0x0A /* LF */, &count, info);
    249                      }
    250          #else
    251                      printk_putc(c, &count, info);
    252          #endif
    253          
    254                      /*
    255                       * By using 'continue', the next iteration of the loop
    256                       * is used, skipping the code that follows.
    257                       */
    258                      continue;
    259                  }
    260          
    261                  /*
    262                   * First check for specification modifier flags.
    263                   */
    264                  flags_used = 0;
    265                  done = FALSE;
    266                  while (!done)
    267                  {
    268                      switch (/* c = */ *++p)
    269                      {
    270                          case '-':
    271                              flags_used |= FLAGS_MINUS;
    272                              break;
    273                          case '+':
    274                              flags_used |= FLAGS_PLUS;
    275                              break;
    276                          case ' ':
    277                              flags_used |= FLAGS_SPACE;
    278                              break;
    279                          case '0':
    280                              flags_used |= FLAGS_ZERO;
    281                              break;
    282                          case '#':
    283                              flags_used |= FLAGS_POUND;
    284                              break;
    285                          default:
    286                              /* we've gone one int8 too far */
    287                              --p;
    288                              done = TRUE;
    289                              break;
    290                      }
    291                  }
    292          
    293                  /*
    294                   * Next check for minimum field width.
    295                   */
    296                  field_width = 0;
    297                  done = FALSE;
    298                  while (!done)
    299                  {
    300                      switch (c = *++p)
    301                      {
    302                          case '0':
    303                          case '1':
    304                          case '2':
    305                          case '3':
    306                          case '4':
    307                          case '5':
    308                          case '6':
    309                          case '7':
    310                          case '8':
    311                          case '9':
    312                              field_width = (field_width * 10) + (c - '0');
    313                              break;
    314                          default:
    315                              /* we've gone one int8 too far */
    316                              --p;
    317                              done = TRUE;
    318                              break;
    319                      }
    320                  }
    321          
    322                  /*
    323                   * Next check for the width and precision field separator.
    324                   */
    325                  if (/* (c = *++p) */ *++p == '.')
    326                  {
    327                      /* precision_used = TRUE; */
    328          
    329                      /*
    330                       * Must get precision field width, if present.
    331                       */
    332                      /* precision_width = 0; */
    333                      done = FALSE;
    334                      while (!done)
    335                      {
    336                          switch (/* c = uncomment if used below */ *++p)
    337                          {
    338                              case '0':
    339                              case '1':
    340                              case '2':
    341                              case '3':
    342                              case '4':
    343                              case '5':
    344                              case '6':
    345                              case '7':
    346                              case '8':
    347                              case '9':
    348          #if 0
    349                                  precision_width = (precision_width * 10) +
    350                                      (c - '0');
    351          #endif
    352                                  break;
    353                              default:
    354                                  /* we've gone one int8 too far */
    355                                  --p;
    356                                  done = TRUE;
    357                                  break;
    358                          }
    359                      }
    360                  }
    361                  else
    362                  {
    363                      /* we've gone one int8 too far */
    364                      --p;
    365          #if 0
    366                      precision_used = FALSE;
    367                      precision_width = 0;
    368          #endif
    369                  }
    370          
    371                  /*
    372                   * Check for the length modifier.
    373                   */
    374                  /* length_modifier = 0; */
    375                  switch (/* c = */ *++p)
    376                  {
    377                      case 'h':
    378                          /* length_modifier |= LENMOD_h; */
    379                          break;
    380                      case 'l':
    381                          /* length_modifier |= LENMOD_l; */
    382                          break;
    383                      case 'L':
    384                          /* length_modifier |= LENMOD_L; */
    385                          break;
    386                      default:
    387                          /* we've gone one int8 too far */
    388                          --p;
    389                          break;
    390                  }
    391          
    392                  /*
    393                   * Now we're ready to examine the format.
    394                   */
    395                  switch (c = *++p)
    396                  {
    397                      case 'd':
    398                      case 'i':
    399                          ival = (int32)va_arg(ap, int32);
    400                          vlen = printk_mknumstr(vstr,&ival,TRUE,10);
    401                          vstrp = &vstr[vlen];
    402          
    403                          if (ival < 0)
    404                          {
    405                              schar = '-';
    406                              ++vlen;
    407                          }
    408                          else
    409                          {
    410                              if (IS_FLAG_PLUS(flags_used))
    411                              {
    412                                  schar = '+';
    413                                  ++vlen;
    414                              }
    415                              else
    416                              {
    417                                  if (IS_FLAG_SPACE(flags_used))
    418                                  {
    419                                      schar = ' ';
    420                                      ++vlen;
    421                                  }
    422                                  else
    423                                  {
    424                                      schar = 0;
    425                                  }
    426                              }
    427                          }
    428                          dschar = FALSE;
    429                      
    430                          /*
    431                           * do the ZERO pad.
    432                           */
    433                          if (IS_FLAG_ZERO(flags_used))
    434                          {
    435                              if (schar)
    436                                  printk_putc(schar, &count, info);
    437                              dschar = TRUE;
    438                      
    439                              printk_pad_zero (vlen, field_width, &count, info);
    440                              vlen = field_width;
    441                          }
    442                          else
    443                          {
    444                              if (!IS_FLAG_MINUS(flags_used))
    445                              {
    446                                  printk_pad_space (vlen, field_width, &count, info);
    447                      
    448                                  if (schar)
    449                                      printk_putc(schar, &count, info);
    450                                  dschar = TRUE;
    451                              }
    452                          }
    453                      
    454                          /* the string was built in reverse order, now display in */
    455                          /* correct order */
    456                          if (!dschar && schar)
    457                          {
    458                              printk_putc(schar, &count, info);
    459                          }
    460                          goto cont_xd;
    461          
    462                      case 'x':
    463                      case 'X':
    464                          uval = (uint32)va_arg(ap, uint32);
    465                          vlen = printk_mknumstr(vstr,&uval,FALSE,16);
    466                          vstrp = &vstr[vlen];
    467          
    468                          dschar = FALSE;
    469                          if (IS_FLAG_ZERO(flags_used))
    470                          {
    471                              if (IS_FLAG_POUND(flags_used))
    472                              {
    473                                  printk_putc('0', &count, info);
    474                                  printk_putc('x', &count, info);
    475                                  /*vlen += 2;*/
    476                                  dschar = TRUE;
    477                              }
    478                              printk_pad_zero (vlen, field_width, &count, info);
    479                              vlen = field_width;
    480                          }
    481                          else
    482                          {
    483                              if (!IS_FLAG_MINUS(flags_used))
    484                              {
    485                                  if (IS_FLAG_POUND(flags_used))
    486                                  {
    487                                      vlen += 2;
    488                                  }
    489                                  printk_pad_space (vlen, field_width, &count, info);
    490                                  if (IS_FLAG_POUND(flags_used))
    491                                  {
    492                                      printk_putc('0', &count, info);
    493                                      printk_putc('x', &count, info);
    494                                      dschar = TRUE;
    495                                  }
    496                              }
    497                          }
    498          
    499                          if ((IS_FLAG_POUND(flags_used)) && !dschar)
    500                          {
    501                              printk_putc('0', &count, info);
    502                              printk_putc('x', &count, info);
    503                              vlen += 2;
    504                          }
    505                          goto cont_xd;
    506          
    507                      case 'o':
    508                          uval = (uint32)va_arg(ap, uint32);
    509                          vlen = printk_mknumstr(vstr,&uval,FALSE,8);
    510                          goto cont_u;
    511                      case 'b':
    512                          uval = (uint32)va_arg(ap, uint32);
    513                          vlen = printk_mknumstr(vstr,&uval,FALSE,2);
    514                          goto cont_u;
    515                      case 'p':
    516                          uval = (uint32)va_arg(ap, void *);
    517                          vlen = printk_mknumstr(vstr,&uval,FALSE,16);
    518                          goto cont_u;
    519                      case 'u':
    520                          uval = (uint32)va_arg(ap, uint32);
    521                          vlen = printk_mknumstr(vstr,&uval,FALSE,10);
    522          
    523                          cont_u:
    524                              vstrp = &vstr[vlen];
    525          
    526                              if (IS_FLAG_ZERO(flags_used))
    527                              {
    528                                  printk_pad_zero (vlen, field_width, &count, info);
    529                                  vlen = field_width;
    530                              }
    531                              else
    532                              {
    533                                  if (!IS_FLAG_MINUS(flags_used))
    534                                  {
    535                                      printk_pad_space (vlen, field_width, &count, info);
    536                                  }
    537                              }
    538          
    539                          cont_xd:
    540                              while (*vstrp)
    541                                  printk_putc(*vstrp--, &count, info);
    542          
    543                              if (IS_FLAG_MINUS(flags_used))
    544                              {
    545                                  printk_pad_space (vlen, field_width, &count, info);
    546                              }
    547                          break;
    548          
    549                      case 'c':
    550                          cval = (int8)va_arg(ap, uint32);
    551                          printk_putc(cval,&count, info);
    552                          break;
    553                      case 's':
    554                          sval = (int8 *)va_arg(ap, int8 *);
    555                          if (sval)
    556                          {
    557                              vlen = strlen(sval);
    558                              if (!IS_FLAG_MINUS(flags_used))
    559                              {
    560                                  printk_pad_space (vlen, field_width, &count, info);
    561                              }
    562                              while (*sval)
    563                                  printk_putc(*sval++,&count, info);
    564                              if (IS_FLAG_MINUS(flags_used))
    565                              {
    566                                  printk_pad_space (vlen, field_width, &count, info);
    567                              }
    568                          }
    569                          break;
    570                      case 'n':
    571                          ivalp = (int32 *)va_arg(ap, int32 *);
    572                          *ivalp = count;
    573                          break;
    574                      default:
    575                          printk_putc(c,&count, info);
   \                     ??printk_1: (+1)
   \       0x12   0x002A             MOVS     R2,R5
   \       0x14   0x4669             MOV      R1,SP
   \       0x16   0x....'....        BL       printk_putc
    576                          break;
   \       0x1A   0xE005             B.N      ??printk_2
   \                     ??printk_3: (+1)
   \       0x1C   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \       0x20   0xF119 0x0904      ADDS     R9,R9,#+4
   \       0x24   0x9900             LDR      R1,[SP, #+0]
   \       0x26   0x6001             STR      R1,[R0, #+0]
   \                     ??printk_2: (+1)
   \       0x28   0xF118 0x0801      ADDS     R8,R8,#+1
   \                     ??printk_0: (+1)
   \       0x2C   0xF998 0x0000      LDRSB    R0,[R8, #+0]
   \       0x30   0x2800             CMP      R0,#+0
   \       0x32   0xF000 0x81C9      BEQ.W    ??printk_4
   \       0x36   0x2825             CMP      R0,#+37
   \       0x38   0xD011             BEQ.N    ??printk_5
   \       0x3A   0x280A             CMP      R0,#+10
   \       0x3C   0xD004             BEQ.N    ??printk_6
   \       0x3E   0x002A             MOVS     R2,R5
   \       0x40   0x4669             MOV      R1,SP
   \       0x42   0x....'....        BL       printk_putc
   \       0x46   0xE009             B.N      ??printk_7
   \                     ??printk_6: (+1)
   \       0x48   0x002A             MOVS     R2,R5
   \       0x4A   0x4669             MOV      R1,SP
   \       0x4C   0x200D             MOVS     R0,#+13
   \       0x4E   0x....'....        BL       printk_putc
   \       0x52   0x002A             MOVS     R2,R5
   \       0x54   0x4669             MOV      R1,SP
   \       0x56   0x200A             MOVS     R0,#+10
   \       0x58   0x....'....        BL       printk_putc
   \                     ??printk_7: (+1)
   \       0x5C   0xE7E4             B.N      ??printk_2
   \                     ??printk_5: (+1)
   \       0x5E   0x2600             MOVS     R6,#+0
   \       0x60   0x2000             MOVS     R0,#+0
   \       0x62   0xE001             B.N      ??printk_8
   \                     ??printk_9: (+1)
   \       0x64   0xF056 0x0601      ORRS     R6,R6,#0x1
   \                     ??printk_8: (+1)
   \       0x68   0x2800             CMP      R0,#+0
   \       0x6A   0xD11E             BNE.N    ??printk_10
   \       0x6C   0xF118 0x0801      ADDS     R8,R8,#+1
   \       0x70   0xF998 0x1000      LDRSB    R1,[R8, #+0]
   \       0x74   0x2920             CMP      R1,#+32
   \       0x76   0xD00B             BEQ.N    ??printk_11
   \       0x78   0x2923             CMP      R1,#+35
   \       0x7A   0xD00F             BEQ.N    ??printk_12
   \       0x7C   0x292B             CMP      R1,#+43
   \       0x7E   0xD004             BEQ.N    ??printk_13
   \       0x80   0x292D             CMP      R1,#+45
   \       0x82   0xD0EF             BEQ.N    ??printk_9
   \       0x84   0x2930             CMP      R1,#+48
   \       0x86   0xD006             BEQ.N    ??printk_14
   \       0x88   0xE00B             B.N      ??printk_15
   \                     ??printk_13: (+1)
   \       0x8A   0xF056 0x0602      ORRS     R6,R6,#0x2
   \       0x8E   0xE7EB             B.N      ??printk_8
   \                     ??printk_11: (+1)
   \       0x90   0xF056 0x0604      ORRS     R6,R6,#0x4
   \       0x94   0xE7E8             B.N      ??printk_8
   \                     ??printk_14: (+1)
   \       0x96   0xF056 0x0608      ORRS     R6,R6,#0x8
   \       0x9A   0xE7E5             B.N      ??printk_8
   \                     ??printk_12: (+1)
   \       0x9C   0xF056 0x0610      ORRS     R6,R6,#0x10
   \       0xA0   0xE7E2             B.N      ??printk_8
   \                     ??printk_15: (+1)
   \       0xA2   0xF1B8 0x0801      SUBS     R8,R8,#+1
   \       0xA6   0x2001             MOVS     R0,#+1
   \       0xA8   0xE7DE             B.N      ??printk_8
   \                     ??printk_10: (+1)
   \       0xAA   0x2700             MOVS     R7,#+0
   \       0xAC   0x2000             MOVS     R0,#+0
   \       0xAE   0xE004             B.N      ??printk_16
   \                     ??printk_17: (+1)
   \       0xB0   0x220A             MOVS     R2,#+10
   \       0xB2   0xFB02 0x1107      MLA      R1,R2,R7,R1
   \       0xB6   0x3930             SUBS     R1,R1,#+48
   \       0xB8   0x000F             MOVS     R7,R1
   \                     ??printk_16: (+1)
   \       0xBA   0x2800             CMP      R0,#+0
   \       0xBC   0xD10B             BNE.N    ??printk_18
   \       0xBE   0xF118 0x0801      ADDS     R8,R8,#+1
   \       0xC2   0xF998 0x1000      LDRSB    R1,[R8, #+0]
   \       0xC6   0x000A             MOVS     R2,R1
   \       0xC8   0x3A30             SUBS     R2,R2,#+48
   \       0xCA   0x2A09             CMP      R2,#+9
   \       0xCC   0xD9F0             BLS.N    ??printk_17
   \                     ??printk_19: (+1)
   \       0xCE   0xF1B8 0x0801      SUBS     R8,R8,#+1
   \       0xD2   0x2001             MOVS     R0,#+1
   \       0xD4   0xE7F1             B.N      ??printk_16
   \                     ??printk_18: (+1)
   \       0xD6   0xF118 0x0101      ADDS     R1,R8,#+1
   \       0xDA   0xF991 0x0000      LDRSB    R0,[R1, #+0]
   \       0xDE   0x282E             CMP      R0,#+46
   \       0xE0   0xD10C             BNE.N    ??printk_20
   \       0xE2   0x2000             MOVS     R0,#+0
   \       0xE4   0xE7FF             B.N      ??printk_21
   \                     ??printk_22: (+1)
   \                     ??printk_21: (+1)
   \       0xE6   0x2800             CMP      R0,#+0
   \       0xE8   0xD109             BNE.N    ??printk_23
   \       0xEA   0x1C49             ADDS     R1,R1,#+1
   \       0xEC   0xF991 0x2000      LDRSB    R2,[R1, #+0]
   \       0xF0   0x3A30             SUBS     R2,R2,#+48
   \       0xF2   0x2A09             CMP      R2,#+9
   \       0xF4   0xD9F7             BLS.N    ??printk_22
   \                     ??printk_24: (+1)
   \       0xF6   0x1E49             SUBS     R1,R1,#+1
   \       0xF8   0x2001             MOVS     R0,#+1
   \       0xFA   0xE7F4             B.N      ??printk_21
   \                     ??printk_20: (+1)
   \       0xFC   0x1E49             SUBS     R1,R1,#+1
   \                     ??printk_23: (+1)
   \       0xFE   0x1C48             ADDS     R0,R1,#+1
   \      0x100   0xF990 0x1000      LDRSB    R1,[R0, #+0]
   \      0x104   0x294C             CMP      R1,#+76
   \      0x106   0xD006             BEQ.N    ??printk_25
   \      0x108   0x2968             CMP      R1,#+104
   \      0x10A   0xD002             BEQ.N    ??printk_26
   \      0x10C   0x296C             CMP      R1,#+108
   \      0x10E   0xD001             BEQ.N    ??printk_27
   \      0x110   0xE002             B.N      ??printk_28
   \                     ??printk_26: (+1)
   \      0x112   0xE002             B.N      ??printk_29
   \                     ??printk_27: (+1)
   \      0x114   0xE001             B.N      ??printk_29
   \                     ??printk_25: (+1)
   \      0x116   0xE000             B.N      ??printk_29
   \                     ??printk_28: (+1)
   \      0x118   0x1E40             SUBS     R0,R0,#+1
   \                     ??printk_29: (+1)
   \      0x11A   0xF110 0x0801      ADDS     R8,R0,#+1
   \      0x11E   0xF998 0x0000      LDRSB    R0,[R8, #+0]
   \      0x122   0x0001             MOVS     R1,R0
   \      0x124   0x2958             CMP      R1,#+88
   \      0x126   0xD06F             BEQ.N    ??printk_30
   \      0x128   0x2962             CMP      R1,#+98
   \      0x12A   0xF000 0x80CB      BEQ.W    ??printk_31
   \      0x12E   0x2963             CMP      R1,#+99
   \      0x130   0xF000 0x8119      BEQ.W    ??printk_32
   \      0x134   0x2964             CMP      R1,#+100
   \      0x136   0xD013             BEQ.N    ??printk_33
   \      0x138   0x2969             CMP      R1,#+105
   \      0x13A   0xD011             BEQ.N    ??printk_33
   \      0x13C   0x296E             CMP      R1,#+110
   \      0x13E   0xF43F 0xAF6D      BEQ.W    ??printk_3
   \      0x142   0x296F             CMP      R1,#+111
   \      0x144   0xF000 0x80B1      BEQ.W    ??printk_34
   \      0x148   0x2970             CMP      R1,#+112
   \      0x14A   0xF000 0x80C8      BEQ.W    ??printk_35
   \      0x14E   0x2973             CMP      R1,#+115
   \      0x150   0xF000 0x8113      BEQ.W    ??printk_36
   \      0x154   0x2975             CMP      R1,#+117
   \      0x156   0xF000 0x80CF      BEQ.W    ??printk_37
   \      0x15A   0x2978             CMP      R1,#+120
   \      0x15C   0xD054             BEQ.N    ??printk_30
   \      0x15E   0xE758             B.N      ??printk_1
   \                     ??printk_33: (+1)
   \      0x160   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x164   0xF119 0x0904      ADDS     R9,R9,#+4
   \      0x168   0x9003             STR      R0,[SP, #+12]
   \      0x16A   0x230A             MOVS     R3,#+10
   \      0x16C   0x2201             MOVS     R2,#+1
   \      0x16E   0xA903             ADD      R1,SP,#+12
   \      0x170   0xA804             ADD      R0,SP,#+16
   \      0x172   0x....'....        BL       printk_mknumstr
   \      0x176   0x4682             MOV      R10,R0
   \      0x178   0xA804             ADD      R0,SP,#+16
   \      0x17A   0xEB00 0x0B0A      ADD      R11,R0,R10
   \      0x17E   0x9803             LDR      R0,[SP, #+12]
   \      0x180   0x2800             CMP      R0,#+0
   \      0x182   0xD503             BPL.N    ??printk_38
   \      0x184   0x242D             MOVS     R4,#+45
   \      0x186   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \      0x18A   0xE00C             B.N      ??printk_39
   \                     ??printk_38: (+1)
   \      0x18C   0x07B0             LSLS     R0,R6,#+30
   \      0x18E   0xD503             BPL.N    ??printk_40
   \      0x190   0x242B             MOVS     R4,#+43
   \      0x192   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \      0x196   0xE006             B.N      ??printk_39
   \                     ??printk_40: (+1)
   \      0x198   0x0770             LSLS     R0,R6,#+29
   \      0x19A   0xD503             BPL.N    ??printk_41
   \      0x19C   0x2420             MOVS     R4,#+32
   \      0x19E   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \      0x1A2   0xE000             B.N      ??printk_39
   \                     ??printk_41: (+1)
   \      0x1A4   0x2400             MOVS     R4,#+0
   \                     ??printk_39: (+1)
   \      0x1A6   0x2000             MOVS     R0,#+0
   \      0x1A8   0x9002             STR      R0,[SP, #+8]
   \      0x1AA   0x0730             LSLS     R0,R6,#+28
   \      0x1AC   0xD510             BPL.N    ??printk_42
   \      0x1AE   0x2C00             CMP      R4,#+0
   \      0x1B0   0xD004             BEQ.N    ??printk_43
   \      0x1B2   0x002A             MOVS     R2,R5
   \      0x1B4   0x4669             MOV      R1,SP
   \      0x1B6   0x0020             MOVS     R0,R4
   \      0x1B8   0x....'....        BL       printk_putc
   \                     ??printk_43: (+1)
   \      0x1BC   0x2001             MOVS     R0,#+1
   \      0x1BE   0x9002             STR      R0,[SP, #+8]
   \      0x1C0   0x002B             MOVS     R3,R5
   \      0x1C2   0x466A             MOV      R2,SP
   \      0x1C4   0x0039             MOVS     R1,R7
   \      0x1C6   0x4650             MOV      R0,R10
   \      0x1C8   0x....'....        BL       printk_pad_zero
   \      0x1CC   0x46BA             MOV      R10,R7
   \      0x1CE   0xE010             B.N      ??printk_44
   \                     ??printk_42: (+1)
   \      0x1D0   0x07F0             LSLS     R0,R6,#+31
   \      0x1D2   0xD40E             BMI.N    ??printk_44
   \      0x1D4   0x002B             MOVS     R3,R5
   \      0x1D6   0x466A             MOV      R2,SP
   \      0x1D8   0x0039             MOVS     R1,R7
   \      0x1DA   0x4650             MOV      R0,R10
   \      0x1DC   0x....'....        BL       printk_pad_space
   \      0x1E0   0x2C00             CMP      R4,#+0
   \      0x1E2   0xD004             BEQ.N    ??printk_45
   \      0x1E4   0x002A             MOVS     R2,R5
   \      0x1E6   0x4669             MOV      R1,SP
   \      0x1E8   0x0020             MOVS     R0,R4
   \      0x1EA   0x....'....        BL       printk_putc
   \                     ??printk_45: (+1)
   \      0x1EE   0x2001             MOVS     R0,#+1
   \      0x1F0   0x9002             STR      R0,[SP, #+8]
   \                     ??printk_44: (+1)
   \      0x1F2   0x9802             LDR      R0,[SP, #+8]
   \      0x1F4   0x2800             CMP      R0,#+0
   \      0x1F6   0xD106             BNE.N    ??printk_46
   \      0x1F8   0x2C00             CMP      R4,#+0
   \      0x1FA   0xD004             BEQ.N    ??printk_46
   \      0x1FC   0x002A             MOVS     R2,R5
   \      0x1FE   0x4669             MOV      R1,SP
   \      0x200   0x0020             MOVS     R0,R4
   \      0x202   0x....'....        BL       printk_putc
   \                     ??printk_46: (+1)
   \      0x206   0xE0A1             B.N      ??printk_47
   \                     ??printk_30: (+1)
   \      0x208   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x20C   0xF119 0x0904      ADDS     R9,R9,#+4
   \      0x210   0x9001             STR      R0,[SP, #+4]
   \      0x212   0x2310             MOVS     R3,#+16
   \      0x214   0x2200             MOVS     R2,#+0
   \      0x216   0xA901             ADD      R1,SP,#+4
   \      0x218   0xA804             ADD      R0,SP,#+16
   \      0x21A   0x....'....        BL       printk_mknumstr
   \      0x21E   0x4682             MOV      R10,R0
   \      0x220   0xA804             ADD      R0,SP,#+16
   \      0x222   0xEB00 0x0B0A      ADD      R11,R0,R10
   \      0x226   0x2400             MOVS     R4,#+0
   \      0x228   0x0730             LSLS     R0,R6,#+28
   \      0x22A   0xD514             BPL.N    ??printk_48
   \      0x22C   0x06F0             LSLS     R0,R6,#+27
   \      0x22E   0xD50A             BPL.N    ??printk_49
   \      0x230   0x002A             MOVS     R2,R5
   \      0x232   0x4669             MOV      R1,SP
   \      0x234   0x2030             MOVS     R0,#+48
   \      0x236   0x....'....        BL       printk_putc
   \      0x23A   0x002A             MOVS     R2,R5
   \      0x23C   0x4669             MOV      R1,SP
   \      0x23E   0x2078             MOVS     R0,#+120
   \      0x240   0x....'....        BL       printk_putc
   \      0x244   0x2401             MOVS     R4,#+1
   \                     ??printk_49: (+1)
   \      0x246   0x002B             MOVS     R3,R5
   \      0x248   0x466A             MOV      R2,SP
   \      0x24A   0x0039             MOVS     R1,R7
   \      0x24C   0x4650             MOV      R0,R10
   \      0x24E   0x....'....        BL       printk_pad_zero
   \      0x252   0x46BA             MOV      R10,R7
   \      0x254   0xE018             B.N      ??printk_50
   \                     ??printk_48: (+1)
   \      0x256   0x07F0             LSLS     R0,R6,#+31
   \      0x258   0xD416             BMI.N    ??printk_50
   \      0x25A   0x06F0             LSLS     R0,R6,#+27
   \      0x25C   0xD501             BPL.N    ??printk_51
   \      0x25E   0xF11A 0x0A02      ADDS     R10,R10,#+2
   \                     ??printk_51: (+1)
   \      0x262   0x002B             MOVS     R3,R5
   \      0x264   0x466A             MOV      R2,SP
   \      0x266   0x0039             MOVS     R1,R7
   \      0x268   0x4650             MOV      R0,R10
   \      0x26A   0x....'....        BL       printk_pad_space
   \      0x26E   0x06F0             LSLS     R0,R6,#+27
   \      0x270   0xD50A             BPL.N    ??printk_50
   \      0x272   0x002A             MOVS     R2,R5
   \      0x274   0x4669             MOV      R1,SP
   \      0x276   0x2030             MOVS     R0,#+48
   \      0x278   0x....'....        BL       printk_putc
   \      0x27C   0x002A             MOVS     R2,R5
   \      0x27E   0x4669             MOV      R1,SP
   \      0x280   0x2078             MOVS     R0,#+120
   \      0x282   0x....'....        BL       printk_putc
   \      0x286   0x2401             MOVS     R4,#+1
   \                     ??printk_50: (+1)
   \      0x288   0x06F0             LSLS     R0,R6,#+27
   \      0x28A   0xD50D             BPL.N    ??printk_52
   \      0x28C   0x2C00             CMP      R4,#+0
   \      0x28E   0xD10B             BNE.N    ??printk_52
   \      0x290   0x002A             MOVS     R2,R5
   \      0x292   0x4669             MOV      R1,SP
   \      0x294   0x2030             MOVS     R0,#+48
   \      0x296   0x....'....        BL       printk_putc
   \      0x29A   0x002A             MOVS     R2,R5
   \      0x29C   0x4669             MOV      R1,SP
   \      0x29E   0x2078             MOVS     R0,#+120
   \      0x2A0   0x....'....        BL       printk_putc
   \      0x2A4   0xF11A 0x0A02      ADDS     R10,R10,#+2
   \                     ??printk_52: (+1)
   \      0x2A8   0xE050             B.N      ??printk_47
   \                     ??printk_34: (+1)
   \      0x2AA   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x2AE   0xF119 0x0904      ADDS     R9,R9,#+4
   \      0x2B2   0x9001             STR      R0,[SP, #+4]
   \      0x2B4   0x2308             MOVS     R3,#+8
   \      0x2B6   0x2200             MOVS     R2,#+0
   \      0x2B8   0xA901             ADD      R1,SP,#+4
   \      0x2BA   0xA804             ADD      R0,SP,#+16
   \      0x2BC   0x....'....        BL       printk_mknumstr
   \      0x2C0   0x4682             MOV      R10,R0
   \      0x2C2   0xE025             B.N      ??printk_53
   \                     ??printk_31: (+1)
   \      0x2C4   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x2C8   0xF119 0x0904      ADDS     R9,R9,#+4
   \      0x2CC   0x9001             STR      R0,[SP, #+4]
   \      0x2CE   0x2302             MOVS     R3,#+2
   \      0x2D0   0x2200             MOVS     R2,#+0
   \      0x2D2   0xA901             ADD      R1,SP,#+4
   \      0x2D4   0xA804             ADD      R0,SP,#+16
   \      0x2D6   0x....'....        BL       printk_mknumstr
   \      0x2DA   0x4682             MOV      R10,R0
   \      0x2DC   0xE018             B.N      ??printk_53
   \                     ??printk_35: (+1)
   \      0x2DE   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x2E2   0xF119 0x0904      ADDS     R9,R9,#+4
   \      0x2E6   0x9001             STR      R0,[SP, #+4]
   \      0x2E8   0x2310             MOVS     R3,#+16
   \      0x2EA   0x2200             MOVS     R2,#+0
   \      0x2EC   0xA901             ADD      R1,SP,#+4
   \      0x2EE   0xA804             ADD      R0,SP,#+16
   \      0x2F0   0x....'....        BL       printk_mknumstr
   \      0x2F4   0x4682             MOV      R10,R0
   \      0x2F6   0xE00B             B.N      ??printk_53
   \                     ??printk_37: (+1)
   \      0x2F8   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x2FC   0xF119 0x0904      ADDS     R9,R9,#+4
   \      0x300   0x9001             STR      R0,[SP, #+4]
   \      0x302   0x230A             MOVS     R3,#+10
   \      0x304   0x2200             MOVS     R2,#+0
   \      0x306   0xA901             ADD      R1,SP,#+4
   \      0x308   0xA804             ADD      R0,SP,#+16
   \      0x30A   0x....'....        BL       printk_mknumstr
   \      0x30E   0x4682             MOV      R10,R0
   \                     ??printk_53: (+1)
   \      0x310   0xA804             ADD      R0,SP,#+16
   \      0x312   0xEB00 0x0B0A      ADD      R11,R0,R10
   \      0x316   0x0730             LSLS     R0,R6,#+28
   \      0x318   0xD507             BPL.N    ??printk_54
   \      0x31A   0x002B             MOVS     R3,R5
   \      0x31C   0x466A             MOV      R2,SP
   \      0x31E   0x0039             MOVS     R1,R7
   \      0x320   0x4650             MOV      R0,R10
   \      0x322   0x....'....        BL       printk_pad_zero
   \      0x326   0x46BA             MOV      R10,R7
   \      0x328   0xE010             B.N      ??printk_47
   \                     ??printk_54: (+1)
   \      0x32A   0x07F0             LSLS     R0,R6,#+31
   \      0x32C   0xD40E             BMI.N    ??printk_47
   \      0x32E   0x002B             MOVS     R3,R5
   \      0x330   0x466A             MOV      R2,SP
   \      0x332   0x0039             MOVS     R1,R7
   \      0x334   0x4650             MOV      R0,R10
   \      0x336   0x....'....        BL       printk_pad_space
   \      0x33A   0xE007             B.N      ??printk_47
   \                     ??printk_55: (+1)
   \      0x33C   0x002A             MOVS     R2,R5
   \      0x33E   0x4669             MOV      R1,SP
   \      0x340   0xF99B 0x0000      LDRSB    R0,[R11, #+0]
   \      0x344   0x....'....        BL       printk_putc
   \      0x348   0xF1BB 0x0B01      SUBS     R11,R11,#+1
   \                     ??printk_47: (+1)
   \      0x34C   0xF99B 0x0000      LDRSB    R0,[R11, #+0]
   \      0x350   0x2800             CMP      R0,#+0
   \      0x352   0xD1F3             BNE.N    ??printk_55
   \      0x354   0x07F0             LSLS     R0,R6,#+31
   \      0x356   0xD505             BPL.N    ??printk_56
   \      0x358   0x002B             MOVS     R3,R5
   \      0x35A   0x466A             MOV      R2,SP
   \      0x35C   0x0039             MOVS     R1,R7
   \      0x35E   0x4650             MOV      R0,R10
   \      0x360   0x....'....        BL       printk_pad_space
   \                     ??printk_56: (+1)
   \      0x364   0xE660             B.N      ??printk_2
   \                     ??printk_32: (+1)
   \      0x366   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \      0x36A   0xF119 0x0904      ADDS     R9,R9,#+4
   \      0x36E   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \      0x370   0x002A             MOVS     R2,R5
   \      0x372   0x4669             MOV      R1,SP
   \      0x374   0x....'....        BL       printk_putc
   \      0x378   0xE656             B.N      ??printk_2
   \                     ??printk_36: (+1)
   \      0x37A   0xF8D9 0x4000      LDR      R4,[R9, #+0]
   \      0x37E   0xF119 0x0904      ADDS     R9,R9,#+4
   \      0x382   0x2C00             CMP      R4,#+0
   \      0x384   0xD01F             BEQ.N    ??printk_57
   \      0x386   0x0020             MOVS     R0,R4
   \      0x388   0x....'....        BL       strlen
   \      0x38C   0x4682             MOV      R10,R0
   \      0x38E   0x07F0             LSLS     R0,R6,#+31
   \      0x390   0xD40D             BMI.N    ??printk_58
   \      0x392   0x002B             MOVS     R3,R5
   \      0x394   0x466A             MOV      R2,SP
   \      0x396   0x0039             MOVS     R1,R7
   \      0x398   0x4650             MOV      R0,R10
   \      0x39A   0x....'....        BL       printk_pad_space
   \      0x39E   0xE006             B.N      ??printk_58
   \                     ??printk_59: (+1)
   \      0x3A0   0x002A             MOVS     R2,R5
   \      0x3A2   0x4669             MOV      R1,SP
   \      0x3A4   0xF994 0x0000      LDRSB    R0,[R4, #+0]
   \      0x3A8   0x....'....        BL       printk_putc
   \      0x3AC   0x1C64             ADDS     R4,R4,#+1
   \                     ??printk_58: (+1)
   \      0x3AE   0xF994 0x0000      LDRSB    R0,[R4, #+0]
   \      0x3B2   0x2800             CMP      R0,#+0
   \      0x3B4   0xD1F4             BNE.N    ??printk_59
   \      0x3B6   0x07F0             LSLS     R0,R6,#+31
   \      0x3B8   0xD505             BPL.N    ??printk_57
   \      0x3BA   0x002B             MOVS     R3,R5
   \      0x3BC   0x466A             MOV      R2,SP
   \      0x3BE   0x0039             MOVS     R1,R7
   \      0x3C0   0x4650             MOV      R0,R10
   \      0x3C2   0x....'....        BL       printk_pad_space
   \                     ??printk_57: (+1)
   \      0x3C6   0xE62F             B.N      ??printk_2
    577                  }
    578              }
    579              return count;
   \                     ??printk_4: (+1)
   \      0x3C8   0x9800             LDR      R0,[SP, #+0]
   \      0x3CA   0xB00D             ADD      SP,SP,#+52
   \      0x3CC   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    580          }
    581          
    582          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    583          int32 printf (const int8 *fmt, ...)
    584          {
   \                     printf: (+1)
   \        0x0   0xB40E             PUSH     {R1-R3}
   \        0x2   0xB5F0             PUSH     {R4-R7,LR}
   \        0x4   0x0001             MOVS     R1,R0
    585              va_list ap;
    586              int32 rvalue;
    587              PRINTK_INFO info;
    588          
    589          
    590              info.dest = DEST_CONSOLE;
   \        0x6   0x2001             MOVS     R0,#+1
   \        0x8   0x9000             STR      R0,[SP, #+0]
    591              info.func = &out_char;
   \        0xA   0x....             LDR.N    R0,??DataTable1
   \        0xC   0x9001             STR      R0,[SP, #+4]
    592              /*
    593               * Initialize the pointer to the variable length argument list.
    594               */
    595              va_start(ap, fmt);
   \        0xE   0xAA05             ADD      R2,SP,#+20
    596              rvalue = printk(&info, fmt, ap);
   \       0x10   0x4668             MOV      R0,SP
   \       0x12   0x....'....        BL       printk
    597              /*
    598               * Cleanup the variable length argument list.
    599               */
    600              va_end(ap);
    601              return rvalue;
   \       0x16   0xB004             ADD      SP,SP,#+16
   \       0x18   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return
    602          }
    603          
    604          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    605          int32 sprintf (int8 *s, const int8 *fmt, ...)
    606          {
   \                     sprintf: (+1)
   \        0x0   0xB40C             PUSH     {R2,R3}
   \        0x2   0xB5E0             PUSH     {R5-R7,LR}
    607              va_list ap;
    608              int32 rvalue = 0;
   \        0x4   0x2200             MOVS     R2,#+0
    609              PRINTK_INFO info;
    610          
    611              /*
    612               * Initialize the pointer to the variable length argument list.
    613               */
    614              if (s != 0)
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD00A             BEQ.N    ??sprintf_0
    615              {
    616                  info.dest = DEST_STRING;
   \        0xA   0x2202             MOVS     R2,#+2
   \        0xC   0x9200             STR      R2,[SP, #+0]
    617                  info.loc = s;
   \        0xE   0x9002             STR      R0,[SP, #+8]
    618                  va_start(ap, fmt);
   \       0x10   0xAA04             ADD      R2,SP,#+16
    619                  rvalue = printk(&info, fmt, ap);
   \       0x12   0x4668             MOV      R0,SP
   \       0x14   0x....'....        BL       printk
   \       0x18   0x0002             MOVS     R2,R0
    620                  *info.loc = '\0';
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0x9902             LDR      R1,[SP, #+8]
   \       0x1E   0x7008             STRB     R0,[R1, #+0]
    621                  va_end(ap);
    622              }
    623              return rvalue;
   \                     ??sprintf_0: (+1)
   \       0x20   0x0010             MOVS     R0,R2
   \       0x22   0xBC0E             POP      {R1-R3}
   \       0x24   0xF85D 0xFB0C      LDR      PC,[SP], #+12    ;; return
    624          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x....'....        DC32     out_char
    625          
    626          /********************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   printf
        32   -> printk
      88   printk
        88   -> printk_mknumstr
        88   -> printk_pad_space
        88   -> printk_pad_zero
        88   -> printk_putc
        88   -> strlen
       8   printk_mknumstr
      24   printk_pad_space
        24   -> printk_putc
      24   printk_pad_zero
        24   -> printk_putc
       8   printk_putc
         8   -- Indirect call
      24   sprintf
        24   -> printk


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
      28  printf
     976  printk
     118  printk_mknumstr
      30  printk_pad_space
      30  printk_pad_zero
      44  printk_putc
      40  sprintf

 
 1 270 bytes in section .text
 
 1 270 bytes of CODE memory

Errors: none
Warnings: 1
