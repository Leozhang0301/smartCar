###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.1.169/W32 for ARM         18/May/2019  16:18:07
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Users\que\Desktop\AAA_xinbiao\smartcar\lib\common\alloc.c
#    Command line =  
#        -f C:\Users\TEMPLA~1.000\AppData\Local\Temp\EW578F.tmp
#        (C:\Users\que\Desktop\AAA_xinbiao\smartcar\lib\common\alloc.c -D
#        LPLD_K60 -lCN
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\RAM\List"
#        -lB
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\RAM\List"
#        -o
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\RAM\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\@@\605110 IAR for
#        ARM 8.30\arm\inc\c\DLib_Config_Normal.h" -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\app\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\CPU\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\common\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\HW\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\DEV\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Ports\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Source\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\option\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\common\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\driver\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\descriptor\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\class\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\Me\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\app\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\app\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\common\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\CPU\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\Jay\"
#        -Ol -I "D:\@@\605110 IAR for ARM 8.30\arm\CMSIS\Core\Include\" -I
#        "D:\@@\605110 IAR for ARM 8.30\arm\CMSIS\DSP\Include\" -D
#        ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\RAM\List\alloc.lst
#    Object file  =  
#        C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\RAM\Obj\alloc.o
#
###############################################################################

C:\Users\que\Desktop\AAA_xinbiao\smartcar\lib\common\alloc.c
      1          /**
      2           * @file alloc.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief 通用 malloc()、free() 函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 该代码提供系统内存分配和释放函数。
     10           * 用户可选片内或片外内存，片外内存需FlexBus支持。
     11           *
     12           * 版权所有:北京拉普兰德电子技术有限公司
     13           * http://www.lpld.cn
     14           * mail:support@lpld.cn
     15           *
     16           * @par
     17           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     18           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     19           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     20           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     21           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     22           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     23           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     24           */
     25          
     26          #include "common.h"
     27          #include "stdlib.h"
     28          
     29          #if defined(__IAR_SYSTEMS_ICC__)
     30            #pragma section = "HEAP"
     31          #endif
     32          
     33          /********************************************************************/
     34          
     35          /*
     36           * This struct forms the minimum block size which is allocated, and
     37           * also forms the linked list for the memory space used with alloc()
     38           * and free().  It is padded so that on a 32-bit machine, all malloc'ed
     39           * pointers are 16-byte aligned.
     40           */
     41          typedef struct ALLOC_HDR
     42          {
     43              struct
     44              {
     45                  struct ALLOC_HDR     *ptr;
     46                  unsigned int size;
     47              } s;
     48              unsigned int align;
     49              unsigned int pad;
     50          } ALLOC_HDR;
     51          

   \                                 In section .bss, align 4
     52          static ALLOC_HDR base;
   \                     base:
   \        0x0                      DS8 16

   \                                 In section .bss, align 4
     53          static ALLOC_HDR *freep = NULL;
   \                     freep:
   \        0x0                      DS8 4
     54          
     55          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     56          void free (void *ap)
     57          {
   \                     free: (+1)
   \        0x0   0xB410             PUSH     {R4}
     58              ALLOC_HDR *bp, *p;
     59          
     60              bp = (ALLOC_HDR *)ap - 1;   /* point to block header */
   \        0x2   0xF1B0 0x0110      SUBS     R1,R0,#+16
     61              for (p = freep; !((bp > p) && (bp < p->s.ptr)) ; p = p->s.ptr)
   \        0x6   0x....             LDR.N    R2,??DataTable1
   \        0x8   0x6813             LDR      R3,[R2, #+0]
   \        0xA   0xE000             B.N      ??free_0
   \                     ??free_1: (+1)
   \        0xC   0x681B             LDR      R3,[R3, #+0]
   \                     ??free_0: (+1)
   \        0xE   0x428B             CMP      R3,R1
   \       0x10   0xD202             BCS.N    ??free_2
   \       0x12   0x6818             LDR      R0,[R3, #+0]
   \       0x14   0x4281             CMP      R1,R0
   \       0x16   0xD307             BCC.N    ??free_3
     62              {
     63                  if ((p >= p->s.ptr) && ((bp > p) || (bp < p->s.ptr)))
   \                     ??free_2: (+1)
   \       0x18   0x6818             LDR      R0,[R3, #+0]
   \       0x1A   0x4283             CMP      R3,R0
   \       0x1C   0xD3F6             BCC.N    ??free_1
   \       0x1E   0x428B             CMP      R3,R1
   \       0x20   0xD302             BCC.N    ??free_4
   \       0x22   0x6818             LDR      R0,[R3, #+0]
   \       0x24   0x4281             CMP      R1,R0
   \       0x26   0xD2F1             BCS.N    ??free_1
     64                  {
     65                      break; /* freed block at start or end of arena */
     66                  }
     67              }
     68          
     69              if ((bp + bp->s.size) == p->s.ptr)
   \                     ??free_4: (+1)
   \                     ??free_3: (+1)
   \       0x28   0x6848             LDR      R0,[R1, #+4]
   \       0x2A   0x0100             LSLS     R0,R0,#+4
   \       0x2C   0x4408             ADD      R0,R1,R0
   \       0x2E   0x681C             LDR      R4,[R3, #+0]
   \       0x30   0x42A0             CMP      R0,R4
   \       0x32   0xD108             BNE.N    ??free_5
     70              {
     71                  bp->s.size += p->s.ptr->s.size;
   \       0x34   0x684C             LDR      R4,[R1, #+4]
   \       0x36   0x6818             LDR      R0,[R3, #+0]
   \       0x38   0x6840             LDR      R0,[R0, #+4]
   \       0x3A   0x1904             ADDS     R4,R0,R4
   \       0x3C   0x604C             STR      R4,[R1, #+4]
     72                  bp->s.ptr = p->s.ptr->s.ptr;
   \       0x3E   0x6818             LDR      R0,[R3, #+0]
   \       0x40   0x6800             LDR      R0,[R0, #+0]
   \       0x42   0x6008             STR      R0,[R1, #+0]
   \       0x44   0xE001             B.N      ??free_6
     73              }
     74              else
     75              {
     76                  bp->s.ptr = p->s.ptr;
   \                     ??free_5: (+1)
   \       0x46   0x6818             LDR      R0,[R3, #+0]
   \       0x48   0x6008             STR      R0,[R1, #+0]
     77              }
     78          
     79              if ((p + p->s.size) == bp)
   \                     ??free_6: (+1)
   \       0x4A   0x6858             LDR      R0,[R3, #+4]
   \       0x4C   0x0100             LSLS     R0,R0,#+4
   \       0x4E   0x4418             ADD      R0,R3,R0
   \       0x50   0x4288             CMP      R0,R1
   \       0x52   0xD106             BNE.N    ??free_7
     80              {
     81                  p->s.size += bp->s.size;
   \       0x54   0x685C             LDR      R4,[R3, #+4]
   \       0x56   0x6848             LDR      R0,[R1, #+4]
   \       0x58   0x1904             ADDS     R4,R0,R4
   \       0x5A   0x605C             STR      R4,[R3, #+4]
     82                  p->s.ptr = bp->s.ptr;
   \       0x5C   0x6808             LDR      R0,[R1, #+0]
   \       0x5E   0x6018             STR      R0,[R3, #+0]
   \       0x60   0xE000             B.N      ??free_8
     83              }
     84              else
     85              {
     86                  p->s.ptr = bp;
   \                     ??free_7: (+1)
   \       0x62   0x6019             STR      R1,[R3, #+0]
     87              }
     88          
     89              freep = p;
   \                     ??free_8: (+1)
   \       0x64   0x6013             STR      R3,[R2, #+0]
     90          }
   \       0x66   0xBC10             POP      {R4}
   \       0x68   0x4770             BX       LR               ;; return
     91          
     92          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     93          void * malloc (unsigned nbytes)
     94          {
   \                     malloc: (+1)
   \        0x0   0xB410             PUSH     {R4}
     95              /* Get addresses for the HEAP start and end */
     96              #if defined(__IAR_SYSTEMS_ICC__)
     97                char* __HEAP_START = __section_begin("HEAP");
   \        0x2   0x....             LDR.N    R3,??DataTable1_1
     98                char* __HEAP_END = __section_end("HEAP");
   \        0x4   0x....             LDR.N    R4,??DataTable1_2
     99              #else
    100                #warning 非IAR编译器需确定HEAP起始结束地址
    101                extern char __HEAP_START;
    102                extern char __HEAP_END[];
    103              #endif
    104             
    105              ALLOC_HDR *p, *prevp;
    106              unsigned nunits;
    107          
    108              nunits = ((nbytes+sizeof(ALLOC_HDR)-1) / sizeof(ALLOC_HDR)) + 1;
   \        0x6   0x300F             ADDS     R0,R0,#+15
   \        0x8   0x0900             LSRS     R0,R0,#+4
   \        0xA   0x1C40             ADDS     R0,R0,#+1
    109          
    110              if ((prevp = freep) == NULL)
   \        0xC   0x....             LDR.N    R2,??DataTable1
   \        0xE   0x6811             LDR      R1,[R2, #+0]
   \       0x10   0x2900             CMP      R1,#+0
   \       0x12   0xD10A             BNE.N    ??malloc_0
    111              {
    112                  p = (ALLOC_HDR *)__HEAP_START;
   \       0x14   0x0019             MOVS     R1,R3
    113                  p->s.size = ( ((uint32)__HEAP_END - (uint32)__HEAP_START)
    114                      / sizeof(ALLOC_HDR) );
   \       0x16   0x1AE3             SUBS     R3,R4,R3
   \       0x18   0x091B             LSRS     R3,R3,#+4
   \       0x1A   0x604B             STR      R3,[R1, #+4]
    115                  p->s.ptr = &base;
   \       0x1C   0x....             LDR.N    R3,??DataTable1_3
   \       0x1E   0x600B             STR      R3,[R1, #+0]
    116                  base.s.ptr = p;
   \       0x20   0x6019             STR      R1,[R3, #+0]
    117                  base.s.size = 0;
   \       0x22   0x2100             MOVS     R1,#+0
   \       0x24   0x6059             STR      R1,[R3, #+4]
    118                  prevp = freep = &base;
   \       0x26   0x6013             STR      R3,[R2, #+0]
   \       0x28   0x6811             LDR      R1,[R2, #+0]
    119              }
    120          
    121              for (p = prevp->s.ptr; ; prevp = p, p = p->s.ptr)
   \                     ??malloc_0: (+1)
   \       0x2A   0x680B             LDR      R3,[R1, #+0]
   \       0x2C   0xE004             B.N      ??malloc_1
    122              {
    123                  if (p->s.size >= nunits)
    124                  {
    125                      if (p->s.size == nunits)
    126                      {
    127                          prevp->s.ptr = p->s.ptr;
    128                      }
    129                      else
    130                      {
    131                          p->s.size -= nunits;
    132                          p += p->s.size;
    133                          p->s.size = nunits;
    134                      }
    135                      freep = prevp;
    136                      return (void *)(p + 1);
    137                  }
    138          
    139                  if (p == freep)
   \                     ??malloc_2: (+1)
   \       0x2E   0x6811             LDR      R1,[R2, #+0]
   \       0x30   0x428B             CMP      R3,R1
   \       0x32   0xD015             BEQ.N    ??malloc_3
   \                     ??malloc_4: (+1)
   \       0x34   0x0019             MOVS     R1,R3
   \       0x36   0x681B             LDR      R3,[R3, #+0]
   \                     ??malloc_1: (+1)
   \       0x38   0x685C             LDR      R4,[R3, #+4]
   \       0x3A   0x4284             CMP      R4,R0
   \       0x3C   0xD3F7             BCC.N    ??malloc_2
   \       0x3E   0x685C             LDR      R4,[R3, #+4]
   \       0x40   0x4284             CMP      R4,R0
   \       0x42   0xD102             BNE.N    ??malloc_5
   \       0x44   0x6818             LDR      R0,[R3, #+0]
   \       0x46   0x6008             STR      R0,[R1, #+0]
   \       0x48   0xE006             B.N      ??malloc_6
   \                     ??malloc_5: (+1)
   \       0x4A   0x685C             LDR      R4,[R3, #+4]
   \       0x4C   0x1A24             SUBS     R4,R4,R0
   \       0x4E   0x605C             STR      R4,[R3, #+4]
   \       0x50   0x685C             LDR      R4,[R3, #+4]
   \       0x52   0x0124             LSLS     R4,R4,#+4
   \       0x54   0x4423             ADD      R3,R3,R4
   \       0x56   0x6058             STR      R0,[R3, #+4]
   \                     ??malloc_6: (+1)
   \       0x58   0x6011             STR      R1,[R2, #+0]
   \       0x5A   0xF113 0x0010      ADDS     R0,R3,#+16
   \       0x5E   0xE000             B.N      ??malloc_7
    140                      return NULL;
   \                     ??malloc_3: (+1)
   \       0x60   0x2000             MOVS     R0,#+0
   \                     ??malloc_7: (+1)
   \       0x62   0xBC10             POP      {R4}
   \       0x64   0x4770             BX       LR               ;; return
    141              }
    142          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x....'....        DC32     freep

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \        0x0   0x....'....        DC32     SFB(HEAP)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \        0x0   0x....'....        DC32     SFE(HEAP)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \        0x0   0x....'....        DC32     base
    143          
    144          /********************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   free
       4   malloc


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
      16  base
     106  free
       4  freep
     102  malloc

 
  20 bytes in section .bss
 224 bytes in section .text
 
 224 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: 1
