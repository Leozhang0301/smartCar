###############################################################################
#
# IAR ANSI C/C++ Compiler V8.32.1.169/W32 for ARM         18/May/2019  16:18:17
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  
#        C:\Users\que\Desktop\AAA_xinbiao\smartcar\lib\LPLD\HW\HW_FLEXBUS.c
#    Command line =  
#        -f C:\Users\TEMPLA~1.000\AppData\Local\Temp\EW7FE8.tmp
#        (C:\Users\que\Desktop\AAA_xinbiao\smartcar\lib\LPLD\HW\HW_FLEXBUS.c -D
#        LPLD_K60 -lCN
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\RAM\List"
#        -lB
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\RAM\List"
#        -o
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\RAM\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\@@\605110 IAR for
#        ARM 8.30\arm\inc\c\DLib_Config_Normal.h" -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\app\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\CPU\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\common\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\HW\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\LPLD\DEV\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Ports\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\uCOS-II\Source\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\FatFs\option\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\common\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\driver\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\descriptor\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\USB\class\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\Me\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\app\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\app\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\common\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\CPU\"
#        -I
#        "C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\..\..\..\lib\Jay\"
#        -Ol -I "D:\@@\605110 IAR for ARM 8.30\arm\CMSIS\Core\Include\" -I
#        "D:\@@\605110 IAR for ARM 8.30\arm\CMSIS\DSP\Include\" -D
#        ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\RAM\List\HW_FLEXBUS.lst
#    Object file  =  
#        C:\Users\que\Desktop\AAA_xinbiao\smartcar\project\28-(SDHC)LPLD_SdCard\iar\RAM\Obj\HW_FLEXBUS.o
#
###############################################################################

C:\Users\que\Desktop\AAA_xinbiao\smartcar\lib\LPLD\HW\HW_FLEXBUS.c
      1          /**
      2           * @file HW_FLEXBUS.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief FLEXBUS底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          
     23          #include "common.h"
     24          #include "HW_FLEXBUS.h"
     25          

   \                                 In section .data, align 4
     26          const uint32* FB_PORT[32] = {(uint32*)&PORTD->PCR[6], (uint32*)&PORTD->PCR[5], (uint32*)&PORTD->PCR[4], (uint32*)&PORTD->PCR[3],
   \                     FB_PORT:
   \        0x0   0x4004'C018        DC32 4004C018H, 4004C014H, 4004C010H, 4004C00CH, 4004C008H, 4004B028H
   \              0x4004'C014  
   \              0x4004'C010  
   \              0x4004'C00C  
   \              0x4004'C008  
   \              0x4004'B028  
   \       0x18   0x4004'B024        DC32 4004B024H, 4004B020H, 4004B01CH, 4004B018H, 4004B014H, 4004B010H
   \              0x4004'B020  
   \              0x4004'B01C  
   \              0x4004'B018  
   \              0x4004'B014  
   \              0x4004'B010  
   \       0x30   0x4004'B008        DC32 4004B008H, 4004B004H, 4004B000H, 4004A048H, 4004A044H, 4004A040H
   \              0x4004'B004  
   \              0x4004'B000  
   \              0x4004'A048  
   \              0x4004'A044  
   \              0x4004'A040  
   \       0x48   0x4004'A02C        DC32 4004A02CH, 4004A028H, 4004A024H, 4004A020H, 4004A01CH, 4004A018H
   \              0x4004'A028  
   \              0x4004'A024  
   \              0x4004'A020  
   \              0x4004'A01C  
   \              0x4004'A018  
   \       0x60   0x4004'B03C        DC32 4004B03CH, 4004B038H, 4004B034H, 4004B030H, 4004A05CH, 4004A058H
   \              0x4004'B038  
   \              0x4004'B034  
   \              0x4004'B030  
   \              0x4004'A05C  
   \              0x4004'A058  
   \       0x78   0x4004'A054        DC32 4004A054H, 4004A050H
   \              0x4004'A050  
     27                                       (uint32*)&PORTD->PCR[2], (uint32*)&PORTC->PCR[10], (uint32*)&PORTC->PCR[9], (uint32*)&PORTC->PCR[8],
     28                                       (uint32*)&PORTC->PCR[7], (uint32*)&PORTC->PCR[6], (uint32*)&PORTC->PCR[5], (uint32*)&PORTC->PCR[4],
     29                                       (uint32*)&PORTC->PCR[2], (uint32*)&PORTC->PCR[1], (uint32*)&PORTC->PCR[0], (uint32*)&PORTB->PCR[18],
     30                                       (uint32*)&PORTB->PCR[17], (uint32*)&PORTB->PCR[16], (uint32*)&PORTB->PCR[11], (uint32*)&PORTB->PCR[10],
     31                                       (uint32*)&PORTB->PCR[9], (uint32*)&PORTB->PCR[8], (uint32*)&PORTB->PCR[7], (uint32*)&PORTB->PCR[6],
     32                                       (uint32*)&PORTC->PCR[15], (uint32*)&PORTC->PCR[14], (uint32*)&PORTC->PCR[13], (uint32*)&PORTC->PCR[12],
     33                                       (uint32*)&PORTB->PCR[23], (uint32*)&PORTB->PCR[22], (uint32*)&PORTB->PCR[21], (uint32*)&PORTB->PCR[20]};
     34          
     35          /*
     36           * LPLD_FlexBus_Init
     37           * FlexBux通用初始化函数
     38           * 
     39           * 参数:
     40           *    fb_init_struct--FlexBus初始化结构体，
     41           *                        具体定义见FB_InitTypeDef
     42           *
     43           * 输出:
     44           *    0--配置错误
     45           *    1--配置成功
     46           */

   \                                 In section .text, align 4, keep-with-next
     47          uint8 LPLD_FlexBus_Init(FB_InitTypeDef fb_init_struct)
     48          {
   \                     LPLD_FlexBus_Init: (+1)
   \        0x0   0xB40F             PUSH     {R0-R3}
   \        0x2   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
     49            FBx Fbx = fb_init_struct.FB_Fbx;
   \        0x6   0xF89D 0x5028      LDRB     R5,[SP, #+40]
     50            uint32 base_addr = fb_init_struct.FB_ChipSelAddress;
   \        0xA   0xF8DD 0xB02C      LDR      R11,[SP, #+44]
     51            uint32 addr_space = fb_init_struct.FB_AddressSpace;
   \        0xE   0x9C0C             LDR      R4,[SP, #+48]
     52            uint8 size = fb_init_struct.FB_PortSize;
   \       0x10   0xF89D 0x6034      LDRB     R6,[SP, #+52]
     53            boolean justied = fb_init_struct.FB_IsRightJustied;
   \       0x14   0xF89D 0xA035      LDRB     R10,[SP, #+53]
     54            boolean aa = fb_init_struct.FB_AutoAckEnable;
   \       0x18   0xF89D 0x0036      LDRB     R0,[SP, #+54]
   \       0x1C   0xF88D 0x0000      STRB     R0,[SP, #+0]
     55            uint8 ws = fb_init_struct.FB_WateStates;
   \       0x20   0xF89D 0x7037      LDRB     R7,[SP, #+55]
     56            uint8 rah = fb_init_struct.FB_ReadAddrHold; 
   \       0x24   0xF89D 0x8038      LDRB     R8,[SP, #+56]
     57            uint8 wah = fb_init_struct.FB_WriteAddrHold;
   \       0x28   0xF89D 0x9039      LDRB     R9,[SP, #+57]
     58            uint32* pcr;
     59            uint8 n=0;
   \       0x2C   0x2000             MOVS     R0,#+0
     60            
     61            //参数检查
     62            ASSERT( Fbx <= 5);    //判断FB通道号
   \       0x2E   0x0028             MOVS     R0,R5
   \       0x30   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x32   0x2806             CMP      R0,#+6
   \       0x34   0xDB03             BLT.N    ??LPLD_FlexBus_Init_1
   \       0x36   0x213E             MOVS     R1,#+62
   \       0x38   0x48A4             LDR.N    R0,??LPLD_FlexBus_Init_0
   \       0x3A   0x....'....        BL       assert_failed
     63            ASSERT( base_addr >= 0x60000000 && base_addr <= 0xDFFFFFFF);    //判断基地址合法性
   \                     ??LPLD_FlexBus_Init_1: (+1)
   \       0x3E   0xF1BB 0x40C0      SUBS     R0,R11,#+1610612736
   \       0x42   0xF1B0 0x4F00      CMP      R0,#-2147483648
   \       0x46   0xD303             BCC.N    ??LPLD_FlexBus_Init_2
   \       0x48   0x213F             MOVS     R1,#+63
   \       0x4A   0x48A0             LDR.N    R0,??LPLD_FlexBus_Init_0
   \       0x4C   0x....'....        BL       assert_failed
     64            ASSERT( addr_space != 0);    //寻址空间大小
   \                     ??LPLD_FlexBus_Init_2: (+1)
   \       0x50   0x2C00             CMP      R4,#+0
   \       0x52   0xD103             BNE.N    ??LPLD_FlexBus_Init_3
   \       0x54   0x2140             MOVS     R1,#+64
   \       0x56   0x489D             LDR.N    R0,??LPLD_FlexBus_Init_0
   \       0x58   0x....'....        BL       assert_failed
     65            ASSERT( size <= 3);    //判断数据位宽
   \                     ??LPLD_FlexBus_Init_3: (+1)
   \       0x5C   0x0030             MOVS     R0,R6
   \       0x5E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x60   0x2804             CMP      R0,#+4
   \       0x62   0xDB03             BLT.N    ??LPLD_FlexBus_Init_4
   \       0x64   0x2141             MOVS     R1,#+65
   \       0x66   0x4899             LDR.N    R0,??LPLD_FlexBus_Init_0
   \       0x68   0x....'....        BL       assert_failed
     66            ASSERT( rah <= 3);     //判断读地址保持时间
   \                     ??LPLD_FlexBus_Init_4: (+1)
   \       0x6C   0x4640             MOV      R0,R8
   \       0x6E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x70   0x2804             CMP      R0,#+4
   \       0x72   0xDB03             BLT.N    ??LPLD_FlexBus_Init_5
   \       0x74   0x2142             MOVS     R1,#+66
   \       0x76   0x4895             LDR.N    R0,??LPLD_FlexBus_Init_0
   \       0x78   0x....'....        BL       assert_failed
     67            ASSERT( wah <= 3);     //判断写地址保持时间
   \                     ??LPLD_FlexBus_Init_5: (+1)
   \       0x7C   0x4648             MOV      R0,R9
   \       0x7E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x80   0x2804             CMP      R0,#+4
   \       0x82   0xDB03             BLT.N    ??LPLD_FlexBus_Init_6
   \       0x84   0x2143             MOVS     R1,#+67
   \       0x86   0x4891             LDR.N    R0,??LPLD_FlexBus_Init_0
   \       0x88   0x....'....        BL       assert_failed
     68            
     69            FB->CS[Fbx].CSMR = 0;
   \                     ??LPLD_FlexBus_Init_6: (+1)
   \       0x8C   0x4990             LDR.N    R1,??LPLD_FlexBus_Init_0+0x4  ;; 0x4000c000
   \       0x8E   0x220C             MOVS     R2,#+12
   \       0x90   0x0028             MOVS     R0,R5
   \       0x92   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x94   0x4350             MULS     R0,R2,R0
   \       0x96   0x4408             ADD      R0,R1,R0
   \       0x98   0x2300             MOVS     R3,#+0
   \       0x9A   0x6043             STR      R3,[R0, #+4]
     70                
     71            //设置基地址
     72            FB->CS[Fbx].CSAR = base_addr;
   \       0x9C   0x0028             MOVS     R0,R5
   \       0x9E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0xA0   0x4350             MULS     R0,R2,R0
   \       0xA2   0xF841 0xB000      STR      R11,[R1, R0]
     73            //端口位宽
     74            FB->CS[Fbx].CSCR  = FB_CSCR_PS(size);      
   \       0xA6   0x0028             MOVS     R0,R5
   \       0xA8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0xAA   0x4350             MULS     R0,R2,R0
   \       0xAC   0x4408             ADD      R0,R1,R0
   \       0xAE   0x0033             MOVS     R3,R6
   \       0xB0   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0xB2   0x019B             LSLS     R3,R3,#+6
   \       0xB4   0xF013 0x03C0      ANDS     R3,R3,#0xC0
   \       0xB8   0x6083             STR      R3,[R0, #+8]
     75            
     76            if(justied)
   \       0xBA   0x4650             MOV      R0,R10
   \       0xBC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0xBE   0x2800             CMP      R0,#+0
   \       0xC0   0xD00B             BEQ.N    ??LPLD_FlexBus_Init_7
     77            {
     78              FB->CS[Fbx].CSCR |= FB_CSCR_BLS_MASK;   // 数据右对齐
   \       0xC2   0x0028             MOVS     R0,R5
   \       0xC4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0xC6   0x4350             MULS     R0,R2,R0
   \       0xC8   0x4408             ADD      R0,R1,R0
   \       0xCA   0x002B             MOVS     R3,R5
   \       0xCC   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0xCE   0x4353             MULS     R3,R2,R3
   \       0xD0   0x440B             ADD      R3,R1,R3
   \       0xD2   0x689B             LDR      R3,[R3, #+8]
   \       0xD4   0xF453 0x7300      ORRS     R3,R3,#0x200
   \       0xD8   0x6083             STR      R3,[R0, #+8]
     79            }
     80                
     81            if(aa)    
   \                     ??LPLD_FlexBus_Init_7: (+1)
   \       0xDA   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0xDE   0x2800             CMP      R0,#+0
   \       0xE0   0xD00B             BEQ.N    ??LPLD_FlexBus_Init_8
     82            {
     83              FB->CS[Fbx].CSCR |= FB_CSCR_AA_MASK;   //使能内部应答
   \       0xE2   0x0028             MOVS     R0,R5
   \       0xE4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0xE6   0x4350             MULS     R0,R2,R0
   \       0xE8   0x4408             ADD      R0,R1,R0
   \       0xEA   0x002B             MOVS     R3,R5
   \       0xEC   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0xEE   0x4353             MULS     R3,R2,R3
   \       0xF0   0x440B             ADD      R3,R1,R3
   \       0xF2   0x689B             LDR      R3,[R3, #+8]
   \       0xF4   0xF453 0x7380      ORRS     R3,R3,#0x100
   \       0xF8   0x6083             STR      R3,[R0, #+8]
     84            }
     85            
     86            FB->CS[Fbx].CSCR |= FB_CSCR_WS(ws)    // 在内部应答信号之前加入ws个WS
     87                               | FB_CSCR_RDAH(rah)
     88                               | FB_CSCR_WRAH(wah);
   \                     ??LPLD_FlexBus_Init_8: (+1)
   \       0xFA   0x0028             MOVS     R0,R5
   \       0xFC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0xFE   0x4350             MULS     R0,R2,R0
   \      0x100   0x4408             ADD      R0,R1,R0
   \      0x102   0x002B             MOVS     R3,R5
   \      0x104   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \      0x106   0x4353             MULS     R3,R2,R3
   \      0x108   0x440B             ADD      R3,R1,R3
   \      0x10A   0x689B             LDR      R3,[R3, #+8]
   \      0x10C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \      0x10E   0x02BF             LSLS     R7,R7,#+10
   \      0x110   0xF417 0x477C      ANDS     R7,R7,#0xFC00
   \      0x114   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \      0x118   0xEA5F 0x4888      LSLS     R8,R8,#+18
   \      0x11C   0xF418 0x2840      ANDS     R8,R8,#0xC0000
   \      0x120   0xEA58 0x0707      ORRS     R7,R8,R7
   \      0x124   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \      0x128   0xEA5F 0x4909      LSLS     R9,R9,#+16
   \      0x12C   0xF419 0x3940      ANDS     R9,R9,#0x30000
   \      0x130   0xEA59 0x0707      ORRS     R7,R9,R7
   \      0x134   0x431F             ORRS     R7,R7,R3
   \      0x136   0x6087             STR      R7,[R0, #+8]
     89            
     90            //根据寻址空间大小计算基地址掩码
     91            addr_space = (addr_space-1)>>16;
   \      0x138   0x1E64             SUBS     R4,R4,#+1
   \      0x13A   0x0C24             LSRS     R4,R4,#+16
     92            FB->CS[Fbx].CSMR = FB_CSMR_BAM(addr_space)  //设置基地址掩码为128K地址空间 =2^n(n=BAM+16)
     93                          | FB_CSMR_V_MASK;    //使能CS信号
   \      0x13C   0x0028             MOVS     R0,R5
   \      0x13E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x140   0xFB02 0xF200      MUL      R2,R2,R0
   \      0x144   0xEB01 0x0002      ADD      R0,R1,R2
   \      0x148   0x0421             LSLS     R1,R4,#+16
   \      0x14A   0xF051 0x0101      ORRS     R1,R1,#0x1
   \      0x14E   0x6041             STR      R1,[R0, #+4]
     94            
     95            //使能复用功能的FB_CSn及引脚复用
     96            if(Fbx == FB0)
   \      0x150   0x0028             MOVS     R0,R5
   \      0x152   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x154   0x2800             CMP      R0,#+0
   \      0x156   0xD104             BNE.N    ??LPLD_FlexBus_Init_9
     97            {
     98              PORTD->PCR[1]  = PORT_PCR_MUX(5);       // FB_CS0     
   \      0x158   0xF44F 0x60A0      MOV      R0,#+1280
   \      0x15C   0x495D             LDR.N    R1,??LPLD_FlexBus_Init_0+0x8  ;; 0x4004c004
   \      0x15E   0x6008             STR      R0,[R1, #+0]
   \      0x160   0xE053             B.N      ??LPLD_FlexBus_Init_10
     99            }
    100            else if(Fbx == FB1)
   \                     ??LPLD_FlexBus_Init_9: (+1)
   \      0x162   0x0028             MOVS     R0,R5
   \      0x164   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x166   0x2801             CMP      R0,#+1
   \      0x168   0xD10D             BNE.N    ??LPLD_FlexBus_Init_11
    101            {
    102              FB->CSPMCR &= ~(FB_CSPMCR_GROUP1_MASK);
   \      0x16A   0x485B             LDR.N    R0,??LPLD_FlexBus_Init_0+0xC  ;; 0x4000c060
   \      0x16C   0x6801             LDR      R1,[R0, #+0]
   \      0x16E   0xF021 0x4170      BIC      R1,R1,#0xF0000000
   \      0x172   0x6001             STR      R1,[R0, #+0]
    103              FB->CSPMCR |= FB_CSPMCR_GROUP1(1);      
   \      0x174   0x6801             LDR      R1,[R0, #+0]
   \      0x176   0xF051 0x5180      ORRS     R1,R1,#0x10000000
   \      0x17A   0x6001             STR      R1,[R0, #+0]
    104              PORTD->PCR[0]  = PORT_PCR_MUX(5);       // FB_CS1  
   \      0x17C   0xF44F 0x60A0      MOV      R0,#+1280
   \      0x180   0x4956             LDR.N    R1,??LPLD_FlexBus_Init_0+0x10  ;; 0x4004c000
   \      0x182   0x6008             STR      R0,[R1, #+0]
   \      0x184   0xE041             B.N      ??LPLD_FlexBus_Init_10
    105            }
    106            else if(Fbx == FB2)
   \                     ??LPLD_FlexBus_Init_11: (+1)
   \      0x186   0x0028             MOVS     R0,R5
   \      0x188   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x18A   0x2802             CMP      R0,#+2
   \      0x18C   0xD10D             BNE.N    ??LPLD_FlexBus_Init_12
    107            {
    108              FB->CSPMCR &= ~(FB_CSPMCR_GROUP4_MASK);
   \      0x18E   0x4852             LDR.N    R0,??LPLD_FlexBus_Init_0+0xC  ;; 0x4000c060
   \      0x190   0x6801             LDR      R1,[R0, #+0]
   \      0x192   0xF431 0x2170      BICS     R1,R1,#0xF0000
   \      0x196   0x6001             STR      R1,[R0, #+0]
    109              FB->CSPMCR |= FB_CSPMCR_GROUP4(1);     
   \      0x198   0x6801             LDR      R1,[R0, #+0]
   \      0x19A   0xF451 0x3180      ORRS     R1,R1,#0x10000
   \      0x19E   0x6001             STR      R1,[R0, #+0]
    110              PORTC->PCR[18]  = PORT_PCR_MUX(5);       // FB_CS2
   \      0x1A0   0xF44F 0x60A0      MOV      R0,#+1280
   \      0x1A4   0x494E             LDR.N    R1,??LPLD_FlexBus_Init_0+0x14  ;; 0x4004b048
   \      0x1A6   0x6008             STR      R0,[R1, #+0]
   \      0x1A8   0xE02F             B.N      ??LPLD_FlexBus_Init_10
    111            }
    112            else if(Fbx == FB3)
   \                     ??LPLD_FlexBus_Init_12: (+1)
   \      0x1AA   0x0028             MOVS     R0,R5
   \      0x1AC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x1AE   0x2803             CMP      R0,#+3
   \      0x1B0   0xD10D             BNE.N    ??LPLD_FlexBus_Init_13
    113            {
    114              FB->CSPMCR &= ~(FB_CSPMCR_GROUP5_MASK);
   \      0x1B2   0x4849             LDR.N    R0,??LPLD_FlexBus_Init_0+0xC  ;; 0x4000c060
   \      0x1B4   0x6801             LDR      R1,[R0, #+0]
   \      0x1B6   0xF431 0x4170      BICS     R1,R1,#0xF000
   \      0x1BA   0x6001             STR      R1,[R0, #+0]
    115              FB->CSPMCR |= FB_CSPMCR_GROUP5(1);     
   \      0x1BC   0x6801             LDR      R1,[R0, #+0]
   \      0x1BE   0xF451 0x5180      ORRS     R1,R1,#0x1000
   \      0x1C2   0x6001             STR      R1,[R0, #+0]
    116              PORTC->PCR[19]  = PORT_PCR_MUX(5);       // FB_CS3
   \      0x1C4   0xF44F 0x60A0      MOV      R0,#+1280
   \      0x1C8   0x4946             LDR.N    R1,??LPLD_FlexBus_Init_0+0x18  ;; 0x4004b04c
   \      0x1CA   0x6008             STR      R0,[R1, #+0]
   \      0x1CC   0xE01D             B.N      ??LPLD_FlexBus_Init_10
    117            }
    118            else if(Fbx == FB4)
   \                     ??LPLD_FlexBus_Init_13: (+1)
   \      0x1CE   0x0028             MOVS     R0,R5
   \      0x1D0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x1D2   0x2804             CMP      R0,#+4
   \      0x1D4   0xD10B             BNE.N    ??LPLD_FlexBus_Init_14
    119            {
    120              FB->CSPMCR &= ~(FB_CSPMCR_GROUP2_MASK);
   \      0x1D6   0x4840             LDR.N    R0,??LPLD_FlexBus_Init_0+0xC  ;; 0x4000c060
   \      0x1D8   0x6801             LDR      R1,[R0, #+0]
   \      0x1DA   0xF031 0x6170      BICS     R1,R1,#0xF000000
   \      0x1DE   0x6001             STR      R1,[R0, #+0]
    121              FB->CSPMCR |= FB_CSPMCR_GROUP2(0);      
   \      0x1E0   0x6801             LDR      R1,[R0, #+0]
   \      0x1E2   0x6001             STR      R1,[R0, #+0]
    122              PORTC->PCR[17]  = PORT_PCR_MUX(5);       // FB_CS4
   \      0x1E4   0xF44F 0x60A0      MOV      R0,#+1280
   \      0x1E8   0x493F             LDR.N    R1,??LPLD_FlexBus_Init_0+0x1C  ;; 0x4004b044
   \      0x1EA   0x6008             STR      R0,[R1, #+0]
   \      0x1EC   0xE00D             B.N      ??LPLD_FlexBus_Init_10
    123            }
    124            else if(Fbx == FB5)
   \                     ??LPLD_FlexBus_Init_14: (+1)
   \      0x1EE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \      0x1F0   0x2D05             CMP      R5,#+5
   \      0x1F2   0xD10A             BNE.N    ??LPLD_FlexBus_Init_10
    125            {
    126              FB->CSPMCR &= ~(FB_CSPMCR_GROUP3_MASK);
   \      0x1F4   0x4838             LDR.N    R0,??LPLD_FlexBus_Init_0+0xC  ;; 0x4000c060
   \      0x1F6   0x6801             LDR      R1,[R0, #+0]
   \      0x1F8   0xF431 0x0170      BICS     R1,R1,#0xF00000
   \      0x1FC   0x6001             STR      R1,[R0, #+0]
    127              FB->CSPMCR |= FB_CSPMCR_GROUP3(0);     
   \      0x1FE   0x6801             LDR      R1,[R0, #+0]
   \      0x200   0x6001             STR      R1,[R0, #+0]
    128              PORTC->PCR[16]  = PORT_PCR_MUX(5);       // FB_CS5
   \      0x202   0xF44F 0x60A0      MOV      R0,#+1280
   \      0x206   0x4939             LDR.N    R1,??LPLD_FlexBus_Init_0+0x20  ;; 0x4004b040
   \      0x208   0x6008             STR      R0,[R1, #+0]
    129            }
    130            
    131            //使能总线地址、数据引脚复用功能
    132            //先使能低16位地址总线
    133            for(uint8 i=0; i<16; i++)
   \                     ??LPLD_FlexBus_Init_10: (+1)
   \      0x20A   0x2100             MOVS     R1,#+0
   \      0x20C   0xE008             B.N      ??LPLD_FlexBus_Init_15
    134            {
    135              pcr = (uint32 *)FB_PORT[i];
   \                     ??LPLD_FlexBus_Init_16: (+1)
   \      0x20E   0x4838             LDR.N    R0,??LPLD_FlexBus_Init_0+0x24
   \      0x210   0x000A             MOVS     R2,R1
   \      0x212   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \      0x214   0xF850 0x0022      LDR      R0,[R0, R2, LSL #+2]
    136              *pcr = PORT_PCR_MUX(5);    
   \      0x218   0xF44F 0x62A0      MOV      R2,#+1280
   \      0x21C   0x6002             STR      R2,[R0, #+0]
    137            }
   \      0x21E   0x1C49             ADDS     R1,R1,#+1
   \                     ??LPLD_FlexBus_Init_15: (+1)
   \      0x220   0x0008             MOVS     R0,R1
   \      0x222   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x224   0x2810             CMP      R0,#+16
   \      0x226   0xDBF2             BLT.N    ??LPLD_FlexBus_Init_16
    138            //使能其余的地址总线
    139            n=16;
   \      0x228   0x2110             MOVS     R1,#+16
    140            for(uint8 i=0; i<16; i++)
   \      0x22A   0x2200             MOVS     R2,#+0
   \      0x22C   0xE00D             B.N      ??LPLD_FlexBus_Init_17
    141            {
    142              if((addr_space>>i)&0x01)
   \                     ??LPLD_FlexBus_Init_18: (+1)
   \      0x22E   0x0020             MOVS     R0,R4
   \      0x230   0x40D0             LSRS     R0,R0,R2
   \      0x232   0x07C0             LSLS     R0,R0,#+31
   \      0x234   0xD508             BPL.N    ??LPLD_FlexBus_Init_19
    143              {
    144                pcr = (uint32 *)FB_PORT[n++];
   \      0x236   0x482E             LDR.N    R0,??LPLD_FlexBus_Init_0+0x24
   \      0x238   0x000B             MOVS     R3,R1
   \      0x23A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \      0x23C   0xF850 0x0023      LDR      R0,[R0, R3, LSL #+2]
   \      0x240   0x1C49             ADDS     R1,R1,#+1
    145                *pcr = PORT_PCR_MUX(5); 
   \      0x242   0xF44F 0x63A0      MOV      R3,#+1280
   \      0x246   0x6003             STR      R3,[R0, #+0]
    146              }
    147            }
   \                     ??LPLD_FlexBus_Init_19: (+1)
   \      0x248   0x1C52             ADDS     R2,R2,#+1
   \                     ??LPLD_FlexBus_Init_17: (+1)
   \      0x24A   0x0010             MOVS     R0,R2
   \      0x24C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x24E   0x2810             CMP      R0,#+16
   \      0x250   0xDBED             BLT.N    ??LPLD_FlexBus_Init_18
    148            //如果是32位宽，则使能高16位
    149            n=0;
   \      0x252   0x2100             MOVS     R1,#+0
    150            if(size == 0)
   \      0x254   0x0030             MOVS     R0,R6
   \      0x256   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x258   0x2800             CMP      R0,#+0
   \      0x25A   0xD101             BNE.N    ??LPLD_FlexBus_Init_20
    151            {   
    152              n=16;
   \      0x25C   0x2110             MOVS     R1,#+16
   \      0x25E   0xE012             B.N      ??LPLD_FlexBus_Init_21
    153            }else if(justied==0 && size == 0x10)
   \                     ??LPLD_FlexBus_Init_20: (+1)
   \      0x260   0x4650             MOV      R0,R10
   \      0x262   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x264   0x2800             CMP      R0,#+0
   \      0x266   0xD105             BNE.N    ??LPLD_FlexBus_Init_22
   \      0x268   0x0030             MOVS     R0,R6
   \      0x26A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x26C   0x2810             CMP      R0,#+16
   \      0x26E   0xD101             BNE.N    ??LPLD_FlexBus_Init_22
    154            {
    155              n=16;
   \      0x270   0x2110             MOVS     R1,#+16
   \      0x272   0xE008             B.N      ??LPLD_FlexBus_Init_21
    156            }else if(justied==0 && size == 0x01)
   \                     ??LPLD_FlexBus_Init_22: (+1)
   \      0x274   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \      0x278   0xF1BA 0x0F00      CMP      R10,#+0
   \      0x27C   0xD103             BNE.N    ??LPLD_FlexBus_Init_21
   \      0x27E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \      0x280   0x2E01             CMP      R6,#+1
   \      0x282   0xD100             BNE.N    ??LPLD_FlexBus_Init_21
    157            {
    158              n=8;
   \      0x284   0x2108             MOVS     R1,#+8
    159            }
    160            if(n!=0)
   \                     ??LPLD_FlexBus_Init_21: (+1)
   \      0x286   0x0008             MOVS     R0,R1
   \      0x288   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x28A   0x2800             CMP      R0,#+0
   \      0x28C   0xD012             BEQ.N    ??LPLD_FlexBus_Init_23
    161            {
    162              for(uint8 i=31; i>31-n; i--)
   \      0x28E   0x221F             MOVS     R2,#+31
   \      0x290   0xE008             B.N      ??LPLD_FlexBus_Init_24
    163              {
    164                pcr = (uint32 *)FB_PORT[i];
   \                     ??LPLD_FlexBus_Init_25: (+1)
   \      0x292   0x4817             LDR.N    R0,??LPLD_FlexBus_Init_0+0x24
   \      0x294   0x0013             MOVS     R3,R2
   \      0x296   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \      0x298   0xF850 0x0023      LDR      R0,[R0, R3, LSL #+2]
    165                *pcr = PORT_PCR_MUX(5);    
   \      0x29C   0xF44F 0x63A0      MOV      R3,#+1280
   \      0x2A0   0x6003             STR      R3,[R0, #+0]
    166              }
   \      0x2A2   0x1E52             SUBS     R2,R2,#+1
   \                     ??LPLD_FlexBus_Init_24: (+1)
   \      0x2A4   0x0008             MOVS     R0,R1
   \      0x2A6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \      0x2A8   0xF1D0 0x001F      RSBS     R0,R0,#+31
   \      0x2AC   0x0013             MOVS     R3,R2
   \      0x2AE   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \      0x2B0   0x4298             CMP      R0,R3
   \      0x2B2   0xDBEE             BLT.N    ??LPLD_FlexBus_Init_25
    167            }
    168            
    169            //控制信号线
    170            PORTB->PCR[19] = PORT_PCR_MUX(5);          // fb_oe_b
   \                     ??LPLD_FlexBus_Init_23: (+1)
   \      0x2B4   0xF44F 0x60A0      MOV      R0,#+1280
   \      0x2B8   0x490E             LDR.N    R1,??LPLD_FlexBus_Init_0+0x28  ;; 0x4004a04c
   \      0x2BA   0x6008             STR      R0,[R1, #+0]
    171            PORTC->PCR[11] = PORT_PCR_MUX(5);          // fb_rw_b  
   \      0x2BC   0x490E             LDR.N    R1,??LPLD_FlexBus_Init_0+0x2C  ;; 0x4004b02c
   \      0x2BE   0x6008             STR      R0,[R1, #+0]
    172                        
    173            return 1;
   \      0x2C0   0x2001             MOVS     R0,#+1
   \      0x2C2   0xE8BD 0x0FF2      POP      {R1,R4-R11}
   \      0x2C6   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
   \      0x2CA   0xBF00             Nop      
   \                     ??LPLD_FlexBus_Init_0:
   \      0x2CC   0x....'....        DC32     ?_0
   \      0x2D0   0x4000'C000        DC32     0x4000c000
   \      0x2D4   0x4004'C004        DC32     0x4004c004
   \      0x2D8   0x4000'C060        DC32     0x4000c060
   \      0x2DC   0x4004'C000        DC32     0x4004c000
   \      0x2E0   0x4004'B048        DC32     0x4004b048
   \      0x2E4   0x4004'B04C        DC32     0x4004b04c
   \      0x2E8   0x4004'B044        DC32     0x4004b044
   \      0x2EC   0x4004'B040        DC32     0x4004b040
   \      0x2F0   0x....'....        DC32     FB_PORT
   \      0x2F4   0x4004'A04C        DC32     0x4004a04c
   \      0x2F8   0x4004'B02C        DC32     0x4004b02c
    174          }

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x43 0x3A          DC8 43H, 3AH, 5CH, 55H, 73H, 65H, 72H, 73H
   \              0x5C 0x55    
   \              0x73 0x65    
   \              0x72 0x73    
   \        0x8   0x5C 0x71          DC8 5CH, 71H, 75H, 65H, 5CH, 44H, 65H, 73H
   \              0x75 0x65    
   \              0x5C 0x44    
   \              0x65 0x73    
   \       0x10   0x6B 0x74          DC8 6BH, 74H, 6FH, 70H, 5CH, 41H, 41H, 41H
   \              0x6F 0x70    
   \              0x5C 0x41    
   \              0x41 0x41    
   \       0x18   0x5F 0x78          DC8 5FH, 78H, 69H, 6EH, 62H, 69H, 61H, 6FH
   \              0x69 0x6E    
   \              0x62 0x69    
   \              0x61 0x6F    
   \       0x20   0x5C 0x73          DC8 5CH, 73H, 6DH, 61H, 72H, 74H, 63H, 61H
   \              0x6D 0x61    
   \              0x72 0x74    
   \              0x63 0x61    
   \       0x28   0x72 0x5C          DC8 72H, 5CH, 6CH, 69H, 62H, 5CH, 4CH, 50H
   \              0x6C 0x69    
   \              0x62 0x5C    
   \              0x4C 0x50    
   \       0x30   0x4C 0x44          DC8 4CH, 44H, 5CH, 48H, 57H, 5CH, 48H, 57H
   \              0x5C 0x48    
   \              0x57 0x5C    
   \              0x48 0x57    
   \       0x38   0x5F 0x46          DC8 5FH, 46H, 4CH, 45H, 58H, 42H, 55H, 53H
   \              0x4C 0x45    
   \              0x58 0x42    
   \              0x55 0x53    
   \       0x40   0x2E 0x63          DC8 2EH, 63H, 0
   \              0x00         
   \       0x43   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      56   LPLD_FlexBus_Init
        56   -> assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      68  ?_0
     128  FB_PORT
     764  LPLD_FlexBus_Init

 
 128 bytes in section .data
  68 bytes in section .rodata
 764 bytes in section .text
 
 764 bytes of CODE  memory
  68 bytes of CONST memory
 128 bytes of DATA  memory

Errors: none
Warnings: 1
